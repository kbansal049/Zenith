public class TAMReassignmentQueueable implements System.Queueable{
    Set<Id> uIds = new set<Id>();
    public TAMReassignmentQueueable(Set<Id> userIds){
        uIds = userIds;
    }
    public void execute(QueueableContext qc){
        Map<Id, Case> mapCases = new Map<Id, Case>([Select Id, OwnerId, AccountId, Account.TAM_Name_New__c, Account.Secondary_TAM_Name__c, Account.X3rd_TAM_Name__c from Case where Case_Type__c not in ('Provisioning', 'Categorization') and OwnerId = :Label.Support_Queue_Id and (Account.TAM_Name_New__c in :uIds or Account.Secondary_TAM_Name__c in :uIds or Account.X3rd_TAM_Name__c in :uIds)]);
        List<AgentWork> awlst = new List<AgentWork>();
        if(mapCases!= null && !mapCases.isEmpty()){
            for(PendingServiceRouting psr: [Select Id, WorkItemId from PendingServiceRouting where WorkItemId in :mapCases.keySet() and IsPushAttempted = false]){
                AgentWork work = new AgentWork();
                work.ServiceChannelId = Label.Case_Service_Channel_Id;
                work.WorkItemId = psr.WorkItemId;
                work.CapacityWeight = 1;
                if(mapCases != null && !mapCases.isEmpty() && mapCases.containsKey(psr.WorkItemId) && mapCases.get(psr.WorkItemId)  != null && mapCases.get(psr.WorkItemId).AccountId != null){
                    if(mapCases.get(psr.WorkItemId).Account.TAM_Name_New__c != null && uIds.contains(mapCases.get(psr.WorkItemId).Account.TAM_Name_New__c)){
                        work.UserId = mapCases.get(psr.WorkItemId).Account.TAM_Name_New__c;
                    }else if(mapCases.get(psr.WorkItemId).Account.Secondary_TAM_Name__c != null && uIds.contains(mapCases.get(psr.WorkItemId).Account.Secondary_TAM_Name__c)){
                        work.UserId = mapCases.get(psr.WorkItemId).Account.Secondary_TAM_Name__c;
                    }else if(mapCases.get(psr.WorkItemId).Account.X3rd_TAM_Name__c != null && uIds.contains(mapCases.get(psr.WorkItemId).Account.X3rd_TAM_Name__c)){
                        work.UserId = mapCases.get(psr.WorkItemId).Account.X3rd_TAM_Name__c;
                    }
                }
                work.PendingServiceRoutingId = psr.Id;
                awlst.add(work);
            }
            insert awlst;
        }
    }
    public static void booster(){
        integer i=0;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
    }
}