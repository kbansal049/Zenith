/*
 * This class is generated dynamically from Patch Rules.
 */
global class PatchRuleEngine8 extends  PatchRuleEngineBase implements IPatchRuleEngine
{
  private Id matchGroup1(PatchDataModel.MatchTarget t)
  {
    if(opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }) && opIn(t.state, new Set<String> { 'me', 'maine', 'vt', 'vermont', 'nh', 'new hampshire' }) && opIn(t.custom1, new Set<String> { 'commercial' }))      return 'a304u000002pkyJAAQ'; //Patch CSR ME/NH/VT - GEO Based
    if(opIn(t.country, new Set<String> { 'mx', 'mex', 'mexico' }) && opIn(t.custom1, new Set<String> { 'smb', 'commercial' }))      return 'a304u000002eQHsAAM'; //Patch CSR Mexico - Geo Based
    if(opIn(t.country, new Set<String> { 'cr', 'cri', 'costa rica', 'sv', 'slv', 'gq', 'gnq', 'hn', 'hnd', 'honduras', 'el salvador', 'gt', 'gtm', 'guatemala', 'ni', 'nic', 'nicaragua', 'pa', 'pan', 'panama', 'bz', 'blz', 'belize', 'bermuda', 'bm', 'jm', 'jam', 'jamaica', 'pm', 'pr', 'pri', 'pry', 'puerto rico', 'do', 'dom', 'dominican republic', 'cym', 'cayman islands', 'tc', 'tca', 'trinidad and tobago', 'tt', 'tto', 'turks and caicos islands', 'bs', 'bhs', 'bahamas', 'saint kitts and nevis', 'saint kitts & nevis anguilla', 'saint lucia', 'antigua and barbuda', 'antigua/barbuda', 'aw', 'abw', 'aruba', 'bb', 'brb', 'barbados', 'maf', 'martinique', 'mf', 'mq', 'mtq', 'west indies', 'grenada', 'ag', 'ai', 'aia', 'angola anguilla', 'anguilla', 'aq', 'ata', 'atg', 'bes', 'bl', 'blm', 'bmu', 'sint eustatius and saba', 'bq', 'british virgin islands', 'curacao', 'cuw', 'cw', 'dm', 'dma', 'gf', 'glp', 'gp', 'gs', 'guadeloupe', 'guf', 'kn', 'kna', 'ky', 'lc', 'lca', 'saint barthelemy', 'saint helena', 'ascension and tristan da cunha', 'saint martin (french part)', 'saint pierre and miquelon', 'saint vincent and the grenadines', 'san marino', 'sao tome and principe', 'sh', 'shn', 'sint maarten (dutch part)', 'sm', 'smr', 'south georgia and the south sandwich islands', 'spm', 'sr', 'st', 'stp', 'sx', 'sxm', 'vc', 'vct', 'vg', 'vgb', 'vi vir', 'virgin islands (british)', 'virgin islands (u.s.)', 'virgin islands (usa)', 'wallis and futuna', 'wf', 'wlf', 'cu', 'cub', 'cuba', 'equatorial guinea', 'fk', 'flk', 'falkland islands', 'malvinas', 'gn', 'gin', 'guinea', 'gw', 'gnb', 'guinea-bissau', 'ht', 'hti', 'haiti', 'american samoa', 'united states minor outlying islands', 'st. pierre and miquelon' }) && opIn(t.custom1, new Set<String> { 'smb', 'commercial' }))      return 'a304u000002pkyKAAQ'; //Patch CSR Central America/Caribbean - GEO Based
    if(opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }) && opIn(t.state, new Set<String> { 'mi', 'michigan' }) && opIn(t.custom1, new Set<String> { 'commercial' }))      return 'a304u000002pkyLAAQ'; //Patch CSR MI - GEO Based
    if(opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }) && opIn(t.state, new Set<String> { 'sd', 'south dakota', 'mn', 'minnesota', 'in', 'indiana' }) && opIn(t.custom1, new Set<String> { 'commercial' }))      return 'a304u000002pkyMAAQ'; //Patch CSR MN/SD/IN - GEO Based
    if(opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }) && opIn(t.state, new Set<String> { 'idaho', 'id', 'montana', 'mt', 'wyoming', 'wy', 'nevada', 'nv' }) && opIn(t.custom1, new Set<String> { 'commercial' }))      return 'a304u000002pkyNAAQ'; //Patch CSR MT/WY/ID/NV - GEO Based
    if(opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }) && opIn(t.custom1, new Set<String> { 'commercial' }) && opIn(t.state, new Set<String> { 'nc', 'north carolina' }) && opStart(t.zipCode, new Set<String> { '27006', '27007', '27009', '27010', '27011', '27012', '27013', '27014', '27016', '27017', '27018', '27019', '27020', '27021', '27022', '27023', '27024', '27025', '27027', '27028', '27030', '27031', '27040', '27041', '27042', '27043', '27045', '27046', '27047', '27048', '27049', '27050', '27051', '27052', '27053', '27054', '27055', '27094', '27098', '27099', '27101', '27102', '27103', '27104', '27105', '27106', '27107', '27108', '27109', '27110', '27111', '27113', '27114', '27115', '27116', '27117', '27120', '27127', '27130', '27150', '27152', '27155', '27157', '27198', '27199', '27201', '27202', '27203', '27204', '27205', '27207', '27208', '27209', '27212', '27213', '27214', '27215', '27216', '27217', '27228', '27229', '27230', '27231', '27233', '27235', '27237', '27239', '27242', '27243', '27244', '27247', '27248', '27249', '27252', '27253', '27256', '27258', '27259', '27260', '27261', '27262', '27263', '27264', '27265', '27268', '27278', '27281', '27282', '27283', '27284', '27285', '27288', '27289', '27291', '27292', '27293', '27294', '27295', '27298', '27299', '27301', '27302', '27305', '27306', '27310', '27311', '27312', '27313', '27314', '27315', '27316', '27317', '27320', '27323', '27325', '27326', '27330', '27331', '27332', '27340', '27341', '27342', '27343', '27344', '27349', '27350', '27351', '27355', '27356', '27357', '27358', '27359', '27360', '27361', '27370', '27371', '27373', '27374', '27375', '27376', '27377', '27379', '27401', '27402', '27403', '27404', '27405', '27406', '27407', '27408', '27409', '27410', '27411', '27412', '27413', '27415', '27416', '27417', '27419', '27420', '27425', '27427', '27429', '27435', '27438', '27455', '27495', '27497', '27498', '27499', '27501', '27502', '27503', '27504', '27505', '27506', '27507', '27508', '27509', '27510', '27511', '27512', '27513', '27514', '27515', '27516', '27517', '27518', '27519', '27520', '27521', '27522', '27523', '27524', '27525', '27526', '27527', '27528', '27529', '27530', '27531', '27532', '27533', '27534', '27536', '27537', '27539', '27540', '27541', '27542', '27543', '27544', '27545', '27546', '27549', '27551', '27552', '27553', '27555', '27556', '27557', '27559', '27560', '27562', '27563', '27565', '27568', '27569', '27570', '27571', '27572', '27573', '27574', '27576', '27577', '27581', '27582', '27583', '27584', '27586', '27587', '27588', '27589', '27591', '27592', '27593', '27594', '27596', '27597', '27599', '27601', '27602', '27603', '27604', '27605', '27606', '27607', '27608', '27609', '27610', '27611', '27612', '27613', '27614', '27615', '27616', '27617', '27619', '27620', '27621', '27622', '27623', '27624', '27625', '27626', '27627', '27628', '27629', '27634', '27635', '27636', '27640', '27650', '27656', '27658', '27661', '27668', '27675', '27676', '27690', '27695', '27697', '27698', '27699', '27701', '27702', '27703', '27704', '27705', '27706', '27707', '27708', '27709', '27710', '27711', '27712', '27713', '27715', '27717', '27722', '27801', '27802', '27803', '27804', '27805', '27806', '27807', '27808', '27809', '27810', '27811', '27812', '27813', '27814', '27815', '27816', '27817', '27818', '27819', '27820', '27821', '27822', '27823', '27824', '27825', '27826', '27827', '27828', '27829', '27830', '27831', '27832', '27833', '27834', '27835', '27836', '27837', '27839', '27840', '27841', '27842', '27843', '27844', '27845', '27846', '27847', '27849', '27850', '27851', '27852', '27853', '27855', '27856', '27857', '27858', '27860', '27861', '27862', '27863', '27864', '27865', '27866', '27867', '27868', '27869', '27870', '27871', '27872', '27873', '27874', '27875', '27876', '27877', '27878', '27879', '27880', '27881', '27882', '27883', '27884', '27885', '27886', '27887', '27888', '27889', '27890', '27891', '27892', '27893', '27894', '27895', '27896', '27897', '27906', '27907', '27909', '27910', '27915', '27916', '27917', '27919', '27920', '27921', '27922', '27923', '27924', '27925', '27926', '27927', '27928', '27929', '27930', '27932', '27935', '27936', '27937', '27938', '27939', '27941', '27942', '27943', '27944', '27946', '27947', '27948', '27949', '27950', '27953', '27954', '27956', '27957', '27958', '27959', '27960', '27962', '27964', '27965', '27966', '27967', '27968', '27969', '27970', '27972', '27973', '27974', '27976', '27978', '27979', '27980', '27981', '27982', '27983', '27985', '27986', '28001', '28002', '28006', '28007', '28009', '28010', '28016', '28017', '28018', '28019', '28020', '28021', '28023', '28024', '28026', '28031', '28033', '28034', '28035', '28036', '28037', '28038', '28039', '28040', '28041', '28042', '28043', '28052', '28053', '28055', '28070', '28071', '28072', '28073', '28074', '28076', '28077', '28080', '28081', '28082', '28083', '28086', '28088', '28089', '28090', '28091', '28092', '28093', '28097', '28102', '28108', '28109', '28111', '28114', '28115', '28117', '28119', '28123', '28124', '28125', '28127', '28128', '28129', '28135', '28136', '28137', '28138', '28139', '28144', '28145', '28146', '28147', '28150', '28151', '28152', '28159', '28160', '28163', '28164', '28166', '28167', '28168', '28169', '28170', '28301', '28302', '28303', '28304', '28305', '28306', '28307', '28308', '28309', '28310', '28311', '28312', '28314', '28315', '28318', '28319', '28320', '28323', '28325', '28326', '28327', '28328', '28329', '28330', '28331', '28332', '28333', '28334', '28335', '28337', '28338', '28339', '28340', '28341', '28342', '28343', '28344', '28345', '28347', '28348', '28349', '28350', '28351', '28352', '28353', '28355', '28356', '28357', '28358', '28359', '28360', '28362', '28363', '28364', '28365', '28366', '28367', '28368', '28369', '28370', '28371', '28372', '28373', '28374', '28375', '28376', '28377', '28378', '28379', '28380', '28382', '28383', '28384', '28385', '28386', '28387', '28388', '28390', '28391', '28392', '28393', '28394', '28395', '28396', '28398', '28399', '28401', '28402', '28403', '28404', '28405', '28406', '28407', '28408', '28409', '28410', '28411', '28412', '28420', '28421', '28422', '28423', '28424', '28425', '28428', '28429', '28430', '28431', '28432', '28433', '28434', '28435', '28436', '28438', '28439', '28441', '28442', '28443', '28444', '28445', '28447', '28448', '28449', '28450', '28451', '28452', '28453', '28454', '28455', '28456', '28457', '28458', '28459', '28460', '28461', '28462', '28463', '28464', '28465', '28466', '28467', '28468', '28469', '28470', '28472', '28478', '28479', '28480', '28501', '28502', '28503', '28504', '28508', '28509', '28510', '28511', '28512', '28513', '28515', '28516', '28518', '28519', '28520', '28521', '28522', '28523', '28524', '28525', '28526', '28527', '28528', '28529', '28530', '28531', '28532', '28533', '28537', '28538', '28539', '28540', '28541', '28542', '28543', '28544', '28545', '28546', '28547', '28551', '28552', '28553', '28554', '28555', '28556', '28557', '28560', '28561', '28562', '28563', '28564', '28570', '28571', '28572', '28573', '28574', '28575', '28577', '28578', '28579', '28580', '28581', '28582', '28583', '28584', '28585', '28586', '28587', '28589', '28590', '28594', '28601', '28602', '28603', '28604', '28605', '28606', '28607', '28608', '28609', '28610', '28611', '28612', '28613', '28615', '28616', '28617', '28618', '28619', '28621', '28622', '28623', '28624', '28625', '28626', '28627', '28628', '28629', '28630', '28631', '28633', '28634', '28635', '28636', '28637', '28638', '28640', '28641', '28642', '28643', '28644', '28645', '28646', '28647', '28649', '28650', '28651', '28652', '28653', '28654', '28655', '28656', '28657', '28658', '28659', '28660', '28661', '28662', '28663', '28664', '28665', '28666', '28667', '28668', '28669', '28670', '28671', '28672', '28673', '28675', '28676', '28677', '28678', '28679', '28680', '28681', '28682', '28683', '28684', '28685', '28687', '28688', '28689', '28690', '28691', '28692', '28693', '28694', '28697', '28698', '28699', '28701', '28702', '28704', '28705', '28707', '28708', '28709', '28710', '28711', '28712', '28713', '28714', '28715', '28716', '28717', '28718', '28719', '28720', '28721', '28722', '28723', '28724', '28725', '28726', '28727', '28728', '28729', '28730', '28731', '28732', '28733', '28734', '28735', '28736', '28737', '28738', '28739', '28740', '28741', '28742', '28743', '28744', '28745', '28746', '28747', '28748', '28749', '28750', '28751', '28752', '28753', '28754', '28755', '28756', '28757', '28758', '28759', '28760', '28761', '28762', '28763', '28765', '28766', '28768', '28770', '28771', '28772', '28773', '28774', '28775', '28776', '28777', '28778', '28779', '28781', '28782', '28783', '28784', '28785', '28786', '28787', '28788', '28789', '28790', '28791', '28792', '28793', '28801', '28802', '28803', '28804', '28805', '28806', '28810', '28813', '28814', '28815', '28816', '28901', '28902', '28903', '28904', '28905', '28906', '28909' }))      return 'a304u000002pkyOAAQ'; //Patch CSR NC - GEO Based
    if((opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }) && opIn(t.state, new Set<String> { 'ne', 'nebraska', 'ia', 'iowa', 'ks', 'kansas' }) && opIn(t.custom1, new Set<String> { 'commercial' })) || (opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }) && opIn(t.custom1, new Set<String> { 'commercial' }) && opIn(t.state, new Set<String> { 'mo', 'missouri' }) && opZipcode(t.zipCode, '64002,64011~64019,64024,64028~64030,64034~64037,64040,64048,64050~64058,64060~64086,64088~64090,64092~64093,64097~64098,64101~64102,64105~64106,64108~64114,64116~64121,64123~64134,64136~64139,64141,64144~64158,64161~64168,64170~64171,64179~64180,64184,64187~64188,64190~64191,64195~64199,64401~64402,64420~64424,64426~64434,64436~64446,64448~64449,64451,64453~64459,64461,64463,64465~64471,64473~64477,64479~64487,64489~64494,64496~64499,64501~64508,64620,64624~64625,64632,64636~64637,64640,64642,64644,64647~64650,64654,64657,64668,64670~64671,64689,64701,64720,64722~64726,64728,64730,64733~64735,64739~64748,64750,64752,64755~64756,64759,64762~64763,64765~64767,64769~64772,64776,64778~64781,64783~64784,64788,64790,64801~64804,64830~64836,64840~64844,64847~64850,64853~64859,64861~64868,64870,64873~64874,64999,65603,65607,65623,65625,65635,65641,65646~65647,65654,65661,65682,65707~65708,65712,65723,65730,65734,65745,65752,65756,65769,65772,65785')))      return 'a304u000002pkyPAAQ'; //Patch CSR NE/IA/KS - GEO Based
    if(opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }) && opIn(t.custom1, new Set<String> { 'commercial' }) && opIn(t.state, new Set<String> { 'nj', 'n.j.', 'new jersey' }) && opZipcode(t.zipCode, '07002~07007,07009~07024,07026~07036,07039~07047,07050~07052,07054~07055,07057~07063,07065~07066,07068~07076,07078~07079,07081~07083,07086~07088,07090~07094,07096~07097,07099,07101~07112,07114,07175,07184,07188~07189,07191~07193,07195,07198~07199,07201~07208,07302~07308,07310~07311,07395,07399,07401,07403,07405,07407,07410,07416~07424,07428,07430,07432,07435~07436,07438~07440,07442,07444,07446,07450~07452,07456~07458,07460~07463,07465,07470,07474,07480~07481,07495,07501~07514,07522,07524,07533,07538,07543~07544,07601~07608,07620~07621,07624,07626~07628,07630~07632,07640~07650,07652~07653,07656~07657,07660~07663,07666,07670,07675~07677,07699,07701~07704,07710~07712,07715~07724,07726~07728,07730~07735,07737~07740,07746~07748,07750~07758,07760,07762~07765,07799,07801~07803,07806,07820~07823,07825~07834,07836~07840,07842~07853,07855~07857,07860,07863,07865~07866,07869~07871,07874~07882,07885,07890,07901~07902,07920~07922,07924,07926~07928,07930~07936,07938~07940,07945~07946,07950,07960~07963,07970,07974,07976~07981,07999,08501~08502,08504,08510,08514,08526,08528,08530,08535,08551,08553,08555~08559,08720,08730,08736,08750,08801~08805,08807~08809,08821~08823,08825~08827,08829,08833~08836,08844,08848,08853,08858,08865,08867~08870,08873,08875~08876,08880,08885~08890'))      return 'a304u000002pkyQAAQ'; //Patch CSR NJ North - GEO Based
    if(opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }) && opIn(t.custom1, new Set<String> { 'commercial' }) && opIn(t.state, new Set<String> { 'nj', 'n.j.', 'new jersey' }) && opZipcode(t.zipCode, '07001,07008,07064,07067,07077,07080,07095,08001~08012,08014~08016,08018~08023,08025~08039,08041~08043,08045~08046,08048~08057,08059~08081,08083~08099,08101~08110,08201~08205,08210,08212~08215,08217~08221,08223~08226,08230~08232,08234,08240~08248,08250~08252,08260,08270,08302,08310~08324,08326~08330,08332,08340~08350,08352~08353,08360~08362,08401~08406,08505,08511~08512,08515,08518,08520,08525,08527,08533~08534,08536,08540~08544,08550,08554,08560~08562,08601~08611,08618~08620,08625,08628~08629,08638,08640~08641,08644~08648,08650,08666,08690~08691,08695,08701,08721~08724,08731~08735,08738~08742,08751~08759,08810,08812,08816~08818,08820,08824,08828,08830~08832,08837,08840,08846,08850,08852,08854~08855,08857,08859,08861~08863,08871~08872,08879,08882,08884,08899,08901~08904,08906,08933,08989'))      return 'a304u000002pkyRAAQ'; //Patch CSR NJ South - GEO Based
    if(opIn(t.country, new Set<String> { 'nl', 'nld', 'netherlands', 'the netherlands', 'holland', 'north holland' }) && opStart(t.zipCode, new Set<String> { '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '34', '35', '36', '37', '38', '39', '70', '71', '72', '73', '74', '75', '76', '77', '78', '79', '80', '81', '82', '83', '84', '86', '89', '91', '92', '93', '94', '95', '97', '98', '99' }) && opIn(t.custom1, new Set<String> { 'smb', 'commercial' }))      return 'a304u000002pkySAAQ'; //Patch CSR NL North - GEO Based
    if(opIn(t.country, new Set<String> { 'nl', 'nld', 'netherlands', 'the netherlands', 'holland', 'north holland' }) && opStart(t.zipCode, new Set<String> { '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31', '32', '33', '41', '42', '43', '44', '45', '46', '47', '48', '49', '50', '51', '52', '53', '54', '55', '56', '57', '58', '59', '60', '61', '62', '63', '64', '65', '66', '67', '68', '69' }) && opIn(t.custom1, new Set<String> { 'smb', 'commercial' }))      return 'a304u000002pkyTAAQ'; //Patch CSR NL South - GEO Based
    if(opIn(t.country, new Set<String> { 'no', 'nor', 'norway', 'dk', 'dnk', 'denmark' }) && opIn(t.custom1, new Set<String> { 'smb', 'commercial' }))      return 'a304u000002pkyUAAQ'; //Patch CSR Norway/Denmark - GEO Based
    if(opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }) && opIn(t.custom1, new Set<String> { 'commercial' }) && opIn(t.state, new Set<String> { 'ny', 'new york' }) && opZipcode(t.zipCode, '10003,10009~10010,10016~10017,10022,10065,10156~10160,10171~10172,10175,10177~10178,10211,10276'))      return 'a304u000002pkyVAAQ'; //Patch CSR NYC East - GEO Based
    if(opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }) && opIn(t.custom1, new Set<String> { 'commercial' }) && opIn(t.state, new Set<String> { 'ny', 'new york' }) && opZipcode(t.zipCode, '10019~10021,10023~10037,10039~10040,10055,10069,10075,10087,10101~10109,10111~10112,10115~10116,10124,10126,10128,10131,10150~10155,10162~10170,10173~10174,10176,10179,10185,10258~10259,10261,10451~10475'))      return 'a304u000002pkyWAAQ'; //Patch CSR NYC North - GEO Based
    if(opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }) && opIn(t.custom1, new Set<String> { 'commercial' }) && opIn(t.state, new Set<String> { 'ny', 'new york' }) && opZipcode(t.zipCode, '00501,00544,06390,10002,10004~10008,10038,10041,10043~10045,10080~10081,10117,10129,10203,10212,10242,10249,10256,10260,10265,10268~10275,10277~10282,10285~10286,10301~10314,11001~11005,11010,11020~11024,11026~11027,11030,11040,11042,11050~11055,11096,11101~11106,11109,11120,11201~11226,11228~11239,11241~11243,11245,11247,11249,11251~11252,11256,11351~11352,11354~11375,11377~11381,11385~11386,11405,11411~11436,11439,11451,11499,11501,11507,11509~11510,11514,11516,11518,11520,11530~11531,11542,11545,11547~11561,11563,11565~11566,11568~11572,11575~11577,11579~11582,11590,11596,11598~11599,11690~11695,11697,11701~11707,11709~11710,11713~11722,11724~11727,11729~11733,11735,11737~11743,11746~11747,11749,11751~11758,11760,11762~11773,11775~11780,11782~11784,11786~11798,11801~11804,11815,11819,11853,11901,11930~11935,11937,11939~11942,11944,11946~11965,11967~11973,11975~11978,11980'))      return 'a304u000002pkyXAAQ'; //Patch CSR NYC South - GEO Based
    if(opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }) && opIn(t.custom1, new Set<String> { 'commercial' }) && opIn(t.state, new Set<String> { 'ny', 'new york' }) && opZipcode(t.zipCode, '10001,10011~10014,10018,10060,10090,10110,10113~10114,10118~10123,10125,10130,10132~10133,10138,10161,10199,10213'))      return 'a304u000002pkyYAAQ'; //Patch CSR NYC West - GEO Based
    if(opIn(t.country, new Set<String> { 'ca', 'canada' }) && opIn(t.custom1, new Set<String> { 'commercial' }) && opIn(t.state, new Set<String> { 'ontario', 'on' }) && opStart(t.zipCode, new Set<String> { 'l', 'n', 'p', 'k0', 'k2', 'k3', 'k4', 'k5', 'k6', 'k7', 'k8', 'k9' }))      return 'a304u000002pkyaAAA'; //Patch CSR Ontario - GEO Based
    if(opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }) && opIn(t.state, new Set<String> { 'oregon', 'or', 'alaska', 'ak' }) && opIn(t.custom1, new Set<String> { 'commercial' }))      return 'a304u000002pkybAAA'; //Patch CSR OR/AK - GEO Based
    if(opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }) && opIn(t.custom1, new Set<String> { 'commercial' }) && opIn(t.state, new Set<String> { 'pa', 'pennsylvania' }) && opZipcode(t.zipCode, '17022,17501~17509,17512,17516~17522,17527~17529,17532~17538,17540,17543,17545,17547,17549~17552,17554~17555,17557,17560,17562~17570,17572~17573,17575~17576,17578~17585,17601~17608,17611,17622,17699,18011,18025,18031~18032,18034,18036~18037,18039,18041,18046,18049,18051~18054,18056,18059~18060,18062,18065~18066,18068~18070,18073~18074,18076~18081,18084,18087,18092,18098~18099,18101~18106,18109,18195,18901~18902,18910~18918,18920~18925,18927~18936,18938,18940,18942~18944,18946~18947,18949~18951,18953~18958,18960,18962~18964,18966,18968~18972,18974,18976~18977,18979~18981,18991,19001~19004,19006~19010,19012~19023,19025~19041,19043~19044,19046~19050,19052~19058,19060~19061,19063~19067,19070,19072~19076,19078~19083,19085~19096,19098~19099,19101~19116,19118~19155,19160~19162,19170~19173,19175~19179,19181~19185,19187~19188,19190~19197,19244,19255,19301,19310~19312,19316~19320,19330~19331,19333,19335,19339~19348,19350~19355,19357~19358,19360,19362~19363,19365~19367,19369,19371~19376,19380~19383,19390,19395,19397~19399,19401,19403~19409,19415,19421~19426,19428~19430,19432,19435~19438,19440~19444,19446,19450~19451,19453~19457,19460,19462,19464~19465,19468,19470,19472~19475,19477~19478,19480~19482,19484,19486,19490,19492~19496,19501,19503~19508,19510~19512,19516,19518~19520,19522~19523,19525~19526,19529~19530,19533~19536,19538~19541,19543~19545,19547~19548,19550~19551,19554~19555,19559~19560,19562,19564~19565,19567,19601~19612'))      return 'a304u000002pkycAAA'; //Patch CSR PA East - GEO Based
    if(opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }) && opIn(t.custom1, new Set<String> { 'commercial' }) && opIn(t.state, new Set<String> { 'pa', 'pennsylvania' }) && opZipcode(t.zipCode, '15001,15003~15007,15009~15010,15012,15014~15015,15017~15022,15024~15028,15030~15035,15037~15038,15042~15047,15049~15057,15059~15069,15071~15072,15074~15078,15081~15091,15095~15096,15101~15102,15104,15106,15108,15110,15112,15116,15120,15122~15123,15126~15127,15129,15131~15137,15139~15140,15142~15148,15201~15244,15250~15255,15257~15262,15264~15265,15267~15268,15270,15272,15274~15279,15281~15283,15286,15289~15290,15295,15301,15310~15317,15320~15325,15327,15329~15334,15336~15342,15344~15353,15357~15368,15370,15376~15380,15401,15410~15413,15415~15417,15419~15425,15427~15440,15442~15451,15454~15456,15458~15470,15472~15480,15482~15486,15488~15490,15492,15501~15502,15510,15520~15522,15530~15542,15544~15555,15557~15565,15601,15605~15606,15610~15613,15615~15629,15631~15642,15644,15646~15647,15650,15655~15656,15658,15660~15666,15668,15670~15693,15695~15698,15701,15705,15710~15717,15720~15725,15727~15734,15736~15739,15741~15742,15744~15748,15750,15752~15754,15756~15765,15767,15770~15781,15783~15784,15801,15821~15825,15827~15829,15831~15832,15834,15840~15841,15845~15849,15851,15853,15856~15857,15860~15861,15863~15866,15868,15870,15901~15902,15904~15907,15909,15915,15920~15931,15934~15938,15940,15942~15946,15948~15949,15951~15963,16001~16003,16016~16018,16020~16025,16027~16030,16033~16041,16045~16046,16048~16059,16061,16063,16066,16101~16103,16105,16107~16108,16110~16117,16120~16121,16123~16125,16127,16130~16134,16136~16137,16140~16143,16145~16146,16148,16150~16151,16153~16157,16159~16161,16172,16201,16210~16214,16217~16218,16220~16226,16228~16230,16232~16236,16238~16240,16242,16244~16246,16248~16250,16253~16263,16301,16311~16314,16316~16317,16319,16321~16323,16326~16329,16331~16335,16340~16347,16350~16354,16360~16362,16364~16375,16388,16401~16407,16410~16413,16415~16417,16420~16424,16426~16428,16430,16432~16436,16438,16440~16444,16475,16501~16512,16514~16515,16522,16530~16531,16534,16538,16541,16544,16546,16550,16553,16563,16565,16601~16603,16611,16613,16616~16617,16619~16625,16627,16629~16631,16633~16641,16644~16648,16650~16652,16654~16657,16659~16675,16677~16686,16689,16691~16695,16698~16699,16701,16720,16724~16735,16738,16740,16743~16746,16748~16750,16801~16805,16820~16823,16825~16830,16832~16841,16843~16845,16847~16856,16858~16861,16863~16866,16868,16870~16879,16881~16882,16901,16910~16912,16914~16915,16917,16920~16923,16925~16930,16932~16933,16935~16943,16945~16948,16950,17001~17007,17009~17021,17023~17030,17032~17078,17080~17090,17093~17094,17097~17099,17101~17113,17120~17130,17140,17177,17201~17202,17210~17215,17217,17219~17225,17228~17229,17231~17233,17235~17241,17243~17244,17246~17247,17249~17257,17260~17268,17271~17272,17301~17304,17306~17307,17309~17325,17327,17329,17331~17335,17337,17339~17340,17342~17345,17347,17349~17350,17352~17356,17358,17360~17366,17368,17370~17372,17375,17401~17408,17701~17703,17705,17720~17721,17723~17724,17726~17731,17735,17737,17739~17740,17742,17744~17745,17747~17752,17754,17756,17758,17760,17762~17765,17768~17769,17771~17772,17774,17776~17779,17801,17810,17812~17815,17820~17824,17827,17829~17837,17840~17847,17850~17851,17853,17855~17862,17864~17868,17870,17872,17876~17878,17880~17889,17901,17920~17923,17925,17929~17936,17938,17941,17943~17946,17948~17949,17951~17954,17957,17959~17961,17963~17968,17970,17972,17974,17976,17978~17983,17985,18001~18003,18012~18018,18020,18030,18035,18038,18040,18042~18045,18055,18058,18063~18064,18067,18071~18072,18083,18085~18086,18088,18091,18201~18202,18210~18212,18214,18216,18218~18225,18229~18232,18234~18235,18237,18239~18242,18244~18252,18254~18256,18301~18302,18320~18328,18330~18337,18340~18344,18346~18357,18360,18370~18372,18403,18405,18407,18410~18411,18413~18417,18419~18421,18424~18428,18430~18431,18433~18441,18443~18449,18451~18466,18469~18473,18501~18505,18507~18510,18512,18515,18517~18519,18540,18577,18601~18603,18610~18612,18614~18619,18621~18632,18634~18636,18640~18644,18651,18653~18657,18660~18661,18690,18701~18711,18762,18764~18767,18769,18773,18801,18810,18812~18818,18820~18834,18837,18840,18842~18848,18850~18851,18853~18854,19549'))      return 'a304u000002pkydAAA'; //Patch CSR PA West - GEO Based
    if(opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }) && opIn(t.custom1, new Set<String> { 'commercial' }) && opIn(t.state, new Set<String> { 'ca', 'california' }) && opZipcode(t.zipCode, '91901~91903,91905~91906,91908~91917,91921,91931~91935,91941~91946,91948,91950~91951,91962~91963,91976~91980,91987,92003~92004,92007~92011,92013~92014,92018~92030,92033,92036~92040,92046,92049,92051~92052,92054~92061,92064~92072,92074~92075,92078~92079,92081~92086,92088,92091~92093,92096,92101~92124,92126~92132,92134~92140,92142~92143,92145,92147,92149~92150,92152~92155,92158~92161,92163,92165~92179,92182,92186~92187,92191~92193,92195~92199'))      return 'a304u000002pkyeAAA'; //Patch CSR San Diego - GEO Based
    if(opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }) && opIn(t.custom1, new Set<String> { 'commercial' }) && opIn(t.state, new Set<String> { 'ca', 'california' }) && opZipcode(t.zipCode, '94101~94112,94114~94127,94129~94147,94150~94172,94175,94177,94188,94199'))      return 'a304u000002pkyfAAA'; //Patch CSR San Francisco - GEO Based
    if((opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }) && opIn(t.custom1, new Set<String> { 'commercial' }) && opIn(t.state, new Set<String> { 'south carolina', 'sc' }) && opStart(t.zipCode, new Set<String> { '29001', '29002', '29009', '29010', '29014', '29015', '29016', '29020', '29021', '29030', '29031', '29032', '29033', '29036', '29040', '29041', '29044', '29045', '29046', '29047', '29048', '29051', '29052', '29055', '29056', '29058', '29059', '29061', '29062', '29063', '29065', '29067', '29069', '29074', '29075', '29078', '29079', '29080', '29101', '29102', '29104', '29111', '29114', '29122', '29125', '29126', '29128', '29130', '29132', '29135', '29142', '29143', '29147', '29148', '29150', '29151', '29152', '29153', '29154', '29161', '29162', '29163', '29168', '29169', '29170', '29171', '29172', '29175', '29177', '29178', '29180', '29201', '29202', '29203', '29204', '29205', '29206', '29207', '29208', '29209', '29210', '29211', '29212', '29214', '29215', '29216', '29217', '29218', '29219', '29220', '29221', '29222', '29223', '29224', '29225', '29226', '29227', '29228', '29229', '29230', '29240', '29250', '29260', '29290', '29292', '29301', '29302', '29303', '29304', '29305', '29306', '29307', '29316', '29319', '29320', '29321', '29322', '29323', '29324', '29329', '29330', '29333', '29334', '29336', '29338', '29340', '29341', '29342', '29346', '29348', '29349', '29353', '29356', '29364', '29365', '29368', '29369', '29372', '29373', '29374', '29375', '29376', '29377', '29378', '29379', '29385', '29386', '29395', '29410', '29419', '29429', '29431', '29434', '29436', '29440', '29442', '29445', '29448', '29450', '29453', '29458', '29461', '29466', '29468', '29469', '29476', '29479', '29486', '29501', '29502', '29503', '29504', '29505', '29506', '29510', '29511', '29512', '29516', '29518', '29519', '29520', '29525', '29526', '29527', '29528', '29530', '29532', '29536', '29540', '29541', '29543', '29544', '29545', '29546', '29547', '29550', '29551', '29554', '29555', '29556', '29560', '29563', '29564', '29565', '29566', '29567', '29568', '29569', '29570', '29571', '29572', '29574', '29575', '29576', '29577', '29578', '29579', '29580', '29581', '29582', '29583', '29584', '29585', '29587', '29588', '29589', '29590', '29591', '29592', '29593', '29594', '29596', '29597', '29598', '29702', '29703', '29704', '29706', '29707', '29708', '29709', '29710', '29712', '29714', '29715', '29716', '29717', '29718', '29720', '29721', '29722', '29724', '29726', '29727', '29728', '29729', '29730', '29731', '29732', '29733', '29734', '29741', '29742', '29743', '29744', '29745' })) || (opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }) && opIn(t.custom1, new Set<String> { 'commercial' }) && opIn(t.state, new Set<String> { 'nc', 'north carolina' }) && opStart(t.zipCode, new Set<String> { '28012', '28025', '28026', '28027', '28032', '28054', '28056', '28070', '28075', '28078', '28079', '28098', '28101', '28103', '28104', '28105', '28106', '28107', '28108', '28110', '28111', '28112', '28120', '28126', '28130', '28133', '28134', '28173', '28174', '28201', '28202', '28203', '28204', '28205', '28206', '28207', '28208', '28209', '28210', '28211', '28212', '28213', '28214', '28215', '28216', '28217', '28218', '28219', '28220', '28221', '28222', '28223', '28224', '28226', '28227', '28228', '28229', '28230', '28231', '28232', '28233', '28234', '28235', '28236', '28237', '28241', '28242', '28243', '28244', '28246', '28247', '28250', '28253', '28254', '28255', '28256', '28258', '28260', '28262', '28263', '28265', '28266', '28269', '28270', '28271', '28272', '28273', '28274', '28275', '28277', '28278', '28280', '28281', '28282', '28284', '28285', '28287', '28288', '28289', '28290', '28296', '28297', '28299' })))      return 'a304u000002pkygAAA'; //Patch CSR SC/Charlotte - GEO Based
    if((opIn(t.country, new Set<String> { 'gb', 'gbr', 'united kingdom', 'uk', 'great britain', 'england' }) && opIn(t.custom1, new Set<String> { 'smb', 'commercial' }) && opStart(t.zipCode, new Set<String> { 'cf', 'np', 'sa', 'eh', 'ab', 'g2', 'ph', 'ka', 'pa', 'dd', 'g3', 'g7', 'ml', 'ky', 'fk', 'g5', 'g6', 'iv', 'kw', 'td', 'c2', 'g1', 'g4', 'c1', 'g8', 'gx', 'ld' })) || (opIn(t.country, new Set<String> { 'scotland', 'wales', 'wal', 'sct' }) && opIn(t.custom1, new Set<String> { 'smb', 'commercial' })))      return 'a304u000002pkyhAAA'; //Patch CSR Scotland/Wales - GEO Based
    if((opStart(t.company, new Set<String> { 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9' }) && opIn(t.country, new Set<String> { 'sg', 'sgp', 'singapore' }) && opIn(t.custom1, new Set<String> { 'commercial' })) || (opIn(t.country, new Set<String> { 'my', 'mys', 'malaysia' }) && opIn(t.custom1, new Set<String> { 'commercial' })) || (opIn(t.country, new Set<String> { 'id', 'idn', 'indonesia' }) && opIn(t.custom1, new Set<String> { 'commercial' })))      return 'a304u000002pkyiAAA'; //Patch CSR SEA 1 (SG+MY) - GEO Based
    if((opStart(t.company, new Set<String> { 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z' }) && opIn(t.country, new Set<String> { 'sg', 'sgp', 'singapore' }) && opIn(t.custom1, new Set<String> { 'commercial' })) || (opIn(t.country, new Set<String> { 'ph', 'phl', 'philippines' }) && opIn(t.custom1, new Set<String> { 'commercial' })))      return 'a304u000002pkyjAAA'; //Patch CSR SEA 2 (SG+PH) - GEO Based
    if(opIn(t.country, new Set<String> { 'au', 'aus', 'australia' }) && opIn(t.state, new Set<String> { 'new south wales', 'nsw', 'newsouthwales', 'n s w', 'australian capital territory', 'act', 'western australia', 'wa', 'queensland', 'qld', 'northern territory', 'melbourne' }) && opIn(t.custom1, new Set<String> { 'smb' }))      return 'a304u000002pkykAAA'; //Patch CSR SMB ANZ North - GEO Based
    if((opIn(t.country, new Set<String> { 'au', 'aus', 'australia' }) && opIn(t.custom1, new Set<String> { 'smb' }) && opIn(t.state, new Set<String> { 'victoria', 'vic', 'south australia', 'sa', 'tasmania', 'tas' })) || (opIn(t.country, new Set<String> { 'new caledonia', 'new caledonia (french)', 'nc', 'ncl', 'micronesia', 'papua new guinea', 'vanuatu', 'vanautu', 'tuvalu', 'solomon islands', 'kiribati', 'nz', 'nzl', 'new zealand', 'fiji', 'fiji islands', 'fji', 'fji. fji', 'cook islands', 'cok', 'guam' }) && opIn(t.custom1, new Set<String> { 'smb' })))      return 'a304u000002pkylAAA'; //Patch CSR SMB ANZ South - GEO Based
    if(opIn(t.country, new Set<String> { 'hk', 'hkg', 'hong kong', 'china', 'taiwan', 'province of china', 'tw', 'twn', 'macau', 'macao' }) && opIn(t.custom1, new Set<String> { 'smb' }))      return 'a304u000002pkymAAA'; //Patch CSR SMB ASEAN GCR - GEO Based
    if(opIn(t.country, new Set<String> { 'sg', 'sgp', 'singapore', 'my', 'mys', 'malaysia', 'ph', 'phl', 'philippines' }) && opIn(t.custom1, new Set<String> { 'smb' }))      return 'a304u000002pkynAAA'; //Patch CSR SMB ASEAN SEA - GEO Based
    if(opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }) && opIn(t.custom1, new Set<String> { 'smb' }) && opIn(t.state, new Set<String> { 'ca', 'california' }) && opZipcode(t.zipCode, '92328,92384,92389,93201~93202,93204,93207~93208,93210,93212,93218~93219,93221,93223,93227,93230,93232,93234~93235,93237,93239,93242,93244~93247,93256~93258,93260~93262,93265~93267,93270~93272,93274~93275,93277~93279,93282,93286,93290~93292,93426,93450,93512~93515,93517,93522,93526,93529~93530,93541~93542,93545~93546,93549,93601~93616,93618~93628,93630~93631,93633~93654,93656~93657,93660~93662,93664~93670,93673,93675,93701~93712,93714~93718,93720~93730,93740~93741,93744~93745,93747,93750,93755,93760~93761,93764~93765,93771~93780,93784,93786,93790~93794,93844,93888,93901~93902,93905~93908,93912,93915,93920~93928,93930,93932~93933,93940,93942~93944,93950,93953~93955,93960,93962,94002,94005,94010~94011,94013~94028,94030,94035,94037~94044,94060~94066,94070,94074,94080,94083,94085~94089,94096,94098,94101~94112,94114~94147,94150~94172,94175,94177,94188,94199,94203~94209,94211,94229~94230,94232,94234~94237,94239~94240,94244~94250,94252,94254,94256~94259,94261~94263,94267~94269,94271,94273~94274,94277~94280,94282~94291,94293~94299,94301~94306,94309,94401~94404,94497,94501~94503,94506~94531,94533~94553,94555~94583,94585~94592,94595~94599,94601~94615,94617~94625,94649,94659~94662,94666,94701~94710,94712,94720,94801~94808,94820,94850,94901,94903~94904,94912~94915,94920,94922~94931,94933,94937~94942,94945~94957,94960,94963~94966,94970~94979,94998~94999,95001~95015,95017~95021,95023~95024,95026,95030~95033,95035~95039,95041~95046,95050~95056,95060~95067,95070~95071,95073,95075~95077,95101,95103,95106,95108~95113,95115~95136,95138~95141,95148,95150~95161,95164,95170,95172~95173,95190~95194,95196,95201~95213,95215,95219~95234,95236~95237,95240~95242,95245~95255,95257~95258,95267,95269,95296~95297,95301,95303~95307,95309~95330,95333~95338,95340~95341,95343~95348,95350~95358,95360~95361,95363~95370,95372~95383,95385~95389,95391,95397,95401~95410,95412,95415~95433,95435~95437,95439,95441~95446,95448~95454,95456~95473,95476,95480~95482,95485~95488,95490,95492~95494,95497,95501~95503,95511,95514,95518~95519,95521,95524~95528,95531~95532,95534,95536~95538,95540,95542~95543,95545~95556,95558~95560,95562~95565,95567~95571,95573,95585,95587,95589,95595,95601~95621,95623~95642,95644~95646,95648,95650~95656,95658~95699,95701,95703,95709,95712~95715,95717,95720~95722,95724,95726,95728,95735~95736,95741~95742,95746~95747,95757~95759,95762~95763,95765,95776,95798~95799,95811~95838,95840~95843,95851~95853,95860,95864~95867,95887,95894,95899,95901,95903,95910,95912~95920,95922~95930,95932,95934~95951,95953~95963,95965~95984,95986~95988,95991~95993,96001~96003,96006~96011,96013~96017,96019~96025,96027~96029,96031~96035,96037~96041,96044,96046~96052,96054~96059,96061~96065,96067~96071,96073~96076,96078~96080,96084~96097,96099,96101,96103~96130,96132~96137,96140~96143,96145~96146,96148,96150~96152,96154~96158,96160~96162'))      return 'a304u000002pkyoAAA'; //Patch CSR SMB CA North - GEO Based
    if(opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }) && opIn(t.custom1, new Set<String> { 'smb' }) && opIn(t.state, new Set<String> { 'ca', 'california' }) && opZipcode(t.zipCode, '90001~90084,90086~90091,90093~90096,90099,90134,90189,90201~90202,90209~90213,90220~90224,90230~90233,90239~90242,90245,90247~90251,90254~90255,90260~90267,90270,90272,90274~90275,90277~90278,90280,90290~90296,90301~90312,90401~90411,90501~90510,90601~90610,90620~90624,90630~90633,90637~90640,90650~90652,90660~90662,90670~90671,90680,90701~90704,90706~90707,90710~90717,90720~90721,90723,90731~90734,90740,90742~90749,90755,90801~90810,90813~90815,90822,90831~90835,90840,90842,90844,90846~90848,90853,90895,90899,91001,91003,91006~91012,91016~91017,91020~91021,91023~91025,91030~91031,91040~91043,91046,91066,91077,91101~91110,91114~91118,91121,91123~91126,91129,91182,91184~91185,91188~91189,91199,91201~91210,91214,91221~91222,91224~91226,91301~91311,91313,91316,91319~91322,91324~91331,91333~91335,91337,91340~91346,91350~91362,91364~91365,91367,91371~91372,91376~91377,91380~91387,91390,91392~91396,91401~91413,91416,91423,91426,91436,91470,91482,91495~91496,91499,91501~91508,91510,91521~91523,91526,91601~91612,91614~91618,91701~91702,91706,91708~91711,91714~91716,91722~91724,91729~91735,91737,91739~91741,91743~91750,91752,91754~91756,91758~91759,91761~91773,91775~91776,91778,91780,91784~91786,91788~91793,91801~91804,91896,91899,91901~91903,91905~91906,91908~91917,91921,91931~91935,91941~91946,91948,91950~91951,91962~91963,91976~91980,91987,92003~92004,92007~92011,92013~92014,92018~92030,92033,92036~92040,92046,92049,92051~92052,92054~92061,92064~92072,92074~92075,92078~92079,92081~92086,92088,92091~92093,92096,92101~92124,92126~92132,92134~92140,92142~92143,92145,92147,92149~92150,92152~92155,92158~92161,92163,92165~92179,92182,92186~92187,92191~92193,92195~92199,92201~92203,92210~92211,92220,92222~92223,92225~92227,92230~92236,92239~92244,92247~92264,92266~92268,92270,92273~92278,92280~92286,92301,92304~92305,92307~92318,92320~92325,92327,92329,92331~92342,92344~92347,92350,92352,92354,92356~92359,92363~92366,92368~92369,92371~92378,92382,92385~92386,92391~92395,92397~92399,92401~92408,92410~92411,92413,92415,92418,92423,92427,92501~92509,92513~92514,92516~92519,92521~92522,92530~92532,92536,92539,92543~92546,92548~92549,92551~92557,92561~92564,92567,92570~92572,92581~92587,92589~92593,92595~92596,92599,92602~92607,92609~92610,92612,92614~92620,92623~92630,92637,92646~92663,92672~92679,92683~92685,92688,92690~92694,92697~92698,92701~92708,92711~92712,92728,92735,92780~92782,92799,92801~92809,92811~92812,92814~92817,92821~92823,92825,92831~92838,92840~92846,92850,92856~92857,92859~92871,92877~92883,92885~92887,92899,93001~93007,93009~93016,93020~93024,93030~93036,93040~93044,93060~93067,93094,93099,93101~93103,93105~93111,93116~93118,93120~93121,93130,93140,93150,93160,93190,93199,93203,93205~93206,93215~93216,93220,93222,93224~93226,93238,93240~93241,93243,93249~93252,93254~93255,93263,93268,93276,93280,93283,93285,93287,93301~93309,93311~93314,93380,93383~93390,93401~93403,93405~93410,93412,93420~93424,93427~93430,93432~93438,93440~93449,93451~93458,93460~93461,93463~93465,93475,93483,93501~93502,93504~93505,93510,93516,93518~93519,93523~93524,93527~93528,93531~93532,93534~93536,93539,93543~93544,93550~93556,93558,93560~93563,93581,93584,93586,93590~93592,93596,93599'))      return 'a304u000002pkypAAA'; //Patch CSR SMB CA South - GEO Based
    if((opIn(t.country, new Set<String> { 'ca', 'canada' }) && opIn(t.custom1, new Set<String> { 'smb' }) && opIn(t.state, new Set<String> { 'nb', 'new brunswick', 'nl', 'newfoundland and labrador', 'ns', 'nova scotia', 'pe', 'prince edward island', 'qc', 'quebec' })) || (opIn(t.country, new Set<String> { 'ca', 'canada' }) && opIn(t.custom1, new Set<String> { 'smb' }) && opIn(t.state, new Set<String> { 'ontario', 'on' }) && opStart(t.zipCode, new Set<String> { 'm', 'k1', 'k2' })))      return 'a304u000002pkyqAAA'; //Patch CSR SMB Canada East - GEO Based
    if((opIn(t.country, new Set<String> { 'ca', 'canada' }) && opIn(t.custom1, new Set<String> { 'smb' }) && opIn(t.state, new Set<String> { 'ab', 'alberta', 'bc', 'british columbia', 'mb', 'manitoba', 'nu', 'nunavut', 'sk', 'saskatchewan', 'yt', 'yukon', 'nt', 'northwest territories' })) || (opIn(t.country, new Set<String> { 'ca', 'canada' }) && opIn(t.custom1, new Set<String> { 'smb' }) && opIn(t.state, new Set<String> { 'ontario', 'on' }) && opStart(t.zipCode, new Set<String> { 'l', 'n', 'p', 'ko', 'k3', 'k4', 'k5', 'k6', 'k7', 'k8', 'k9' })))      return 'a304u000002iDOSAA2'; //Patch CSR SMB Canada West - GEO Based
    return null;
  }
  private Id matchGroup2(PatchDataModel.MatchTarget t)
  {
    if(opIn(t.country, new Set<String> { 'de', 'deu', 'germany', 'deutschland' }) && opStart(t.zipCode, new Set<String> { '0', '1', '2', '3' }) && opIn(t.custom1, new Set<String> { 'smb' }))      return 'a304u000002pkyrAAA'; //Patch CSR SMB DE North/East + - GEO Based
    if(opIn(t.country, new Set<String> { 'de', 'deu', 'germany', 'deutschland' }) && opStart(t.zipCode, new Set<String> { '4', '5', '6', '7', '8', '9' }) && opIn(t.custom1, new Set<String> { 'smb' }))      return 'a304u000002pkysAAA'; //Patch CSR SMB DE South/West + - GEO Based
    if(opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }) && opIn(t.state, new Set<String> { 'de', 'delaware', 'va', 'virginia', 'west virginia', 'wv', 'md', 'maryland', 'dc', 'dist of columbia', 'district of columbia' }) && opIn(t.custom1, new Set<String> { 'smb' }))      return 'a304u000002pkytAAA'; //Patch CSR SMB East - GEO Based
    if(opIn(t.country, new Set<String> { 'austria', 'md', 'moldova', 'moldavia', 'al', 'alb', 'albania', 'am', 'arm', 'armenia', 'az', 'aze', 'azerbaijan', 'by', 'blr', 'belarus', 'ba', 'bih', 'bosnia and herzegowina', 'bosnia and herzegovina', 'bg', 'bgr', 'bulgaria', 'hr', 'hrv', 'croatia', 'hrvatska', 'cz', 'cze', 'czech republic', 'ee', 'est', 'estonia', 'ge', 'geo', 'georgia', 'hu', 'hun', 'hungary', 'hungaria', 'pl', 'pol', 'poland', 'ro', 'rom', 'romania', 'ru', 'rus', 'russian federation', 'russia', 'rs', 'srb', 'serbia', 'sk', 'svk', 'slovakia', 'slovak republic', 'si', 'svn', 'slovenia', 'ua', 'ukr', 'ukraine', 'kz', 'kaz', 'kazakhstan', 'lv', 'lva', 'latvia', 'li', 'lie', 'liechtenstein', 'lt', 'ltu', 'lithuania', 'mk', 'mkd', 'macedonia', 'republic of macedonia', 'montenegro', 'turkmenistan', 'balkans', 'moscow', 'uzbekistan', 'kosovo', 'republic of kosovo', 'tajikistan', 'kyrgyzstan', 'krygystan', 'kgz', 'turkey', 'republic of turkey' }) && opIn(t.custom1, new Set<String> { 'smb' }))      return 'a304u000002pkyuAAA'; //Patch CSR SMB Eastern Europe - GEO Based
    if(opIn(t.country, new Set<String> { 'gb', 'gbr', 'united kingdom', 'uk', 'great britain', 'england' }) && opStart(t.zipCode, new Set<String> { 'ab', 'bb', 'bd', 'bl', 'bt', 'ca', 'ch', 'cw', 'dd', 'de', 'dg', 'dh', 'dl', 'dn', 'eh', 'fk', 'fy', 'g1', 'g2', 'g3', 'g4', 'g5', 'g6', 'g7', 'g8', 'g9', 'hd', 'hg', 'hu', 'hx', 'im', 'iv', 'ka', 'ky', 'l1', 'l2', 'l3', 'l4', 'l5', 'l6', 'l7', 'l8', 'l9', 'la', 'ls', 'm1', 'm2', 'm3', 'm4', 'm5', 'm6', 'm7', 'm8', 'm9', 'ml', 'ne', 'ol', 'pa', 'ph', 'pr', 's1', 's2', 's3', 's4', 's5', 's6', 's7', 's8', 's9', 'sk', 'sr', 'st', 'td', 'ts', 'wa', 'wf', 'wn', 'yo', 'e2', 'e3', 'e4', 'e7', 'e8', 'e9', 'al', 'b1', 'b2', 'b3', 'b4', 'b5', 'b6', 'b7', 'b8', 'b9', 'cb', 'cf', 'cm', 'co', 'cv', 'dy', 'en', 'gl', 'ha', 'hp', 'hr', 'ig', 'ip', 'll', 'lu', 'le', 'ng', 'sn', 'ln', 'mk', 'nn', 'np', 'nr', 'ox', 'pe', 'rm', 'sa', 'sg', 'ss', 'sy', 'tf', 'wd', 'wr', 'ws', 'wv', 'n2', 'n5', 'n6', 'n7', 'n8', 'sm', 'w7', 'ba', 'bh', 'bn', 'br', 'bs', 'cr', 'ct', 'da', 'dt', 'ex', 'gu', 'gy', 'je', 'kt', 'me', 'pl', 'po', 'rg', 'rh', 'sl', 'so', 'sp', 'ta', 'tn', 'tq', 'tr', 'tw', 'ub' }) && opIn(t.custom1, new Set<String> { 'smb' }))      return 'a304u000002pkyvAAA'; //Patch CSR SMB England - GEO Based
    if(opIn(t.country, new Set<String> { 'fr', 'fra', 'france', '' }) && opStart(t.zipCode, new Set<String> { '75', '02', '59', '60', '62', '80', '08', '10', '51', '52', '54', '55', '57', '67', '68', '88', '21', '25', '39', '58', '71', '89', '90', '18', '28', '36', '37', '41', '45', '44', '49', '53', '72', '85', '22', '29', '35', '56', '14', '27', '50', '61', '76', '97', '98' }) && opIn(t.custom1, new Set<String> { 'smb' }))      return 'a304u000002pkywAAA'; //Patch CSR SMB France North - GEO Based
    if((opIn(t.country, new Set<String> { 'fr', 'fra', 'france', '' }) && opIn(t.custom1, new Set<String> { 'smb' }) && opStart(t.zipCode, new Set<String> { '77', '78', '91', '92', '93', '94', '01', '03', '07', '15', '26', '38', '42', '43', '63', '69', '73', '74', '04', '05', '06', '13', '83', '84', '09', '11', '12', '30', '31', '32', '34', '46', '48', '65', '66', '81', '82', '16', '17', '19', '23', '24', '33', '40', '47', '64', '79', '86', '87', '95' })) || (opIn(t.country, new Set<String> { 'san marino', 'san marino holy see', 'mt', 'malta', 'mc', 'mco', 'monaco', 'gr', 'grc', 'greece', 'pyf', 'cy', 'cyp', 'cyprus', 'french polynesia', 'pf' }) && opIn(t.custom1, new Set<String> { 'smb' })))      return 'a304u000002pkyxAAA'; //Patch CSR SMB France South - GEO Based
    if(opIn(t.country, new Set<String> { 'es', 'esp', 'spain', 'pt', 'prt', 'portugal', 'gibraltar', 'gibraltor', 'andorra', 'principality of andorra', 'ad', 'it', 'ita', 'italy', 'italia' }) && opIn(t.custom1, new Set<String> { 'smb' }))      return 'a304u000002pkyyAAA'; //Patch CSR SMB Iberia/Italy - GEO Based
    if(opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }) && opIn(t.state, new Set<String> { 'il', 'illinois' }) && opIn(t.custom1, new Set<String> { 'smb' }))      return 'a304u000002pkyzAAA'; //Patch CSR SMB IL - GEO Based
    if((opIn(t.country, new Set<String> { 'jp', 'jpn', 'japan' }) && opIn(t.custom1, new Set<String> { 'smb' }) && opIn(t.state, new Set<String> { 'akita', 'aomori', 'fukushima', 'hokkaido', 'ibaraki', 'iwate', 'miyagi', 'saitama', 'tochigi', 'yamagata', 'ehime', 'fukuoka', 'hiroshima', 'kagawa', 'kagoshima', 'kōchi', 'kumamoto', 'miyazaki', 'nagasaki', 'ōita', 'okayama', 'okinawa', 'saga', 'shimane', 'tokushima', 'tottori', 'yamaguchi' })) || (opIn(t.country, new Set<String> { 'jp', 'jpn', 'japan' }) && opIn(t.custom1, new Set<String> { 'smb' }) && opStart(t.zipCode, new Set<String> { '100', '101', '102', '106', '107', '108', '109', '110', '111', '112', '113', '114', '115', '116', '117', '118', '119', '120', '121', '122', '123', '124', '125', '126', '127', '128', '129', '130', '131', '132', '133', '134', '135', '136', '137', '138', '139', '140', '141', '142', '143', '144', '145', '146', '147', '148', '149' })))      return 'a304u000002pkz2AAA'; //Patch CSR SMB Japan 1 - GEO Based
    if((opIn(t.country, new Set<String> { 'jp', 'jpn', 'japan' }) && opIn(t.custom1, new Set<String> { 'smb' }) && opIn(t.state, new Set<String> { 'aichi', 'fukui', 'gifu', 'ishikawa', 'kanagawa', 'nagano', 'niigata', 'shizuoka', 'toyama', 'yamanashi', 'chiba', 'gunma', 'hyōgo', 'kyoto', 'mie', 'nara', 'osaka', 'shiga', 'wakayama' })) || (opIn(t.country, new Set<String> { 'jp', 'jpn', 'japan' }) && opIn(t.custom1, new Set<String> { 'smb' }) && opStart(t.zipCode, new Set<String> { '103', '104', '105', '000', '001', '002', '003', '004', '005', '006', '007', '008', '009', '010', '011', '012', '013', '014', '015', '016', '017', '018', '019', '020', '021', '022', '023', '024', '025', '026', '027', '028', '029', '030', '031', '032', '033', '034', '035', '036', '037', '038', '039', '040', '041', '042', '043', '044', '045', '046', '047', '048', '049', '050', '051', '052', '053', '054', '055', '056', '057', '058', '059', '060', '061', '062', '063', '064', '065', '066', '067', '068', '069', '070', '071', '072', '073', '074', '075', '076', '077', '078', '079', '080', '081', '082', '083', '084', '085', '086', '087', '088', '089', '090', '091', '092', '093', '094', '095', '096', '097', '098', '099', '150', '151', '152', '153', '154', '155', '156', '157', '158', '159', '160', '161', '162', '163', '164', '165', '166', '167', '168', '169', '170', '171', '172', '173', '174', '175', '176', '177', '178', '179', '180', '181', '182', '183', '184', '185', '186', '187', '188', '189', '190', '191', '192', '193', '194', '195', '196', '197', '198', '199', '200', '201', '202', '203', '204', '205', '206', '207', '208', '209', '210', '211', '212', '213', '214', '215', '216', '217', '218', '219', '220', '221', '222', '223', '224', '225', '226', '227', '228', '229', '230', '231', '232', '233', '234', '235', '236', '237', '238', '239', '240', '241', '242', '243', '244', '245', '246', '247', '248', '249', '250', '251', '252', '253', '254', '255', '256', '257', '258', '259', '260', '261', '262', '263', '264', '265', '266', '267', '268', '269', '270', '271', '272', '273', '274', '275', '276', '277', '278', '279', '280', '281', '282', '283', '284', '285', '286', '287', '288', '289', '290', '291', '292', '293', '294', '295', '296', '297', '298', '299', '300', '301', '302', '303', '304', '305', '306', '307', '308', '309', '310', '311', '312', '313', '314', '315', '316', '317', '318', '319', '320', '321', '322', '323', '324', '325', '326', '327', '328', '329', '330', '331', '332', '333', '334', '335', '336', '337', '338', '339', '340', '341', '342', '343', '344', '345', '346', '347', '348', '349', '350', '351', '352', '353', '354', '355', '356', '357', '358', '359', '360', '361', '362', '363', '364', '365', '366', '367', '368', '369', '370', '371', '372', '373', '374', '375', '376', '377', '378', '379', '380', '381', '382', '383', '384', '385', '386', '387', '388', '389', '390', '391', '392', '393', '394', '395', '396', '397', '398', '399', '400', '401', '402', '403', '404', '405', '406', '407', '408', '409', '410', '411', '412', '413', '414', '415', '416', '417', '418', '419', '420', '421', '422', '423', '424', '425', '426', '427', '428', '429', '430', '431', '432', '433', '434', '435', '436', '437', '438', '439', '440', '441', '442', '443', '444', '445', '446', '447', '448', '449', '450', '451', '452', '453', '454', '455', '456', '457', '458', '459', '460', '461', '462', '463', '464', '465', '466', '467', '468', '469', '470', '471', '472', '473', '474', '475', '476', '477', '478', '479', '480', '481', '482', '483', '484', '485', '486', '487', '488', '489', '490', '491', '492', '493', '494', '495', '496', '497', '498', '499', '500', '501', '502', '503', '504', '505', '506', '507', '508', '509', '510', '511', '512', '513', '514', '515', '516', '517', '518', '519', '520', '521', '522', '523', '524', '525', '526', '527', '528', '529', '530', '531', '532', '533', '534', '535', '536', '537', '538', '539', '540', '541', '542', '543', '544', '545', '546', '547', '548', '549', '550', '551', '552', '553', '554', '555', '556', '557', '558', '559', '560', '561', '562', '563', '564', '565', '566', '567', '568', '569', '570', '571', '572', '573', '574', '575', '576', '577', '578', '579', '580', '581', '582', '583', '584', '585', '586', '587', '588', '589', '590', '591', '592', '593', '594', '595', '596', '597', '598', '599', '600', '601', '602', '603', '604', '605', '606', '607', '608', '609', '610', '611', '612', '613', '614', '615', '616', '617', '618', '619', '620', '621', '622', '623', '624', '625', '626', '627', '628', '629', '630', '631', '632', '633', '634', '635', '636', '637', '638', '639', '640', '641', '642', '643', '644', '645', '646', '647', '648', '649', '650', '651', '652', '653', '654', '655', '656', '657', '658', '659', '660', '661', '662', '663', '664', '665', '666', '667', '668', '669', '670', '671', '672', '673', '674', '675', '676', '677', '678', '679', '680', '681', '682', '683', '684', '685', '686', '687', '688', '689', '690', '691', '692', '693', '694', '695', '696', '697', '698', '699', '700', '701', '702', '703', '704', '705', '706', '707', '708', '709', '710', '711', '712', '713', '714', '715', '716', '717', '718', '719', '720', '721', '722', '723', '724', '725', '726', '727', '728', '729', '730', '731', '732', '733', '734', '735', '736', '737', '738', '739', '740', '741', '742', '743', '744', '745', '746', '747', '748', '749', '750', '751', '752', '753', '754', '755', '756', '757', '758', '759', '760', '761', '762', '763', '764', '765', '766', '767', '768', '769', '770', '771', '772', '773', '774', '775', '776', '777', '778', '779', '780', '781', '782', '783', '784', '785', '786', '787', '788', '789', '790', '791', '792', '793', '794', '795', '796', '797', '798', '799', '800', '801', '802', '803', '804', '805', '806', '807', '808', '809', '810', '811', '812', '813', '814', '815', '816', '817', '818', '819', '820', '821', '822', '823', '824', '825', '826', '827', '828', '829', '830', '831', '832', '833', '834', '835', '836', '837', '838', '839', '840', '841', '842', '843', '844', '845', '846', '847', '848', '849', '850', '851', '852', '853', '854', '855', '856', '857', '858', '859', '860', '861', '862', '863', '864', '865', '866', '867', '868', '869', '870', '871', '872', '873', '874', '875', '876', '877', '878', '879', '880', '881', '882', '883', '884', '885', '886', '887', '888', '889', '890', '891', '892', '893', '894', '895', '896', '897', '898', '899', '900', '901', '902', '903', '904', '905', '906', '907', '908', '909', '910', '911', '912', '913', '914', '915', '916', '917', '918', '919', '920', '921', '922', '923', '924', '925', '926', '927', '928', '929', '930', '931', '932', '933', '934', '935', '936', '937', '938', '939', '940', '941', '942', '943', '944', '945', '946', '947', '948', '949', '950', '951', '952', '953', '954', '955', '956', '957', '958', '959', '960', '961', '962', '963', '964', '965', '966', '967', '968', '969', '970', '971', '972', '973', '974', '975', '976', '977', '978', '979', '980', '981', '982', '983', '984', '985', '986', '987', '988', '989', '990', '991', '992', '993', '994', '995', '996', '997', '998', '999' })))      return 'a304u000002pkz3AAA'; //Patch CSR SMB Japan 2 - GEO Based
    if(opIn(t.country, new Set<String> { 'gb', 'gbr', 'united kingdom', 'uk', 'great britain', 'england' }) && opStart(t.zipCode, new Set<String> { 'sw', 'se', 'ec', 'e1', 'e5', 'e6' }) && opIn(t.custom1, new Set<String> { 'smb' }))      return 'a304u000002pkz4AAA'; //Patch CSR SMB London 1 - GEO Based
    if(opIn(t.country, new Set<String> { 'gb', 'gbr', 'united kingdom', 'uk', 'great britain', 'england' }) && opStart(t.zipCode, new Set<String> { 'w1', 'wc', 'nw', 'n1', 'w6', 'w2', 'n3', 'w8', 'w9', 'n4', 'n9', 'w3', 'w4', 'w5' }) && opIn(t.custom1, new Set<String> { 'smb' }))      return 'a304u000002pkz5AAA'; //Patch CSR SMB London 2 - GEO Based
    if(opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }) && opIn(t.state, new Set<String> { 'ma', 'massachusetts', 'ct', 'connecticut' }) && opIn(t.custom1, new Set<String> { 'smb' }))      return 'a304u000002pkz6AAA'; //Patch CSR SMB MA/CT - GEO Based
    if(opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }) && opIn(t.state, new Set<String> { 'wi', 'wisconsin', 'mi', 'michigan' }) && opIn(t.custom1, new Set<String> { 'smb' }))      return 'a304u000002pkz7AAA'; //Patch CSR SMB MI/WI - GEO Based
    if(opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }) && opIn(t.state, new Set<String> { 'nd', 'north dakota', 'sd', 'south dakota', 'mn', 'minnesota' }) && opIn(t.custom1, new Set<String> { 'smb' }))      return 'a304u000002pkz8AAA'; //Patch CSR SMB MN/Dakotas - GEO Based
    if(opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }) && opIn(t.state, new Set<String> { 'me', 'maine', 'vt', 'vermont', 'nh', 'new hampshire', 'ri', 'rhode island' }) && opIn(t.custom1, new Set<String> { 'smb' }))      return 'a304u000002pkz9AAA'; //Patch CSR SMB New England - GEO Based
    if((opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }) && opIn(t.state, new Set<String> { 'nj', 'new jersey' }) && opIn(t.custom1, new Set<String> { 'smb' })) || (opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }) && opIn(t.custom1, new Set<String> { 'smb' }) && opIn(t.state, new Set<String> { 'ny', 'new york' }) && opZipcode(t.zipCode, '10501~10507,10509~10512,10514,10516~10524,10526~10528,10530,10532~10533,10535~10538,10540~10543,10545~10553,10560,10562,10566~10567,10570,10573,10576~10580,10583,10587~10591,10594~10598,10601~10607,10610,10701~10710,10801~10805,10901,10910~10928,10930~10933,10940~10941,10949~10950,10952~10954,10956,10958~10960,10962~10965,10968~10970,10973~10977,10979~10990,10992~10994,10996~10998,12007~12010,12015~12020,12022~12025,12027~12029,12031~12033,12035~12037,12040~12043,12045~12047,12050~12078,12082~12087,12089~12090,12092~12095,12106~12108,12110,12115~12118,12120~12125,12128,12130~12134,12136~12141,12143~12144,12147~12151,12153~12161,12164~12170,12172~12177,12180~12190,12192~12198,12201~12212,12214,12220,12222~12250,12252,12255~12257,12260~12261,12288,12301~12309,12325,12345,12401~12402,12404~12407,12409~12414,12416~12424,12427~12436,12438~12444,12446,12448~12461,12463~12466,12468~12475,12477,12480~12487,12489~12496,12498,12501~12504,12506~12508,12510~12518,12520~12531,12533~12534,12537~12538,12540~12553,12555,12561,12563~12572,12574~12575,12577~12578,12580~12586,12588~12590,12592,12594,12601~12604,12701,12719~12727,12729,12732~12734,12736~12738,12740~12743,12745~12752,12754,12758~12760,12762~12771,12775~12781,12783~12792,12801,12803~12804,12808~12812,12814~12817,12819~12824,12827~12828,12831~12839,12841~12866,12870~12874,12878~12879,12883~12887,12901,12903,12910~12924,12926~12930,12932~12937,12939,12941~12946,12949~12950,12952~12953,12955~12962,12964~12967,12969~12970,12972~12981,12983,12985~12987,12989,12992~12993,12995~12998,13020~13022,13024,13026~13037,13039~13045,13051~13054,13056~13057,13060~13066,13068~13069,13071~13074,13076~13078,13080~13084,13087~13090,13092~13093,13101~13104,13107~13108,13110~13124,13126,13131~13132,13134~13148,13152~13160,13162~13167,13201~13212,13214~13215,13217~13221,13224~13225,13235,13244,13250~13252,13261,13290,13301~13305,13308~13310,13312~13329,13331~13335,13337~13343,13345~13346,13348,13350,13352~13355,13357,13360~13365,13367~13368,13401~13404,13406~13411,13413,13415~13418,13420~13421,13424~13426,13428,13431,13433,13435~13442,13449~13450,13452,13454~13457,13459~13461,13464~13465,13468~13473,13475~13480,13482~13486,13488~13495,13501~13505,13599,13601~13603,13605~13608,13611~13628,13630~13643,13645~13652,13654~13662,13664~13685,13687,13690~13697,13699,13730~13734,13736~13740,13743~13758,13760~13763,13774~13778,13780,13782~13784,13786~13788,13790,13794~13797,13801~13804,13806~13815,13820,13825~13827,13830,13832~13835,13838~13851,13856,13859~13865,13901~13905,14001,14004~14006,14008~14013,14020~14021,14024~14043,14047~14048,14051~14052,14054~14063,14065~14070,14072,14075,14080~14083,14085~14086,14091~14092,14094~14095,14098,14101~14103,14105,14107~14113,14120,14125~14127,14129~14136,14138~14141,14143~14145,14150~14151,14166~14174,14201~14228,14231,14233,14240~14241,14260~14261,14263~14265,14267,14269~14270,14272~14273,14276,14280,14301~14305,14410~14411,14413~14416,14418,14420,14422~14425,14427~14430,14432~14433,14435,14437,14441,14443,14445,14449~14450,14452~14454,14456,14461~14464,14466~14472,14475~14482,14485~14489,14502,14504~14508,14510~14522,14525~14527,14529~14530,14532~14534,14536~14539,14541~14551,14555~14561,14563~14564,14568~14569,14571~14572,14580,14585~14586,14588~14592,14602~14627,14638~14639,14642~14644,14646~14647,14649~14653,14692,14694,14701~14702,14706~14712,14714~14724,14726~14733,14735~14745,14747~14748,14750~14758,14760,14766~14767,14769~14770,14772,14774~14775,14777~14779,14781~14788,14801~14810,14812~14827,14830~14831,14836~14843,14845~14847,14850~14861,14863~14865,14867,14869~14874,14876~14887,14889,14891~14895,14897~14898,14901~14905')))      return 'a304u000002pkzAAAQ'; //Patch CSR SMB NJ - GEO Based
    if(opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }) && opIn(t.custom1, new Set<String> { 'smb' }) && opIn(t.state, new Set<String> { 'ny', 'new york' }) && opZipcode(t.zipCode, '10001,10011~10014,10018~10021,10023~10037,10039~10040,10055,10060,10069,10075,10087,10090,10101~10116,10118~10126,10128,10130~10133,10138,10150~10155,10161~10170,10173~10174,10176,10179,10185,10199,10213,10258~10259,10261,10451~10475'))      return 'a304u000002pkzBAAQ'; //Patch CSR SMB NYC North/West - GEO Based
    if(opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }) && opIn(t.custom1, new Set<String> { 'smb' }) && opIn(t.state, new Set<String> { 'ny', 'new york' }) && opZipcode(t.zipCode, '00501,00544,06390,10002~10010,10016~10017,10022,10038,10041,10043~10045,10065,10080~10081,10117,10129,10156~10160,10171~10172,10175,10177~10178,10203,10211~10212,10242,10249,10256,10260,10265,10268~10282,10285~10286,10301~10314,11001~11005,11010,11020~11024,11026~11027,11030,11040,11042,11050~11055,11096,11101~11106,11109,11120,11201~11226,11228~11239,11241~11243,11245,11247,11249,11251~11252,11256,11351~11352,11354~11375,11377~11381,11385~11386,11405,11411~11436,11439,11451,11499,11501,11507,11509~11510,11514,11516,11518,11520,11530~11531,11542,11545,11547~11561,11563,11565~11566,11568~11572,11575~11577,11579~11582,11590,11596,11598~11599,11690~11695,11697,11701~11707,11709~11710,11713~11722,11724~11727,11729~11733,11735,11737~11743,11746~11747,11749,11751~11758,11760,11762~11773,11775~11780,11782~11784,11786~11798,11801~11804,11815,11819,11853,11901,11930~11935,11937,11939~11942,11944,11946~11965,11967~11973,11975~11978,11980'))      return 'a304u000002pkzCAAQ'; //Patch CSR SMB NYC South/East - GEO Based
    if(opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }) && opIn(t.state, new Set<String> { 'oh', 'ohio', 'in', 'indiana' }) && opIn(t.custom1, new Set<String> { 'smb' }))      return 'a304u000002pkzDAAQ'; //Patch CSR SMB OH/IN - GEO Based
    if(opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }) && opIn(t.state, new Set<String> { 'pa', 'pennsylvania' }) && opIn(t.custom1, new Set<String> { 'smb' }))      return 'a304u000002pkzEAAQ'; //Patch CSR SMB PA - GEO Based
    if(opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }) && opIn(t.state, new Set<String> { 'mt', 'montana', 'wy', 'wyoming', 'ut', 'utah', 'co', 'colorado', 'ak', 'alaska', 'wa', 'washington', 'id', 'idaho', 'or', 'oregon' }) && opIn(t.custom1, new Set<String> { 'smb' }))      return 'a304u000002pkzFAAQ'; //Patch CSR SMB Pacific NW - GEO Based
    if(opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }) && opIn(t.state, new Set<String> { 'ks', 'kansas', 'mo', 'missouri', 'ne', 'nebraska', 'ia', 'iowa', 'arkansas', 'ar', 'oklahoma', 'ok' }) && opIn(t.custom1, new Set<String> { 'smb' }))      return 'a304u000002pkzGAAQ'; //Patch CSR SMB South Midwest - GEO Based
    if(opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }) && opIn(t.state, new Set<String> { 'al', 'alabama', 'ms', 'mississippi', 'ky', 'kentucky', 'tn', 'tennessee' }) && opIn(t.custom1, new Set<String> { 'smb' }))      return 'a304u000002pkzHAAQ'; //Patch CSR SMB Southeast - GEO Based
    if(opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }) && opIn(t.state, new Set<String> { 'hi', 'hawaii', 'nv', 'nevada', 'az', 'arizona', 'nm', 'new mexico' }) && opIn(t.custom1, new Set<String> { 'smb' }))      return 'a304u000002pkzIAAQ'; //Patch CSR SMB Southwest - GEO Based
    if(opIn(t.country, new Set<String> { 'switzerland', 'ch', 'che', 'schweiz' }) && opIn(t.custom1, new Set<String> { 'smb' }))      return 'a304u000002pkzJAAQ'; //Patch CSR SMB Switzerland - GEO Based
    if(opIn(t.country, new Set<String> { 'br', 'bra', 'brazil', 'brasil' }) && opIn(t.custom1, new Set<String> { 'smb', 'commercial' }))      return 'a304u000002eQHxAAM'; //Patch CSR Brazil - GEO Based
    if(opIn(t.country, new Set<String> { 'ar', 'arg', 'argentina', 'cl', 'chl', 'chile', 'pe', 'per', 'peru', 'pm', 'pr', 'pri', 'co', 'col', 'colombia', 've', 'ven', 'venezuela', 'venezuela (bolivarian republic of)', 'ec', 'ecu', 'ecuador', 'bo', 'bol', 'bolivia', 'bolivia (plurinational state of)', 'bonaire', 'paraguay', 'uy', 'ury', 'uruguay', 'antarctica', 'gy', 'guy', 'guyana', 'sur', 'suriname', 'french guiana' }) && opIn(t.custom1, new Set<String> { 'smb', 'commercial' }))      return 'a304u000002pkzMAAQ'; //Patch CSR South America - Geo Based
    if((opZipcode(t.zipCode, '90254,90274~90275,90277~90278,90501~90505,90507~90510,90620~90624,90630~90633,90680,90701~90704,90710~90717,90720~90721,90731~90734,90740,90742~90749,90755,90801~90810,90813~90815,90822,90831~90835,90840,90842,90844,90846~90848,90853,90895,90899,91752,92201~92203,92210~92211,92220,92222~92223,92225~92227,92230~92236,92239~92241,92243~92244,92247~92251,92253~92255,92257~92264,92266,92270,92273~92276,92281~92283,92320,92501~92509,92513~92514,92516~92519,92521~92522,92530~92532,92536,92539,92543~92546,92548~92549,92551~92557,92561~92564,92567,92570~92572,92581~92587,92589~92593,92595~92596,92599,92602~92607,92609~92610,92612,92614~92620,92623~92630,92637,92646~92663,92672~92679,92683~92685,92688,92690~92694,92697~92698,92701~92708,92711~92712,92728,92735,92780~92782,92799,92801~92809,92811~92812,92814~92817,92821~92823,92825,92831~92838,92840~92846,92850,92856~92857,92859~92871,92877~92883,92885~92887,92899') && opIn(t.state, new Set<String> { 'ca', 'california' }) && opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }) && opIn(t.custom1, new Set<String> { 'commercial' })) || (opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }) && opIn(t.custom1, new Set<String> { 'commercial' }) && opIn(t.state, new Set<String> { 'hawaii', 'hi' })))      return 'a304u000002pkzNAAQ'; //Patch CSR South LA/Orange County/HI - GEO Based
    if(opIn(t.country, new Set<String> { 'fi', 'fin', 'finland', 'se', 'swe', 'sweden', 'is', 'isl', 'iceland' }) && opIn(t.custom1, new Set<String> { 'smb', 'commercial' }))      return 'a304u000002pkzOAAQ'; //Patch CSR Sweden/Finland - GEO Based
    if(opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }) && opIn(t.state, new Set<String> { 'tn', 'tennessee', 'ky', 'kentucky' }) && opIn(t.custom1, new Set<String> { 'commercial' }))      return 'a304u000002pkzPAAQ'; //Patch CSR TN/KY - GEO Based
    if(opIn(t.country, new Set<String> { 'ca', 'canada' }) && opIn(t.custom1, new Set<String> { 'commercial' }) && opIn(t.state, new Set<String> { 'ontario', 'on' }) && opStart(t.zipCode, new Set<String> { 'm', 'k1' }))      return 'a304u000002pkzQAAQ'; //Patch CSR Toronto - GEO Based
    if(opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }) && opIn(t.custom1, new Set<String> { 'commercial' }) && opIn(t.state, new Set<String> { 'tx', 'texas', 'ok', 'oklahoma' }) && opZipcode(t.zipCode, '73001~73034,73036,73038~73045,73047~73059,73061~73075,73077~73080,73082~73086,73089~73090,73092~73093,73095~73099,73101~73132,73134~73137,73139~73157,73159~73160,73162~73165,73167,73169~73170,73172~73173,73178~73179,73184~73185,73189~73190,73194~73196,73401~73403,73425,73430,73432~73444,73446~73450,73453,73455~73456,73458~73461,73463,73481,73487~73488,73491,73501~73503,73505~73507,73520~73523,73526~73534,73536~73544,73546~73562,73564~73573,73601,73620,73622,73624~73628,73632,73638~73639,73641~73642,73644~73648,73650~73651,73654~73655,73658~73664,73666~73669,73673,73701~73703,73705~73706,73716~73720,73722,73724,73726~73731,73733~73739,73741~73744,73746~73747,73749~73750,73753~73764,73766,73768,73770~73773,73801~73802,73832,73834~73835,73838,73840~73844,73848,73851~73853,73855,73857~73860,73901,73931~73933,73937~73939,73942,73944~73947,73949~73951,73960,74001~74006,74008,74010~74023,74026~74039,74041~74048,74050~74056,74058~74063,74066~74068,74070~74085,74101~74108,74110,74112,74114~74117,74119~74121,74126~74137,74141,74145~74150,74152~74153,74155~74159,74169~74172,74182,74186~74187,74192~74193,74301,74330~74333,74335,74337~74340,74342~74347,74349~74350,74352,74354~74355,74358~74370,74401~74403,74421~74423,74425~74432,74434~74442,74444~74447,74450~74452,74454~74465,74467~74472,74477,74501~74502,74521~74523,74525,74528~74531,74533~74536,74538,74540,74543,74545~74547,74549,74552~74563,74565,74567,74569~74572,74574,74576~74578,74601~74602,74604,74630~74633,74636~74637,74640~74641,74643~74644,74646~74647,74650~74653,74701~74702,74720~74724,74726~74731,74733~74738,74740~74741,74743,74745,74747~74748,74750,74752~74756,74759~74761,74764,74766,74801~74802,74804,74818,74820~74821,74824~74827,74829~74834,74836~74837,74839~74840,74842~74845,74848~74852,74854~74857,74859~74860,74864~74869,74871~74873,74875,74878,74880~74881,74883~74884,74901~74902,74930~74932,74935~74937,74939~74949,74951,74953~74957,74959~74960,74962~74966,75002,75007,75009~75011,75013~75017,75020~75030,75032~75036,75056~75058,75065,75067~75072,75074~75078,75086~75087,75090~75094,75097~75099,75121,75132,75135,75164,75166,75173,75189,75355,75370,75379~75381,75389,75391,75401~75404,75407,75409~75418,75420~75426,75428~75429,75431~75444,75446~75462,75468~75483,75485~75497,75501,75503~75505,75507,75550~75551,75554~75556,75558~75574,75599,75630,75636,75638,75644,75656~75657,75661,75668,75683,75686,75694,75783,76023,76073,76078,76201~76210,76225~76228,76230,76233~76234,76238~76241,76245~76247,76249~76253,76255,76258~76259,76261~76268,76270~76273,76301~76302,76305~76311,76351~76352,76354,76357,76360,76363~76367,76369~76374,76377,76379~76380,76384~76385,76388~76389,76426~76427,76431,76449~76450,76458~76460,76481,76483,76486,76490~76491,79001~79003,79005,79007~79016,79018~79019,79021~79022,79024~79025,79027,79029,79031~79036,79039~79046,79051~79054,79056~79059,79061~79066,79068,79070,79072~79073,79077~79088,79091~79098,79101~79111,79114,79116~79121,79124,79159,79166,79168,79172,79174,79178,79185,79189,79201,79220~79221,79223,79225~79227,79229~79231,79233~79237,79239~79241,79243~79245,79247~79248,79250~79252,79255~79259,79261,79311~79314,79316,79322~79326,79329~79331,79336,79338~79339,79342~79347,79350~79351,79353,79355~79360,79363~79364,79366~79367,79369~79373,79376~79383,79401~79404,79406~79416,79423~79424,79430,79452~79453,79457,79464,79490~79491,79493,79499,79501~79503,79505,79511~79512,79516~79518,79520~79521,79525~79529,79532,79534,79536,79539~79540,79543~79550,79553,79556,79560~79561,79563,79565,79601~79608,79697~79699,79713~79714,79720~79721,79733,79738,79748~79749,79782~79783'))      return 'a304u000002pkzRAAQ'; //Patch CSR TX North/OK - GEO Based
    if(opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }) && opIn(t.custom1, new Set<String> { 'commercial' }) && opIn(t.state, new Set<String> { 'tx', 'texas' }) && opZipcode(t.zipCode, '73301,73344,76432,76436,76442,76452,76455,76474,76502~76504,76508,76511,76513,76522,76525~76528,76530~76531,76534,76537~76544,76547~76550,76554,76557~76559,76561,76564~76566,76571,76573~76574,76596~76599,76622,76633~76634,76637~76638,76644,76657,76689,76801~76804,76820~76821,76823~76825,76827~76828,76831~76832,76834,76836~76837,76841~76842,76844~76845,76848~76849,76852~76859,76861~76862,76864~76866,76869~76875,76877~76878,76880,76882~76888,76890,76901~76906,76908~76909,76930,76932~76937,76939~76941,76943,76945,76949~76951,76953,76955,76957~76958,78001~78017,78019,78021~78029,78039~78046,78050,78052,78054~78067,78069~78076,78101~78102,78104,78107~78109,78111~78119,78121~78125,78130~78133,78135,78140~78148,78150~78152,78154~78156,78159~78164,78201~78261,78263~78266,78268~78270,78278~78280,78283~78285,78288~78289,78291~78299,78330,78332~78333,78335~78336,78338~78344,78347,78349~78353,78355,78357~78364,78368~78377,78379~78385,78387,78389~78391,78393,78401~78419,78426~78427,78460,78463,78465~78469,78472,78480,78501~78505,78516,78520~78523,78526,78535~78543,78545,78547~78553,78557~78570,78572~78580,78582~78586,78588~78599,78602,78604~78624,78626~78636,78638~78646,78648,78651~78658,78660~78667,78669~78677,78680~78683,78691,78701~78705,78708~78739,78741~78742,78744~78769,78772~78774,78778~78779,78783,78799,78801~78802,78827~78830,78832~78834,78836~78843,78847,78850~78853,78860~78861,78870~78873,78877,78879~78881,78883~78886,78953,78959,79506,79508,79519,79530,79535,79537~79538,79541,79562,79566~79567,79701~79708,79710~79712,79718~79719,79730~79731,79734~79735,79739~79745,79752,79754~79756,79758~79766,79768~79770,79772,79776~79778,79780~79781,79785~79786,79788~79789,79821,79830~79832,79834~79839,79842~79843,79845~79849,79851~79855,79901~79908,79910~79918,79920,79922~79932,79934~79938,79940~79955,79958,79960~79961,79968,79976,79978,79980,79990,79995~79999,88510~88515,88517~88521,88523~88536,88538~88550,88553~88563,88565~88590,88595'))      return 'a304u000002pkzSAAQ'; //Patch CSR TX Southwest - GEO Based
    return null;
  }
  private Id matchGroup3(PatchDataModel.MatchTarget t)
  {
    if(opIn(t.country, new Set<String> { 'gb', 'gbr', 'united kingdom', 'uk', 'great britain', 'england' }) && opStart(t.zipCode, new Set<String> { 'al', 'br', 'cb', 'cm', 'co', 'ct', 'cv', 'da', 'en', 'gl', 'ha', 'hp', 'hr', 'ig', 'ip', 'lu', 'me', 'mk', 'nn', 'ox', 'rm', 'sg', 'sn', 'ss', 'wd', 'wr' }) && opIn(t.custom1, new Set<String> { 'commercial' }))      return 'a304u000002pkzTAAQ'; //Patch CSR UK Midlands - GEO Based
    if(opIn(t.country, new Set<String> { 'gb', 'gbr', 'united kingdom', 'uk', 'great britain', 'england' }) && opStart(t.zipCode, new Set<String> { 'b1', 'b2', 'b3', 'b4', 'b5', 'b6', 'b7', 'b8', 'b9', 'bd', 'ca', 'de', 'dh', 'dl', 'dn', 'hd', 'hg', 'hu', 'hx', 'la', 'le', 'ln', 'ls', 'ne', 'ng', 'nr', 'pe', 's1', 's2', 's3', 's4', 's6', 's7', 's8', 's9', 'sr', 'ts', 'wf', 'yo' }) && opIn(t.custom1, new Set<String> { 'commercial' }))      return 'a304u000002pkzUAAQ'; //Patch CSR UK North - GEO Based
    if(opIn(t.country, new Set<String> { 'gb', 'gbr', 'united kingdom', 'uk', 'great britain', 'england' }) && opStart(t.zipCode, new Set<String> { 'bb', 'bl', 'ch', 'cw', 'dy', 'fy', 'l1', 'l2', 'l3', 'l5', 'l7', 'l8', 'll', 'm1', 'm2', 'm3', 'm4', 'm5', 'm8', 'ol', 'pr', 'sk', 'st', 'sy', 'tf', 'wa', 'wn', 'ws', 'wv' }) && opIn(t.custom1, new Set<String> { 'commercial' }))      return 'a304u000002pkzVAAQ'; //Patch CSR UK North West - GEO Based
    if(opIn(t.country, new Set<String> { 'gb', 'gbr', 'united kingdom', 'uk', 'great britain', 'england' }) && opStart(t.zipCode, new Set<String> { 'ba', 'bh', 'bn', 'bs', 'cr', 'dt', 'ex', 'gu', 'gy', 'je', 'kt', 'pl', 'po', 'rg', 'rh', 'sl', 'so', 'sp', 'ta', 'tn', 'tq', 'tr', 'tw', 'ub' }) && opIn(t.custom1, new Set<String> { 'commercial' }))      return 'a304u000002pkzWAAQ'; //Patch CSR UK South - GEO Based
    if(opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }) && opIn(t.custom1, new Set<String> { 'commercial' }) && opIn(t.state, new Set<String> { 'ny', 'new york' }) && opZipcode(t.zipCode, '10501~10507,10509~10512,10514,10516~10524,10526~10528,10530,10532~10533,10535~10538,10540~10543,10545~10553,10560,10562,10566~10567,10570,10573,10576~10580,10583,10587~10591,10594~10598,10601~10607,10610,10701~10710,10801~10805,10901,10910~10928,10930~10933,10940~10941,10949~10950,10952~10954,10956,10958~10960,10962~10965,10968~10970,10973~10977,10979~10990,10992~10994,10996~10998,12007~12010,12015~12020,12022~12025,12027~12029,12031~12033,12035~12037,12040~12043,12045~12047,12050~12078,12082~12087,12089~12090,12092~12095,12106~12108,12110,12115~12118,12120~12125,12128,12130~12134,12136~12141,12143~12144,12147~12151,12153~12161,12164~12170,12172~12177,12180~12190,12192~12198,12201~12212,12214,12220,12222~12250,12252,12255~12257,12260~12261,12288,12301~12309,12325,12345,12401~12402,12404~12407,12409~12414,12416~12424,12427~12436,12438~12444,12446,12448~12461,12463~12466,12468~12475,12477,12480~12487,12489~12496,12498,12501~12504,12506~12508,12510~12518,12520~12531,12533~12534,12537~12538,12540~12553,12555,12561,12563~12572,12574~12575,12577~12578,12580~12586,12588~12590,12592,12594,12601~12604,12701,12719~12727,12729,12732~12734,12736~12738,12740~12743,12745~12752,12754,12758~12760,12762~12771,12775~12781,12783~12792,12801,12803~12804,12808~12812,12814~12817,12819~12824,12827~12828,12831~12839,12841~12866,12870~12874,12878~12879,12883~12887,12901,12903,12910~12924,12926~12930,12932~12937,12939,12941~12946,12949~12950,12952~12953,12955~12962,12964~12967,12969~12970,12972~12981,12983,12985~12987,12989,12992~12993,12995~12998,13020~13022,13024,13026~13037,13039~13045,13051~13054,13056~13057,13060~13066,13068~13069,13071~13074,13076~13078,13080~13084,13087~13090,13092~13093,13101~13104,13107~13108,13110~13124,13126,13131~13132,13134~13148,13152~13160,13162~13167,13201~13212,13214~13215,13217~13221,13224~13225,13235,13244,13250~13252,13261,13290,13301~13305,13308~13310,13312~13329,13331~13335,13337~13343,13345~13346,13348,13350,13352~13355,13357,13360~13365,13367~13368,13401~13404,13406~13411,13413,13415~13418,13420~13421,13424~13426,13428,13431,13433,13435~13442,13449~13450,13452,13454~13457,13459~13461,13464~13465,13468~13473,13475~13480,13482~13486,13488~13495,13501~13505,13599,13601~13603,13605~13608,13611~13628,13630~13643,13645~13652,13654~13662,13664~13685,13687,13690~13697,13699,13730~13734,13736~13740,13743~13758,13760~13763,13774~13778,13780,13782~13784,13786~13788,13790,13794~13797,13801~13804,13806~13815,13820,13825~13827,13830,13832~13835,13838~13851,13856,13859~13865,13901~13905,14001,14004~14006,14008~14013,14020~14021,14024~14043,14047~14048,14051~14052,14054~14063,14065~14070,14072,14075,14080~14083,14085~14086,14091~14092,14094~14095,14098,14101~14103,14105,14107~14113,14120,14125~14127,14129~14136,14138~14141,14143~14145,14150~14151,14166~14174,14201~14228,14231,14233,14240~14241,14260~14261,14263~14265,14267,14269~14270,14272~14273,14276,14280,14301~14305,14410~14411,14413~14416,14418,14420,14422~14425,14427~14430,14432~14433,14435,14437,14441,14443,14445,14449~14450,14452~14454,14456,14461~14464,14466~14472,14475~14482,14485~14489,14502,14504~14508,14510~14522,14525~14527,14529~14530,14532~14534,14536~14539,14541~14551,14555~14561,14563~14564,14568~14569,14571~14572,14580,14585~14586,14588~14592,14602~14627,14638~14639,14642~14644,14646~14647,14649~14653,14692,14694,14701~14702,14706~14712,14714~14724,14726~14733,14735~14745,14747~14748,14750~14758,14760,14766~14767,14769~14770,14772,14774~14775,14777~14779,14781~14788,14801~14810,14812~14827,14830~14831,14836~14843,14845~14847,14850~14861,14863~14865,14867,14869~14874,14876~14887,14889,14891~14895,14897~14898,14901~14905'))      return 'a304u000002pkzXAAQ'; //Patch CSR UNY - GEO Based
    if(opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }) && opIn(t.custom1, new Set<String> { 'commercial' }) && opIn(t.state, new Set<String> { 'va', 'virginia' }) && opStart(t.zipCode, new Set<String> { '20', '22' }))      return 'a304u000002pkzYAAQ'; //Patch CSR VA North - GEO Based
    if((opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }) && opIn(t.state, new Set<String> { 'va', 'virginia' }) && opIn(t.custom1, new Set<String> { 'commercial' }) && opStart(t.zipCode, new Set<String> { '23', '24', '25', '26' })) || (opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }) && opIn(t.custom1, new Set<String> { 'commercial' }) && opIn(t.state, new Set<String> { 'west virginia', 'wv' })))      return 'a304u000002pkzZAAQ'; //Patch CSR VA/WV - GEO Based
    if(opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }) && opIn(t.state, new Set<String> { 'washington', 'wa' }) && opIn(t.custom1, new Set<String> { 'commercial' }) && opZipcode(t.zipCode, '98004~98005,98007~98009,98011~98012,98014~98015,98019~98021,98024,98026~98029,98033~98034,98036~98037,98039~98041,98043,98045~98046,98052~98053,98061,98065,98072~98075,98077,98082~98083,98087,98101~98107,98109~98117,98119,98121~98122,98124~98127,98129,98131,98133~98134,98139,98141,98144~98145,98154~98155,98160~98161,98164~98165,98174~98175,98177,98181,98185,98190~98191,98194~98195,98199,98201,98203~98204,98206~98208,98213,98220~98233,98235~98241,98243~98245,98247~98253,98255~98264,98266~98267,98270~98284,98286~98288,98290~98297,98305,98310~98312,98315,98320,98324~98326,98331,98339~98340,98342~98343,98345~98346,98350,98357~98358,98362~98366,98368,98370,98376,98380~98383,98392~98393,98548,98555,98801~98802,98811~98817,98819,98822,98826~98827,98829~98831,98833~98834,98840~98841,98843~98844,98846~98847,98849,98852,98855~98856,98858~98859,98862,99003,99005~99006,99009,99013,99021,99025~99026,99029,99034,99040,99101,99103,99107,99109~99110,99114~99119,99121~99124,99126,99129,99131,99133,99135,99137~99141,99146~99148,99150~99153,99155~99157,99160,99166~99167,99173,99180~99181,99185,99208,99218,99228,99251'))      return 'a304u000002pkzaAAA'; //Patch CSR WA North - GEO Based
    if(opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }) && opIn(t.state, new Set<String> { 'washington', 'wa' }) && opIn(t.custom1, new Set<String> { 'commercial' }) && opZipcode(t.zipCode, '98001~98003,98006,98010,98013,98022~98023,98025,98030~98032,98035,98038,98042,98047,98050~98051,98055~98059,98062~98064,98068,98070~98071,98089,98092~98093,98108,98118,98136,98138,98146,98148,98158,98166,98168,98170,98178,98188,98198,98303~98304,98314,98321~98323,98327~98330,98332~98333,98335~98338,98344,98348~98349,98351~98356,98359~98361,98367,98371~98375,98377~98378,98384~98388,98390~98391,98394~98398,98401~98409,98411~98413,98415~98419,98421~98422,98424,98430~98431,98433,98438~98439,98443~98448,98464~98467,98471,98481,98490,98493,98496~98499,98501~98509,98511~98513,98516,98520,98522,98524,98526~98528,98530~98533,98535~98542,98544,98546~98547,98550,98552,98554,98556~98566,98568~98572,98575~98577,98579~98593,98595~98597,98599,98601~98607,98609~98614,98616~98617,98619~98626,98628~98629,98631~98632,98635,98637~98645,98647~98651,98660~98666,98668,98670~98675,98682~98687,98807,98821,98823~98824,98828,98832,98836~98837,98845,98848,98850~98851,98853,98857,98860,98901~98904,98907~98909,98920~98923,98925~98926,98930,98932~98944,98946~98948,98950~98953,99001,99004,99008,99011~99012,99014,99016~99020,99022~99023,99027,99030~99033,99036~99037,99039,99102,99104~99105,99111,99113,99125,99128,99130,99134,99136,99143~99144,99149,99154,99158~99159,99161,99163~99164,99169~99171,99174,99176,99179,99201~99207,99209~99217,99219~99220,99223~99224,99252,99256,99258,99260,99301~99302,99320~99324,99326,99328~99330,99333,99335~99338,99341,99343~99350,99352~99354,99356~99357,99359~99363,99371,99401~99403'))      return 'a304u000002iYVhAAM'; //Patch CSR WA South - GEO Based
    if(opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }) && opIn(t.state, new Set<String> { 'wi', 'wisconsin', 'nd', 'north dakota' }) && opIn(t.custom1, new Set<String> { 'commercial' }))      return 'a304u000002pkzbAAA'; //Patch CSR WI/ND - GEO Based
    if((opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }) && opIn(t.custom1, new Set<String> { 'commercial' }) && opIn(t.state, new Set<String> { 'al', 'alabama' })) || (opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }) && opIn(t.custom1, new Set<String> { 'commercial' }) && opIn(t.state, new Set<String> { 'florida', 'fl' }) && opZipcode(t.zipCode, '32003~32004,32006~32009,32011,32013,32024~32026,32030,32033~32035,32038,32040~32044,32046,32050,32052~32056,32058~32068,32071~32073,32079~32087,32091~32092,32094~32097,32099,32105,32110,32112,32114~32132,32135~32143,32145,32147~32149,32157,32160,32164,32168~32170,32173~32178,32180~32181,32185,32187,32189~32190,32193,32198,32201~32212,32214,32216~32229,32231~32241,32244~32247,32250,32254~32260,32266,32277,32301~32318,32320~32324,32326~32337,32340~32341,32343~32348,32350~32353,32355~32362,32395,32399,32401~32413,32417,32420~32428,32430~32435,32437~32440,32442~32449,32452,32455~32457,32459~32466,32501~32509,32511~32514,32516,32520~32524,32526,32530~32531,32533~32542,32544,32547~32550,32559~32572,32577~32580,32583,32588,32591,32601~32612,32614~32616,32618~32619,32622,32627~32628,32631,32633,32635,32640~32641,32643,32648,32653~32656,32658,32662,32666~32667,32669,32680,32692~32694,32697,32706,32713,32720~32725,32728,32738~32739,32744~32745,32753~32754,32759,32763~32764,32774~32775,32780~32781,32783,32796,32815,32899,32901~32912,32919~32920,32922~32927,32931~32932,32934~32937,32940~32941,32948~32971,32976,32978,33112,33401~33422,33424~33438,33444~33446,33448~33449,33454~33455,33458~33470,33472~33478,33480~33484,33486~33488,33493,33496~33499,34945~34954,34956~34958,34979,34981~34988,34990~34992,34994~34997')))      return 'a304u000002eJz2AAE'; //Patch CSR FL Northeast/AL - GEO Based
    if(opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }) && opIn(t.state, new Set<String> { 'sc', 'south carolina', 'nc', 'north carolina' }) && opIn(t.custom1, new Set<String> { 'smb' }))      return 'a304u000002eNx5AAE'; //Patch CSR SMB NC/SC - GEO Based
    if((opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }) && opIn(t.state, new Set<String> { 'ga', 'georgia' }) && opIn(t.custom1, new Set<String> { 'smb' })) || (opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }) && opIn(t.custom1, new Set<String> { 'smb' }) && opIn(t.state, new Set<String> { 'fl', 'florida' }) && opZipcode(t.zipCode, '32003~32004,32006,32009,32011,32024~32026,32030,32034~32035,32040~32041,32046,32050,32052~32056,32058~32065,32067~32068,32071~32073,32079,32081~32083,32087,32094,32096~32097,32099,32201~32212,32214,32216~32229,32231~32241,32244~32247,32250,32254~32260,32266,32277,32301~32318,32320~32324,32326~32337,32340~32341,32343~32347,32350~32353,32355,32357~32358,32360~32362,32395,32399,32401~32413,32417,32420~32428,32430~32435,32437~32440,32442~32449,32452,32455~32457,32459~32466,32501~32509,32511~32514,32516,32520~32524,32526,32530~32531,32533~32542,32544,32547~32550,32559~32572,32577~32580,32583,32588,32591,32697,33112,33967')))      return 'a304u000002eNx0AAE'; //Patch CSR SMB GA/FL North - GEO Based
    if(opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }) && opIn(t.state, new Set<String> { 'fl', 'florida' }) && opIn(t.custom1, new Set<String> { 'smb' }) && opZipcode(t.zipCode, '32007~32008,32013,32033,32038,32042~32044,32066,32080,32084~32086,32091~32092,32095,32102,32105,32110~32143,32145,32147~32149,32157~32160,32162~32164,32168~32170,32173~32183,32185,32187,32189~32190,32192~32193,32195,32198,32348,32356,32359,32601~32612,32614~32619,32621~32622,32625~32628,32631,32633~32635,32639~32641,32643~32644,32648,32653~32656,32658,32662~32664,32666~32669,32680~32681,32683,32686,32692~32694,32696,32701~32704,32706~32710,32712~32716,32718~32728,32730,32732~32733,32735~32736,32738~32739,32744~32747,32750~32754,32756~32757,32759,32762~32768,32771~32781,32783~32784,32789~32796,32798~32799,32801~32812,32814~32822,32824~32837,32839,32853~32862,32867~32869,32872,32877~32878,32885~32887,32891,32896~32897,32899,32901~32912,32919~32920,32922~32927,32931~32932,32934~32937,32940~32941,32948~32971,32976,32978,33001~33002,33004,33008~33037,33039~33043,33045,33050~33052,33054~33056,33060~33077,33081~33084,33090,33092~33093,33097,33101~33102,33106,33109,33111,33114,33116,33119,33122,33124~33147,33149~33158,33160~33170,33172~33199,33206,33222,33231,33233~33234,33238~33239,33242~33243,33245,33247,33255~33257,33261,33265~33266,33269,33280,33283,33296,33299,33301~33332,33334~33340,33345~33346,33348~33349,33351,33355,33359,33388,33394,33401~33422,33424~33438,33440~33446,33448~33449,33454~33455,33458~33478,33480~33484,33486~33488,33493,33496~33499,33503,33508~33511,33513~33514,33521,33523~33527,33530,33534,33537~33545,33547~33550,33556,33558~33559,33563~33576,33578~33579,33583~33587,33592~33598,33601~33626,33629~33631,33633~33635,33637,33646~33647,33650,33655,33660~33664,33672~33675,33677,33679~33682,33684~33689,33694,33701~33716,33729~33734,33736~33738,33740~33744,33747,33755~33767,33769~33782,33784~33786,33801~33807,33809~33813,33815,33820,33823,33825~33827,33830~33831,33834~33841,33843~33860,33862~33863,33865,33867~33868,33870~33873,33875~33877,33880~33885,33888,33890,33896~33898,33901~33922,33924,33927~33932,33935~33936,33938,33944~33957,33960,33965~33966,33970~33976,33980~33983,33990~33991,33993~33994,34101~34110,34112~34114,34116~34117,34119~34120,34133~34143,34145~34146,34201~34212,34215~34224,34228~34243,34249~34251,34260,34264~34270,34272,34274~34278,34280~34282,34284~34293,34295,34945~34954,34956~34958,34972~34974,34979,34981~34988,34990~34992,34994~34997'))      return 'a304u000002iWw4AAE'; //Patch CSR SMB FL South - Geo based
    if((opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }) && opIn(t.state, new Set<String> { 'louisiana', 'la', 'texas', 'tx' }) && opIn(t.custom1, new Set<String> { 'smb' })))      return 'a304u000002eNxFAAU'; //Patch CSR SMB TOLA South - GEO Based
    if(opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }) && opIn(t.custom1, new Set<String> { 'commercial' }) && opIn(t.state, new Set<String> { 'ca', 'california' }) && opZipcode(t.zipCode, '91001,91003,91006~91012,91016~91017,91020~91021,91023~91025,91030~91031,91040~91043,91046,91066,91077,91101~91110,91114~91118,91121,91123~91126,91129,91182,91184~91185,91188~91189,91199,91201~91210,91214,91221~91222,91224~91226,91301~91311,91313,91316,91319~91322,91324~91331,91333~91335,91337,91340~91346,91350~91362,91364~91365,91367,91371~91372,91376~91377,91380~91387,91390,91392~91396,91401~91413,91416,91423,91426,91436,91470,91482,91495~91496,91499,91501~91508,91510,91521~91523,91526,91601~91612,91614~91618,91701~91702,91706,91708~91711,91714~91716,91722~91724,91729~91735,91737,91739~91741,91743~91750,91754~91756,91758~91759,91761~91773,91775~91776,91778,91780,91784~91786,91788~91793,91801~91804,91896,91899,92242,92252,92256,92267~92268,92277~92278,92280,92284~92286,92301,92304~92305,92307~92318,92321~92325,92327~92329,92331~92342,92344~92347,92350,92352,92354,92356~92359,92363~92366,92368~92369,92371~92378,92382,92384~92386,92389,92391~92395,92397~92399,92401~92408,92410~92411,92413,92415,92418,92423,92427,93001~93007,93009~93016,93020~93024,93030~93036,93040~93044,93060~93067,93094,93099,93101~93103,93105~93111,93116~93118,93120~93121,93130,93140,93150,93160,93190,93199,93201~93208,93210,93212,93215~93216,93218~93227,93230,93232,93234~93235,93237~93247,93249~93252,93254~93258,93260~93263,93265~93268,93270~93272,93274~93280,93282~93283,93285~93287,93290~93292,93301~93309,93311~93314,93380,93383~93390,93401~93403,93405~93410,93412,93420~93424,93426~93430,93432~93438,93440~93458,93460~93461,93463~93465,93475,93483,93501~93502,93504~93505,93510,93512~93519,93522~93524,93526~93532,93534~93536,93539,93541~93546,93549~93556,93558,93560~93563,93581,93584,93586,93590~93592,93596,93599,93601~93616,93618~93628,93630~93631,93633~93654,93656~93657,93660~93662,93664~93670,93673,93675,93701~93712,93714~93718,93720~93730,93740~93741,93744~93745,93747,93750,93755,93760~93761,93764~93765,93771~93780,93784,93786,93790~93794,93844,93888,93901~93902,93905~93908,93912,93915,93920~93928,93930,93932~93933,93940,93942~93944,93950,93953~93955,93960,93962'))      return 'a304u000002eWZBAA2'; //Patch CSR CA Central - GEO Based
    if((opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }) && opIn(t.custom1, new Set<String> { 'commercial' }) && opIn(t.state, new Set<String> { 'co', 'colorado' }) && opStart(t.zipCode, new Set<String> { '800', '803', '804', '805', '806', '807', '816' })) || (opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }) && opIn(t.custom1, new Set<String> { 'commercial' }) && opIn(t.state, new Set<String> { 'utah', 'ut' }) && opStart(t.zipCode, new Set<String> { '841', '842', '843', '844' })))      return 'a304u000002iAFbAAM'; //Patch CSR CO/UT North - Geo Based
    if(opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }) && opIn(t.state, new Set<String> { 'fl', 'florida' }) && opIn(t.custom1, new Set<String> { 'smb' }) && opZipcode(t.zipCode, '34420~34421,34423,34428~34434,34436,34441~34442,34445~34453,34460~34461,34464~34465,34470~34484,34487~34489,34491~34492,34498,34601~34611,34613~34614,34636~34639,34652~34656,34660~34661,34667~34669,34673~34674,34677,34679~34685,34688~34692,34695,34697~34698,34705,34711~34715,34729,34731,34734,34736~34737,34739~34749,34753,34755~34756,34758~34762,34769~34773,34777~34778,34785~34789,34797'))      return 'a304u000002eNxAAAU'; //Patch CSR SMB FL - GEO Based
    if(opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }) && opIn(t.state, new Set<String> { 'ca', 'california' }) && opIn(t.custom1, new Set<String> { 'commercial' }))      return 'a304u000002pkzcAAA'; //Patch Catch All AMS Comm California - GEO Based
    if(opIn(t.country, new Set<String> { 'ca', 'canada' }) && opIn(t.custom1, new Set<String> { 'commercial' }))      return 'a304u000002pkzdAAA'; //Patch Catch All AMS Comm Canada - GEO Based
    if(opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }) && opIn(t.state, new Set<String> { 'mn', 'minnesota', 'wi', 'wisconsin', 'nd', 'north dakota', 'sd', 'south dakota', 'oh', 'ohio', 'in', 'indiana', 'il', 'illinois' }) && opIn(t.custom1, new Set<String> { 'commercial' }))      return 'a304u000002pkzeAAA'; //Patch Catch All AMS Comm Central - GEO Based
    if(opIn(t.country, new Set<String> { 'mx', 'mex', 'mexico', 'cr', 'cri', 'costa rica', 'sv', 'slv', 'gq', 'gnq', 'hn', 'hnd', 'honduras', 'el salvador', 'gt', 'gtm', 'guatemala', 'ni', 'nic', 'nicaragua', 'pa', 'pan', 'panama', 'bz', 'blz', 'belize', 'bermuda', 'bm', 'jm', 'jam', 'jamaica', 'pm', 'pr', 'pri', 'pry', 'puerto rico', 'do', 'dom', 'dominican republic', 'cym', 'cayman islands', 'tc', 'tca', 'trinidad and tobago', 'tt', 'tto', 'turks and caicos islands', 'bs', 'bhs', 'bahamas', 'saint kitts and nevis', 'saint kitts & nevis anguilla', 'saint lucia', 'antigua and barbuda', 'antigua/barbuda', 'aw', 'abw', 'aruba', 'bb', 'brb', 'barbados', 'maf', 'martinique', 'mf', 'mq', 'mtq', 'west indies', 'grenada', 'ag', 'ai', 'aia', 'angola anguilla', 'anguilla', 'aq', 'ata', 'atg', 'bes', 'bl', 'blm', 'bmu', 'sint eustatius and saba', 'bq', 'british virgin islands', 'curacao', 'cuw', 'cw', 'dm', 'dma', 'french guiana', 'gf', 'glp', 'gp', 'gs', 'guadeloupe', 'guf', 'kn', 'kna', 'ky', 'lc', 'lca', 'saint barthelemy', 'saint helena', 'ascension and tristan da cunha', 'saint martin (french part)', 'saint pierre and miquelon', 'saint vincent and the grenadines', 'san marino', 'sao tome and principe', 'sh', 'shn', 'sint maarten (dutch part)', 'sm', 'smr', 'south georgia and the south sandwich islands', 'spm', 'sr', 'st', 'stp', 'sx', 'sxm', 'vc', 'vct', 'vg', 'vgb', 'vi vir', 'virgin islands (british)', 'virgin islands (u.s.)', 'virgin islands (usa)', 'wallis and futuna', 'wf', 'wlf', 'cu', 'cub', 'cuba', 'equatorial guinea', 'fk', 'flk', 'falkland islands', 'malvinas', 'gn', 'gin', 'guinea', 'gw', 'gnb', 'guinea-bissau', 'ht', 'hti', 'haiti', 'american samoa', 'united states minor outlying islands', 'st. pierre and miquelon', 'br', 'bra', 'brazil', 'brasil', 'ar', 'arg', 'argentina', 'cl', 'chl', 'chile', 'pe', 'per', 'peru', 'co', 'col', 'colombia', 've', 'ven', 'venezuela', 'venezuela (bolivarian republic of)', 'ec', 'ecu', 'ecuador', 'bo', 'bol', 'bolivia', 'bolivia (plurinational state of)', 'bonaire', 'paraguay', 'uy', 'ury', 'uruguay', 'antarctica', 'gy', 'guy', 'guyana', 'sur', 'suriname', '' }) && opIn(t.custom1, new Set<String> { 'smb', 'commercial' }))      return 'a304u000002pkzfAAA'; //Patch Catch All AMS Comm LATAM - GEO Based
    if(opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }) && opIn(t.state, new Set<String> { 'dc', 'dist of columbia', 'district of columbia', 'de', 'delaware', 'pa', 'pennsylvania', 'md', 'maryland', 'va', 'virginia', 'west virginia', 'wv' }) && opIn(t.custom1, new Set<String> { 'commercial' }))      return 'a304u000002pkzgAAA'; //Patch Catch All AMS Comm Mid-Atlantic - GEO Based
    if(opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }) && opIn(t.state, new Set<String> { 'massachusetts', 'ma', 'ct', 'connecticut', 'ri', 'rhode island', 'me', 'maine', 'vt', 'vermont', 'nh', 'new hampshire' }) && opIn(t.custom1, new Set<String> { 'commercial' }))      return 'a304u000002pkzhAAA'; //Patch Catch All AMS Comm New England - GEO Based
    if(opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }) && opIn(t.state, new Set<String> { 'nj', 'n.j.', 'new jersey', 'ny', 'new york' }) && opIn(t.custom1, new Set<String> { 'commercial' }))      return 'a304u000002pkziAAA'; //Patch Catch All AMS Comm NY/NJ - GEO Based
    if(opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }) && opIn(t.state, new Set<String> { 'ne', 'nebraska', 'ia', 'iowa', 'ks', 'kansas', 'mo', 'missouri', 'tx', 'texas', 'ok', 'oklahoma', 'louisana', 'la', 'ar', 'arkansas' }) && opIn(t.custom1, new Set<String> { 'commercial' }))      return 'a304u000002pkzjAAA'; //Patch Catch All AMS Comm South Central - GEO Based
    if(opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }) && opIn(t.state, new Set<String> { 'tn', 'tennessee', 'ky', 'kentucky', 'ga', 'georgia', 'al', 'alabama', 'ms', 'mississippi', 'florida', 'fl', 'south carolina', 'sc', 'nc', 'north carolina' }) && opIn(t.custom1, new Set<String> { 'commercial' }))      return 'a304u000002pkzkAAA'; //Patch Catch All AMS Comm Southeast - GEO Based
    if(opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }) && opIn(t.state, new Set<String> { 'az', 'arizona', 'nm', 'new mexico', 'oregon', 'or', 'washington', 'wa', 'alaska', 'ak', 'co', 'colorado', 'utah', 'ut', 'idaho', 'id', 'montana', 'mt', 'wyoming', 'wy', 'nevada', 'nv' }) && opIn(t.custom1, new Set<String> { 'commercial' }))      return 'a304u000002pkzlAAA'; //Patch Catch All AMS Comm West - GEO Based
    if(opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }) && opIn(t.state, new Set<String> { 'pa', 'pennsylvania', 'ct', 'connecticut', 'ny', 'new york', 'de', 'delaware', 'va', 'virginia', 'west virginia', 'wv', 'md', 'maryland', 'dc', 'dist of columbia', 'district of columbia', 'ma', 'massachusetts', 'me', 'maine', 'vt', 'vermont', 'nh', 'new hampshire', 'ri', 'rhode island', 'nj', 'new jersey' }) && opIn(t.custom1, new Set<String> { 'smb' }))      return 'a304u000002pkznAAA'; //Patch Catch All AMS SMB East - GEO Based
    if(opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }) && opIn(t.state, new Set<String> { 'ga', 'georgia', 'fl', 'florida', 'al', 'alabama', 'ms', 'mississippi', 'ky', 'kentucky', 'tn', 'tennessee', 'arkansas', 'ar', 'louisiana', 'la', 'oklahoma', 'ok', 'texas', 'tx', 'sc', 'south carolina', 'nc', 'north carolina' }) && opIn(t.custom1, new Set<String> { 'smb' }))      return 'a304u000002pkzoAAA'; //Patch Catch All AMS SMB South - GEO Based
    if(opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }) && opIn(t.state, new Set<String> { 'ca', 'california', 'mt', 'montana', 'wy', 'wyoming', 'ut', 'utah', 'co', 'colorado', 'ak', 'alaska', 'wa', 'washington', 'id', 'idaho', 'or', 'oregon', 'ks', 'kansas', 'mo', 'missouri', 'ne', 'nebraska', 'ia', 'iowa', 'nd', 'north dakota', 'sd', 'south dakota', 'mn', 'minnesota', 'oh', 'ohio', 'wi', 'wisconsin', 'mi', 'michigan', 'in', 'indiana', 'il', 'illinois' }) && opIn(t.custom1, new Set<String> { 'smb' }))      return 'a304u000002pkzpAAA'; //Patch Catch All AMS SMB West - GEO Based
    if(opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }) && opIn(t.custom1, new Set<String> { 'commercial', 'smb' }))      return 'a304u000002pkzmAAA'; //Patch Catch All AMS Commercial - GEO Based
    if(opIn(t.country, new Set<String> { 'au', 'aus', 'australia', 'new caledonia', 'new caledonia (french)', 'nc', 'ncl', 'micronesia', 'papua new guinea', 'vanuatu', 'vanautu', 'tuvalu', 'solomon islands', 'kiribati', 'nz', 'nzl', 'new zealand', 'fiji', 'fiji islands', 'fji', 'fji. fji', 'cook islands', 'cok', 'guam' }) && opIn(t.custom1, new Set<String> { 'commercial', 'smb' }))      return 'a304u000002pkzqAAA'; //Patch Catch All APJ Comm ANZ - GEO Based
    if(opIn(t.country, new Set<String> { 'sg', 'sgp', 'singapore', 'my', 'mys', 'malaysia', 'ph', 'phl', 'philippines', 'hk', 'hkg', 'hong kong', 'china', 'taiwan', 'province of china', 'tw', 'twn', 'macau', 'south korea', 'kr', '\'korea', 'republic of\'', 'korea', 'republic of korea', 'id', 'idn', 'indonesia', 'cambodia', 'khm', 'mm', 'mmr', 'myanmar', 'burma', 'brunei darussalam', 'brunei', 'mongolia', 'vietnam', 'vn', 'viet nam', 'th', 'tha', 'thailand', 'ind', 'india', 'in' }) && opIn(t.custom1, new Set<String> { 'commercial', 'smb' }))      return 'a304u000002pkzrAAA'; //Patch Catch All APJ Comm ASEAN - GEO Based
    if(opIn(t.country, new Set<String> { 'jp', 'jpn', 'japan' }) && opIn(t.custom1, new Set<String> { 'smb', 'commercial' }))      return 'a304u000002pkztAAA'; //Patch Catch All APJ Comm Japan - GEO Based
    return null;
  }
  private Id matchGroup4(PatchDataModel.MatchTarget t)
  {
    //Empty rule criteria. Patch Catch All International Commercial - GEO Based
    if(opIn(t.country, new Set<String> { 'switzerland', 'ch', 'che', 'schweiz', 'pl', 'pol', 'poland', 'md', 'moldova', 'moldavia', 'am', 'arm', 'armenia', 'az', 'aze', 'azerbaijan', 'by', 'blr', 'belarus', 'cz', 'cze', 'czech republic', 'ee', 'est', 'estonia', 'ge', 'geo', 'georgia', 'hu', 'hun', 'hungary', 'hungaria', 'ru', 'rus', 'russian federation', 'russia', 'rs', 'sk', 'svk', 'slovakia', 'slovak republic', 'ua', 'ukr', 'ukraine', 'kz', 'kaz', 'kazakhstan', 'lv', 'lva', 'latvia', 'lt', 'ltu', 'lithuania', 'mk', 'mkd', 'macedonia', 'republic of macedonia', 'turkmenistan', 'balkans', 'moscow', 'uzbekistan', 'tajikistan', 'kyrgyzstan', 'krygystan', 'kgz', 'turkey', 'republic of turkey', 'li', 'lie', 'liechtenstein' }) && opIn(t.custom1, new Set<String> { 'commercial' }))      return 'a304u000002pkzvAAA'; //Patch Catch All EMEA Comm DACH + EE - GEO Based
    if(opIn(t.country, new Set<String> { 'de', 'deu', 'germany', 'deutschland' }) && opIn(t.custom1, new Set<String> { 'commercial' }))      return 'a304u000002pkzwAAA'; //Patch Catch All EMEA Comm Germany - GEO Based
    if(opIn(t.country, new Set<String> { 'nl', 'nld', 'netherlands', 'the netherlands', 'holland', 'north holland', 'be', 'bel', 'belgium', 'lu', 'lux', 'luxembourg', 'luxemburg', 'no', 'nor', 'norway', 'dk', 'dnk', 'denmark', 'is', 'isl', 'iceland', 'fi', 'fin', 'finland', 'se', 'swe', 'sweden' }) && opIn(t.custom1, new Set<String> { 'smb', 'commercial' }))      return 'a304u000002pkzxAAA'; //Patch Catch All EMEA Comm NEUR - GEO Based
    if(opIn(t.country, new Set<String> { 'fr', 'fra', 'france', 'es', 'esp', 'spain', 'pt', 'prt', 'portugal', 'gibraltar', 'gibraltor', 'andorra', 'principality of andorra', 'ad', 'it', 'ita', 'italy', 'italia', 'san marino', 'san marino holy see', 'mt', 'malta', 'mc', 'mco', 'monaco', 'gr', 'grc', 'greece', 'french polynesia', 'pf', 'pyf', 'cy', 'cyp', 'cyprus' }) && opIn(t.custom1, new Set<String> { 'commercial' }))      return 'a304u000002pkzyAAA'; //Patch Catch All EMEA Comm SEUR - GEO Based
    if(opIn(t.country, new Set<String> { 'northern ireland', 'nir', 'ie', 'irl', 'ireland', 'republic of ireland', 'scotland', 'wales', 'wal', 'sct', 'gb', 'gbr', 'united kingdom', 'uk', 'great britain', 'england' }) && opIn(t.custom1, new Set<String> { 'smb', 'commercial' }))      return 'a304u000002pl00AAA'; //Patch Catch All EMEA Comm UKI - GEO Based
    if(opIn(t.country, new Set<String> { 'de', 'deu', 'germany', 'deutschland', 'austria', 'md', 'moldova', 'moldavia', 'al', 'alb', 'albania', 'am', 'arm', 'armenia', 'az', 'aze', 'azerbaijan', 'by', 'blr', 'belarus', 'ba', 'bih', 'bosnia and herzegowina', 'bosnia and herzegovina', 'bg', 'bgr', 'bulgaria', 'hr', 'hrv', 'croatia', 'hrvatska', 'cz', 'cze', 'czech republic', 'ee', 'est', 'estonia', 'ge', 'geo', 'georgia', 'hu', 'hun', 'hungary', 'hungaria', 'pl', 'pol', 'poland', 'ro', 'rom', 'romania', 'ru', 'rus', 'russian federation', 'russia', 'rs', 'srb', 'serbia', 'sk', 'svk', 'slovakia', 'slovak republic', 'si', 'svn', 'slovenia', 'ua', 'ukr', 'ukraine', 'kz', 'kaz', 'kazakhstan', 'lv', 'lva', 'latvia', 'li', 'lie', 'liechtenstein', 'lt', 'ltu', 'lithuania', 'mk', 'mkd', 'macedonia', 'republic of macedonia', 'montenegro', 'turkmenistan', 'balkans', 'moscow', 'uzbekistan', 'kosovo', 'republic of kosovo', 'tajikistan', 'kyrgyzstan', 'krygystan', 'kgz', 'turkey', 'republic of turkey', 'french polynesia', 'pf', 'pyf', 'fr', 'fra', 'france', 'es', 'esp', 'spain', 'pt', 'prt', 'portugal', 'gibraltar', 'gibraltor', 'andorra', 'principality of andorra', 'ad', 'it', 'ita', 'italy', 'italia' }) && opIn(t.custom1, new Set<String> { 'smb' }))      return 'a304u000002pl01AAA'; //Patch Catch All EMEA SMB South - GEO Based
    if(opIn(t.country, new Set<String> { 'switzerland', 'ch', 'che', 'schweiz', 'pl', 'pol', 'poland', 'md', 'moldova', 'moldavia', 'am', 'arm', 'armenia', 'az', 'aze', 'azerbaijan', 'by', 'blr', 'belarus', 'cz', 'cze', 'czech republic', 'ee', 'est', 'estonia', 'ge', 'geo', 'georgia', 'hu', 'hun', 'hungary', 'hungaria', 'ru', 'rus', 'russian federation', 'russia', 'rs', 'sk', 'svk', 'slovakia', 'slovak republic', 'ua', 'ukr', 'ukraine', 'kz', 'kaz', 'kazakhstan', 'lv', 'lva', 'latvia', 'lt', 'ltu', 'lithuania', 'mk', 'mkd', 'macedonia', 'republic of macedonia', 'turkmenistan', 'balkans', 'moscow', 'uzbekistan', 'tajikistan', 'kyrgyzstan', 'krygystan', 'kgz', 'turkey', 'republic of turkey', 'li', 'lie', 'liechtenstein', 'de', 'deu', 'germany', 'deutschland', 'fr', 'fra', 'france', 'es', 'esp', 'spain', 'pt', 'prt', 'portugal', 'gibraltar', 'gibraltor', 'andorra', 'principality of andorra', 'ad', 'it', 'ita', 'italy', 'italia', 'san marino', 'san marino holy see', 'mt', 'malta', 'mc', 'mco', 'monaco', 'gr', 'grc', 'greece', 'french polynesia', 'pf', 'pyf', 'cy', 'cyp', 'cyprus' }) && opIn(t.custom1, new Set<String> { 'commercial', 'smb' }))      return 'a304u000002igklAAA'; //Patch Catch all EMEA Comm South - Geo Based
    if(opIn(t.custom1, new Set<String> { 'commercial', 'smb' }))      return 'a304u000002pkzuAAA'; //Patch Catch All Commercial - GEO Based
    if(prematches.get('Country').contains('a3170000002l2ncAAA') && opIn(t.custom1, new Set<String> { 'general business', 'enterprise', 'large enterprise', 'corp sales', 'terr sales', 'corporate sales', 'territory sales', 'major', 'commercial', 'smb' }))      return 'a3070000000Tjy6AAC'; //Patch Catch All - APAC
    if(prematches.get('Country').contains('a3170000002l2sNAAQ') && opIn(t.custom1, new Set<String> { 'general business', 'enterprise', 'large enterprise', 'corp sales', 'terr sales', 'corporate sales', 'territory sales', 'major', 'commercial' }))      return 'a3070000000TjyLAAS'; //Patch Catch All - EMEA
    if(opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }) && opIn(t.custom1, new Set<String> { 'general business', 'enterprise', 'large enterprise', 'corp sales', 'terr sales', 'corporate sales', 'territory sales', 'major', 'commercial', 'smb' }))      return 'a3070000000TjxhAAC'; //Patch Catch All - US - GEO Based
    return 'a3070000000TSgfAAG'; //Patch ROW
    return null;
  }
  //returns the matched patch
  global PatchDataModel.PatchInfo match(PatchDataModel.MatchTarget t)
  {
    Id result = null;
    prematches = prematchList(t);
    result = matchGroup1(t);
    if(result != null) return processResult(result);
    result = matchGroup2(t);
    if(result != null) return processResult(result);
    result = matchGroup3(t);
    if(result != null) return processResult(result);
    result = matchGroup4(t);
    if(result != null) return processResult(result);
    return null;
  }
}