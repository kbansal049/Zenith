/*
 * This class is generated dynamically from Patch Rules.
 */
global class PatchRuleEngine7 extends  PatchRuleEngineBase implements IPatchRuleEngine
{
  private Id matchGroup1(PatchDataModel.MatchTarget t)
  {
    if(prematches.get('Company Name').contains('a314u00000NyTbFAAV') || prematches.get('Email Domain').contains('a314u00000NyTbGAAV'))      return 'a304u000002pkvMAAQ'; //Patch ENT UK&I C6 - Named Accounts
    if(prematches.get('Company Name').contains('a314u00000NyTbHAAV') || prematches.get('Email Domain').contains('a314u00000NyTbIAAV'))      return 'a304u000002pkvNAAQ'; //Patch ENT UK&I C7 - Named Accounts
    if(prematches.get('Company Name').contains('a314u00000NyTQhAAN') || prematches.get('Email Domain').contains('a314u00000NyTQiAAN'))      return 'a304u000002pkvOAAQ'; //Patch Catch All ENT ANZ - Named Accounts
    if(prematches.get('Company Name').contains('a314u00000NyTQjAAN') || prematches.get('Email Domain').contains('a314u00000NyTQkAAN'))      return 'a304u000002pkvPAAQ'; //Patch Catch All ENT ASEAN - Named Accounts
    if(prematches.get('Company Name').contains('a314u00000NyTQlAAN') || prematches.get('Email Domain').contains('a314u00000NyTQmAAN'))      return 'a304u000002pkvQAAQ'; //Patch Catch All ENT Canada - Named Accounts
    if(prematches.get('Company Name').contains('a314u00000NyTQnAAN') || prematches.get('Email Domain').contains('a314u00000NyTQoAAN'))      return 'a304u000002pkvRAAQ'; //Patch Catch All ENT CEUR Alpine - Named Accounts
    if(prematches.get('Company Name').contains('a314u00000NyTQpAAN') || prematches.get('Email Domain').contains('a314u00000NyTQqAAN'))      return 'a304u000002pkvSAAQ'; //Patch Catch All ENT CEUR North - Named Accounts
    if(prematches.get('Company Name').contains('a314u00000NyTQrAAN') || prematches.get('Email Domain').contains('a314u00000NyTQsAAN'))      return 'a304u000002pkvTAAQ'; //Patch Catch All ENT CEUR South - Named Accounts
    if(prematches.get('Company Name').contains('a314u00000NyTQtAAN') || prematches.get('Email Domain').contains('a314u00000NyTQuAAN'))      return 'a304u000002pkvUAAQ'; //Patch Catch All ENT Cross Roads - Named Accounts
    if(prematches.get('Company Name').contains('a314u00000NyTQvAAN') || prematches.get('Email Domain').contains('a314u00000NyTQwAAN'))      return 'a304u000002pkvVAAQ'; //Patch Catch All ENT France - Named Accounts
    if(prematches.get('Company Name').contains('a314u00000NyTQxAAN') || prematches.get('Email Domain').contains('a314u00000NyTQyAAN'))      return 'a304u000002pkvWAAQ'; //Patch Catch All ENT Iberia & Italy - Named Accounts
    if(prematches.get('Company Name').contains('a314u00000NyTQzAAN') || prematches.get('Email Domain').contains('a314u00000NyTR0AAN'))      return 'a304u000002pkvXAAQ'; //Patch Catch All ENT India - Named Accounts
    if(prematches.get('Company Name').contains('a314u00000NyTR1AAN') || prematches.get('Email Domain').contains('a314u00000NyTR2AAN'))      return 'a304u000002pkvYAAQ'; //Patch Catch All Ent Japan - Named Accounts
    if(prematches.get('Company Name').contains('a314u00000NyTR3AAN') || prematches.get('Email Domain').contains('a314u00000NyTR4AAN'))      return 'a304u000002pkvZAAQ'; //Patch Catch All ENT MEA - Named Accounts
    if(prematches.get('Company Name').contains('a314u00000NyTR5AAN') || prematches.get('Email Domain').contains('a314u00000NyTR6AAN'))      return 'a304u000002pkvaAAA'; //Patch Catch All ENT MidAtlantic - Named Accounts
    if(prematches.get('Company Name').contains('a314u00000NyTR7AAN') || prematches.get('Email Domain').contains('a314u00000NyTR8AAN'))      return 'a304u000002pkvbAAA'; //Patch Catch All ENT Midwest - Named Accounts
    if(prematches.get('Company Name').contains('a314u00000NyTR9AAN') || prematches.get('Email Domain').contains('a314u00000NyTRAAA3'))      return 'a304u000002pkvcAAA'; //Patch Catch All ENT NEUR - Named Accounts
    if(prematches.get('Company Name').contains('a314u00000NyTRBAA3') || prematches.get('Email Domain').contains('a314u00000NyTRCAA3'))      return 'a304u000002pkvdAAA'; //Patch Catch All ENT New England - Named Accounts
    if(prematches.get('Company Name').contains('a314u00000NyTRDAA3') || prematches.get('Email Domain').contains('a314u00000NyTREAA3'))      return 'a304u000002pkveAAA'; //Patch Catch All ENT NorCal - Named Accounts
    if(prematches.get('Company Name').contains('a314u00000NyTRFAA3') || prematches.get('Email Domain').contains('a314u00000NyTRGAA3'))      return 'a304u000002pkvfAAA'; //Patch Catch All ENT NY/NJ - Named Accounts
    if(prematches.get('Company Name').contains('a314u00000NyTRHAA3') || prematches.get('Email Domain').contains('a314u00000NyTRIAA3'))      return 'a304u000002pkvgAAA'; //Patch Catch All ENT Ohio Valley - Named Accounts
    if(prematches.get('Company Name').contains('a314u00000NyTRJAA3') || prematches.get('Email Domain').contains('a314u00000NyTRKAA3'))      return 'a304u000002pkvhAAA'; //Patch Catch All ENT PacNW - Named Accounts
    if(prematches.get('Company Name').contains('a314u00000NyTRLAA3') || prematches.get('Email Domain').contains('a314u00000NyTRMAA3'))      return 'a304u000002pkviAAA'; //Patch Catch All ENT Southeast - Named Accounts
    if(prematches.get('Company Name').contains('a314u00000NyTRNAA3') || prematches.get('Email Domain').contains('a314u00000NyTROAA3'))      return 'a304u000002pkvjAAA'; //Patch Catch All ENT Southwest - Named Accounts
    if(prematches.get('Company Name').contains('a314u00000NyTRPAA3') || prematches.get('Email Domain').contains('a314u00000NyTRQAA3'))      return 'a304u000002pkvkAAA'; //Patch Catch All ENT TOLA - Named Accounts
    if(prematches.get('Company Name').contains('a314u00000NyTRRAA3') || prematches.get('Email Domain').contains('a314u00000NyTRSAA3'))      return 'a304u000002pkvlAAA'; //Patch Catch All ENT UK&I - Named Accounts
    if(prematches.get('Company Name').contains('a314u00000NtTRDAA3') || prematches.get('Email Domain').contains('a314u00000NtTRNAA3'))      return 'a304u000002iDO3AAM'; //Patch Catch All ENT ANZ A - Named Accounts
    if(prematches.get('Company Name').contains('a314u00000NtTRIAA3') || prematches.get('Email Domain').contains('a314u00000NtTRSAA3'))      return 'a304u000002iDNyAAM'; //Patch Catch All ENT ANZ B - Named Accounts
    if(prematches.get('Company Name').contains('a314u00000NtTRcAAN') || prematches.get('Email Domain').contains('a314u00000NtTRhAAN'))      return 'a304u000002iDO8AAM'; //Patch Catch All Ent Japan A - Named Accounts
    if(prematches.get('Company Name').contains('a314u00000NtTRmAAN') || prematches.get('Email Domain').contains('a314u00000NtTRrAAN'))      return 'a304u000002iDODAA2'; //Patch Catch All Ent Japan B - Named Accounts
    if(prematches.get('Company Name').contains('a314u00000NtVEKAA3') || prematches.get('Email Domain').contains('a314u00000NtVEPAA3'))      return 'a304u000002ifi0AAA'; //Patch Catch All ENT India A - Named Accounts
    if(prematches.get('Company Name').contains('a314u00000NtVEAAA3') || prematches.get('Email Domain').contains('a314u00000NtVEFAA3'))      return 'a304u000002ifi5AAA'; //Patch Catch All ENT India B - Named Accounts
    if(((opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }) && opContain(t.custom3, '.mil')) || (opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }) && opEqual(t.industry, 'Federal'))))      return 'a304u000002mpIBAAY'; //Patch Catch All - Federal - GEO Based
    if(opIn(t.custom1, new Set<String> { 'major' }) && opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }) && opIn(t.state, new Set<String> { 'tn', 'tennessee', 'ky', 'kentucky', 'south carolina', 'sc', 'nc', 'north carolina' }))      return 'a304u000002pkvmAAA'; //Patch Catch All Appalachian Major - GEO Based
    if(opIn(t.custom1, new Set<String> { 'major' }) && opIn(t.country, new Set<String> { 'de', 'deu', 'germany', 'deutschland', 'austria', 'md', 'moldova', 'moldavia', 'al', 'alb', 'albania', 'am', 'arm', 'armenia', 'az', 'aze', 'azerbaijan', 'by', 'blr', 'belarus', 'ba', 'bih', 'bosnia and herzegowina', 'bosnia and herzegovina', 'bg', 'bgr', 'bulgaria', 'hr', 'hrv', 'croatia', 'hrvatska', 'cz', 'cze', 'czech republic', 'ee', 'est', 'estonia', 'ge', 'geo', 'georgia', 'hu', 'hun', 'hungary', 'hungaria', 'pl', 'pol', 'poland', 'ro', 'rom', 'romania', 'ru', 'rus', 'russian federation', 'russia', 'rs', 'srb', 'serbia', 'sk', 'svk', 'slovakia', 'slovak republic', 'si', 'svn', 'slovenia', 'ua', 'ukr', 'ukraine', 'kz', 'kaz', 'kazakhstan', 'lv', 'lva', 'latvia', 'li', 'lie', 'liechtenstein', 'lt', 'ltu', 'lithuania', 'mk', 'mkd', 'macedonia', 'republic of macedonia', 'montenegro', 'turkmenistan', 'balkans', 'moscow', 'uzbekistan', 'kosovo', 'republic of kosovo', 'tajikistan', 'kyrgyzstan', 'krygystan', 'kgz', 'turkey', 'republic of turkey', 'switzerland', 'ch', 'che', 'schweiz' }))      return 'a304u000002pkvnAAA'; //Patch Catch All CEUR Major - GEO Based
    return null;
  }
  private Id matchGroup2(PatchDataModel.MatchTarget t)
  {
    if(opIn(t.custom1, new Set<String> { 'major' }) && opIn(t.country, new Set<String> { 'fr', 'fra', 'france' }))      return 'a304u000002pkvoAAA'; //Patch Catch All France Major / LE - GEO Based
    if(opIn(t.custom1, new Set<String> { 'large enterprise' }) && opIn(t.country, new Set<String> { 'fr', 'fra', 'france' }))      return 'a304u000002igaWAAQ'; //Patch Catch All France LE - GEO Based
    if(opIn(t.custom1, new Set<String> { 'major' }) && opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }) && opIn(t.state, new Set<String> { 'north dakota', 'nd', 'south dakota', 'sd', 'minnesota', 'mn', 'wisonsin', 'wi', 'iowa', 'ia', 'nebraska', 'ne' }))      return 'a304u000002pkvpAAA'; //Patch Catch All Heartland Major - GEO Based
    if(opIn(t.custom1, new Set<String> { 'major' }) && opIn(t.country, new Set<String> { 'es', 'esp', 'spain', 'pt', 'prt', 'portugal', 'gibraltar', 'gibraltor', 'andorra', 'principality of andorra', 'ad', 'mt', 'malta' }))      return 'a304u000002pkvqAAA'; //Patch Catch All Iberia Major / LE - GEO Based
    if(opIn(t.custom1, new Set<String> { 'large enterprise' }) && opIn(t.country, new Set<String> { 'es', 'esp', 'spain', 'pt', 'prt', 'portugal', 'gibraltar', 'gibraltor', 'andorra', 'principality of andorra', 'ad', 'mt', 'malta' }))      return 'a304u000002igaMAAQ'; //Patch Catch All Iberia LE - GEO Based
    if(opIn(t.custom1, new Set<String> { 'major' }) && opIn(t.country, new Set<String> { 'it', 'ita', 'italy', 'italia', 'san marino', 'holy see', 'mt', 'malta', 'mc', 'mco', 'monaco', 'gr', 'grc', 'greece', 'french polynesia', 'pf', 'pyf', 'cy', 'cyp', 'cyprus' }))      return 'a304u000002pkvrAAA'; //Patch Catch All Italy Major / LE - GEO Based
    if(opIn(t.custom1, new Set<String> { 'large enterprise' }) && opIn(t.country, new Set<String> { 'it', 'ita', 'italy', 'italia', 'san marino', 'holy see', 'mt', 'malta', 'mc', 'mco', 'monaco', 'gr', 'grc', 'greece', 'french polynesia', 'pf', 'pyf', 'cy', 'cyp', 'cyprus' }))      return 'a304u000002iga7AAA'; //Patch Catch All Italy LE - GEO Accounts
    if(opIn(t.custom1, new Set<String> { 'major' }) && opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }) && opIn(t.state, new Set<String> { 'delaware', 'de', 'maryland', 'md', 'virginia', 'va', 'dc', 'dist of columbia', 'district of columbia' }))      return 'a304u000002pkvsAAA'; //Patch Catch All MA Major - GEO Based
    if(opIn(t.custom1, new Set<String> { 'major' }) && opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }) && opIn(t.state, new Set<String> { 'illinois', 'il' }))      return 'a304u000002pkvtAAA'; //Patch Catch All MW Major - GEO Based
    if(opIn(t.custom1, new Set<String> { 'major' }) && opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }) && opIn(t.state, new Set<String> { 'massachusetts', 'ma', 'ct', 'connecticut', 'ri', 'rhode island', 'me', 'maine', 'vt', 'vermont', 'nh', 'new hampshire' }))      return 'a304u000002pkvuAAA'; //Patch Catch All New England Major - GEO Based
    if(opIn(t.custom1, new Set<String> { 'major' }) && opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }) && opIn(t.state, new Set<String> { 'new jersey', 'nj' }))      return 'a304u000002pkvvAAA'; //Patch Catch All NY/NJ Major 1 - GEO Based
    if(opIn(t.custom1, new Set<String> { 'major' }) && opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }) && opIn(t.state, new Set<String> { 'indiana', 'in', 'kansas', 'ks', 'missouri', 'ms' }))      return 'a304u000002pkvwAAA'; //Patch Catch All OV Major 1 - GEO Based
    if(opIn(t.custom1, new Set<String> { 'major' }) && opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }) && opIn(t.state, new Set<String> { 'alaska', 'ak', 'washington', 'wa', 'oregon', 'or', 'idaho', 'id', 'montana', 'mt', 'utah', 'ut', 'wyoming', 'wy' }))      return 'a304u000002pkvxAAA'; //Patch Catch All Pacific Major 1 - GEO Based
    if(opIn(t.custom1, new Set<String> { 'major' }) && opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }) && opIn(t.state, new Set<String> { 'arizona', 'az', 'new mexico', 'nm', 'colorado', 'co', 'nevada', 'nv', 'hawaii', 'hi' }))      return 'a304u000002pkvyAAA'; //Patch Catch All Pacific Major 2 - GEO Based
    if(opIn(t.custom1, new Set<String> { 'major' }) && opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }) && opIn(t.state, new Set<String> { 'georgia', 'ga', 'alabama', 'al', 'mississippi', 'ms', 'florida', 'fl' }))      return 'a304u000002pkvzAAA'; //Patch Catch All Southeast Major - GEO Based
    if(opIn(t.custom1, new Set<String> { 'large enterprise' }) && opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }) && opIn(t.state, new Set<String> { 'texas', 'tx', 'louisiana', 'la', 'oklahoma', 'arkansas', 'ar' }))      return 'a304u000002pkw0AAA'; //Patch Catch All TOLA Major - GEO Based
    if(opIn(t.custom1, new Set<String> { 'large enterprise', 'major' }) && opIn(t.country, new Set<String> { 'au', 'aus', 'australia', 'new caledonia', 'new caledonia (french)', 'nc', 'ncl', 'micronesia', 'papua new guinea', 'vanuatu', 'vanautu', 'tuvalu', 'solomon islands', 'kiribati', 'nz', 'nzl', 'new zealand', 'fiji', 'fiji islands', 'fji', 'fji. fji', 'cook islands', 'cok', 'guam' }))      return 'a304u000002pkw1AAA'; //Patch Catch All ANZ overflow - GEO Based
    if(opIn(t.custom1, new Set<String> { 'large enterprise' }) && opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }) && opIn(t.state, new Set<String> { 'south carolina', 'sc', 'nc', 'north carolina' }))      return 'a304u000002pkw2AAA'; //Patch Catch All Appalachian LE - GEO Based
    if(opIn(t.custom1, new Set<String> { 'large enterprise' }) && opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }) && opIn(t.state, new Set<String> { 'tn', 'tennessee', 'ky', 'kentucky' }))      return 'a304u000002pkw3AAA'; //Patch Catch All Appalachian LE 2 - GEO Based
    if(opIn(t.custom1, new Set<String> { 'large enterprise', 'major' }) && opIn(t.country, new Set<String> { 'sg', 'sgp', 'singapore', 'my', 'mys', 'malaysia', 'ph', 'phl', 'philippines', 'hk', 'hkg', 'hong kong', 'china', 'taiwan', 'province of china', 'tw', 'twn', 'macau', 'south korea', 'kr', '\'korea', 'republic of\'', 'korea', 'republic of korea', 'id', 'idn', 'indonesia', 'cambodia', 'khm', 'mm', 'mmr', 'myanmar', 'burma', 'brunei darussalam', 'brunei', 'mongolia', 'vietnam', 'vn', 'viet nam', 'th', 'tha', 'thailand' }))      return 'a304u000002pkw4AAA'; //Patch Catch All ASEAN overflow - GEO Based
    if(opIn(t.custom1, new Set<String> { 'large enterprise', 'major' }) && opIn(t.country, new Set<String> { 'be', 'bel', 'belgium', 'lu', 'lux', 'luxembourg', 'luxemburg' }))      return 'a304u000002pkw5AAA'; //Patch Catch All Belux - GEO Based
    if(opIn(t.custom1, new Set<String> { 'large enterprise' }) && opIn(t.country, new Set<String> { 'austria', 'md', 'moldova', 'moldavia', 'al', 'alb', 'albania', 'am', 'arm', 'armenia', 'az', 'aze', 'azerbaijan', 'by', 'blr', 'belarus', 'ba', 'bih', 'bosnia and herzegowina', 'bosnia and herzegovina', 'bg', 'bgr', 'bulgaria', 'hr', 'hrv', 'croatia', 'hrvatska', 'cz', 'cze', 'czech republic', 'ee', 'est', 'estonia', 'ge', 'geo', 'georgia', 'hu', 'hun', 'hungary', 'hungaria', 'pl', 'pol', 'poland', 'ro', 'rom', 'romania', 'ru', 'rus', 'russian federation', 'russia', 'rs', 'srb', 'serbia', 'sk', 'svk', 'slovakia', 'slovak republic', 'si', 'svn', 'slovenia', 'ua', 'ukr', 'ukraine', 'kz', 'kaz', 'kazakhstan', 'lv', 'lva', 'latvia', 'li', 'lie', 'liechtenstein', 'lt', 'ltu', 'lithuania', 'mk', 'mkd', 'macedonia', 'republic of macedonia', 'montenegro', 'turkmenistan', 'balkans', 'moscow', 'uzbekistan', 'kosovo', 'republic of kosovo', 'tajikistan', 'kyrgyzstan', 'krygystan', 'kgz', 'turkey', 'republic of turkey', 'switzerland', 'ch', 'che', 'schweiz' }))      return 'a304u000002pkw6AAA'; //Patch Catch All CEUR South LE - GEO Based
    if(opIn(t.custom1, new Set<String> { 'large enterprise', 'major' }) && opIn(t.country, new Set<String> { 'dk', 'dnk', 'denmark' }))      return 'a304u000002pkw7AAA'; //Patch Catch All Denmark - GEO Based
    if(opIn(t.custom1, new Set<String> { 'enterprise' }) && opIn(t.country, new Set<String> { 'au', 'aus', 'australia', 'new caledonia', 'new caledonia (french)', 'nc', 'ncl', 'micronesia', 'papua new guinea', 'vanuatu', 'vanautu', 'tuvalu', 'solomon islands', 'kiribati', 'nz', 'nzl', 'new zealand', 'fiji', 'fiji islands', 'fji', 'fji. fji', 'cook islands', 'cok', 'guam' }))      return 'a304u000002pkw8AAA'; //Patch Catch All ENT ANZ - GEO Based
    if(opIn(t.custom1, new Set<String> { 'enterprise' }) && opIn(t.country, new Set<String> { 'sg', 'sgp', 'singapore', 'my', 'mys', 'malaysia', 'hk', 'hkg', 'hong kong', 'china', 'taiwan', 'province of china', 'tw', 'twn', 'th', 'tha', 'thailand', 'philippines', 'republic of the philippines', 'ph', 'indonesia', 'vietnam', 'vietman' }))      return 'a304u000002pkw9AAA'; //Patch Catch All ENT ASEAN - GEO Based
    if(opIn(t.custom1, new Set<String> { 'enterprise' }) && opIn(t.country, new Set<String> { 'ca', 'canada' }))      return 'a304u000002pkwAAAQ'; //Patch Catch All ENT Canada - GEO Based
    if(opIn(t.custom1, new Set<String> { 'enterprise' }) && opIn(t.country, new Set<String> { 'austria', 'md', 'moldova', 'moldavia', 'al', 'alb', 'albania', 'am', 'arm', 'armenia', 'az', 'aze', 'azerbaijan', 'by', 'blr', 'belarus', 'ba', 'bih', 'bosnia and herzegowina', 'bosnia and herzegovina', 'bg', 'bgr', 'bulgaria', 'hr', 'hrv', 'croatia', 'hrvatska', 'cz', 'cze', 'czech republic', 'ee', 'est', 'estonia', 'ge', 'geo', 'georgia', 'hu', 'hun', 'hungary', 'hungaria', 'pl', 'pol', 'poland', 'ro', 'rom', 'romania', 'ru', 'rus', 'russian federation', 'russia', 'rs', 'srb', 'serbia', 'sk', 'svk', 'slovakia', 'slovak republic', 'si', 'svn', 'slovenia', 'ua', 'ukr', 'ukraine', 'kz', 'kaz', 'kazakhstan', 'lv', 'lva', 'latvia', 'li', 'lie', 'liechtenstein', 'lt', 'ltu', 'lithuania', 'mk', 'mkd', 'macedonia', 'republic of macedonia', 'montenegro', 'turkmenistan', 'balkans', 'moscow', 'uzbekistan', 'kosovo', 'republic of kosovo', 'tajikistan', 'kyrgyzstan', 'krygystan', 'kgz', 'turkey', 'republic of turkey', 'switzerland', 'ch', 'che', 'schweiz' }))      return 'a304u000002pkwBAAQ'; //Patch Catch All ENT CEUR Alpine - GEO Based
    if(opIn(t.custom1, new Set<String> { 'enterprise' }) && opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }) && opIn(t.state, new Set<String> { 'tn', 'tennessee', 'ky', 'kentucky', 'south carolina', 'sc', 'nc', 'north carolina', 'kansas', 'ks', 'missouri', 'mo' }))      return 'a304u000002pkwCAAQ'; //Patch Catch All ENT Cross Roads - GEO Based
    if(opIn(t.custom1, new Set<String> { 'enterprise' }) && opIn(t.country, new Set<String> { 'fr', 'fra', 'france' }))      return 'a304u000002pkwDAAQ'; //Patch Catch All ENT France - GEO Based
    if(opIn(t.custom1, new Set<String> { 'enterprise' }) && opIn(t.country, new Set<String> { 'es', 'esp', 'spain', 'pt', 'prt', 'portugal', 'gibraltar', 'gibraltor', 'andorra', 'principality of andorra', 'ad', 'it', 'ita', 'italy', 'italia', 'san marino', 'san marino holy see', 'mt', 'malta', 'mc', 'mco', 'monaco', 'gr', 'grc', 'greece', 'french polynesia', 'pf', 'pyf', 'cy', 'cyp', 'cyprus' }))      return 'a304u000002pkwEAAQ'; //Patch Catch All ENT Iberia & Italy - GEO Based
    if((opIn(t.country, new Set<String> { 'ind', 'india', 'in' }) && opIn(t.state, new Set<String> { 'telangana', 'andhra pradesh', 'tamil nadu', 'gujarat', 'karnataka', 'madhya pradesh', 'abc', 'odisha', 'orissa', 'west bengal', 'uttarakhand', 'kerala', 'arunachal pradesh', 'assam', 'tn', 'goa', 'bihar', 'kolkata' }) && opIn(t.custom1, new Set<String> { 'enterprise' })) || (opIn(t.custom1, new Set<String> { 'enterprise' }) && opIn(t.country, new Set<String> { 'bangladesh', 'sri lanka', 'pakistan' })))      return 'a304u000002iDONAA2'; //Patch Catch All ENT India A - GEO Based
    if(opIn(t.country, new Set<String> { 'ind', 'india', 'in' }) && opIn(t.custom1, new Set<String> { 'enterprise' }) && opIn(t.state, new Set<String> { 'maharashtra', 'haryana', 'delhi', 'uttar pradesh', 'western province', 'rajasthan', 'chhattisgarh', 'punjab', 'jharkhand', 'new delhi', 'up', 'himachal pradesh', 'mumbai', 'chandigarh', 'mh' }))      return 'a304u000002iDOIAA2'; //Patch Catch All ENT India B - GEO Based
    if(opIn(t.custom1, new Set<String> { 'enterprise' }) && opIn(t.country, new Set<String> { 'ind', 'india', 'in', 'bangladesh', 'sri lanka' }))      return 'a304u000002pkwFAAQ'; //Patch Catch All ENT India - GEO Based
    if(opIn(t.custom1, new Set<String> { 'enterprise' }) && opIn(t.country, new Set<String> { 'jp', 'jpn', 'japan', 'south korea', 'kr', '\'korea', 'republic of\'', 'korea', 'republic of korea' }))      return 'a304u000002pkwGAAQ'; //Patch Catch All Ent Japan - GEO Based
    if(opIn(t.custom1, new Set<String> { 'enterprise' }) && opIn(t.country, new Set<String> { 'israel', 'egypt', 'libya', 'tunisia', 'central african republic', 'seychelles', 'madagascar', 'congo', 'senegal', 'gambia', 'cameroon', 'mauritius', 'uganda', 'angola', 'malawi', 'benin', 'somalia', 'mauritania', 'burundi', 'gabon', 'mali', 'swaziland', 'togo', 'tanzania', 'liberia', 'côte d\'ivoire', 'ivory coast', 'lesotho', 'burkina faso', 'ng', 'nga', 'nigeria', 'ke', 'ken', 'kenya', 'dza', 'algeria', 'morocco', 'gh', 'ghana', 'bw', 'bwa', 'botswana', 'cv', 'cpv', 'cape verde', 'et', 'eth', 'ethiopia', 'na', 'nam', 'namibia', 'za', 'zaf', 'south africa', 'ss', 'ssd', 'south sudan', 'sd', 'sdn', 'sudan', 'zmb', 'zambia', 'zimbabwe', 'zwe', 'zwecomoros', 'comoros', 'com', 'mozambique', 'mz', 'eritrea', 'chad', 'rwanda', 'bhr', 'bahrain', 'dubai', 'united arab emirates', 'uae', 'kw', 'kuwait', 'af', 'afghanistan', 'iran', 'iran, islamic republic of', 'iraq', 'jordon', 'jordan', 'jo', 'lebanon', 'palestine', 'palestina', 'saudi arabia', 'ksa', 'syria', 'yemen', 'tajikistan', 'qatar', 'oman' }))      return 'a304u000002pkwHAAQ'; //Patch Catch All ENT MEA - GEO Based
    return null;
  }
  private Id matchGroup3(PatchDataModel.MatchTarget t)
  {
    if(opIn(t.custom1, new Set<String> { 'enterprise' }) && opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }) && opIn(t.state, new Set<String> { 'dc', 'dist of columbia', 'district of columbia', 'de', 'delaware', 'md', 'maryland', 'va', 'virginia', 'west virginia', 'wv' }))      return 'a304u000002pkwIAAQ'; //Patch Catch All ENT MidAtlantic - GEO Based
    if(opIn(t.custom1, new Set<String> { 'enterprise' }) && opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }) && opIn(t.state, new Set<String> { 'il', 'illinois', 'minnesota', 'mn', 'iowa', 'ia', 'north dakota', 'nd', 'south dakota', 'sd', 'ne', 'nebraska' }))      return 'a304u000002pkwJAAQ'; //Patch Catch All ENT Midwest - GEO Based
    if(opIn(t.custom1, new Set<String> { 'enterprise' }) && opIn(t.country, new Set<String> { 'nl', 'nld', 'netherlands', 'the netherlands', 'holland', 'north holland', 'be', 'bel', 'belgium', 'lu', 'lux', 'luxembourg', 'luxemburg', 'no', 'nor', 'norway', 'dk', 'dnk', 'denmark', 'is', 'isl', 'iceland', 'fi', 'fin', 'finland', 'se', 'swe', 'sweden' }))      return 'a304u000002pkwKAAQ'; //Patch Catch All ENT NEUR - GEO Based
    if(opIn(t.custom1, new Set<String> { 'enterprise' }) && opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }) && opIn(t.state, new Set<String> { 'massachusetts', 'ma', 'ct', 'connecticut', 'ri', 'rhode island', 'me', 'maine', 'vt', 'vermont', 'nh', 'new hampshire' }))      return 'a304u000002pkwLAAQ'; //Patch Catch All ENT New England - GEO Based
    if(opIn(t.custom1, new Set<String> { 'enterprise' }) && opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }) && opIn(t.state, new Set<String> { 'hawaii', 'hi' }))      return 'a304u000002pkwMAAQ'; //Patch Catch All ENT NorCal - GEO Based
    if(opIn(t.custom1, new Set<String> { 'enterprise' }) && opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }) && opIn(t.state, new Set<String> { 'new jersey', 'nj' }))      return 'a304u000002pkwNAAQ'; //Patch Catch All ENT NY/NJ - GEO Based
    if(opIn(t.custom1, new Set<String> { 'enterprise' }) && opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }) && opIn(t.state, new Set<String> { 'michigan', 'mi', 'indiana', 'in', 'ohio', 'oh', 'wisconsin', 'wi' }))      return 'a304u000002pkwOAAQ'; //Patch Catch All ENT Ohio Valley - GEO Based
    if(opIn(t.custom1, new Set<String> { 'enterprise' }) && opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }) && opIn(t.state, new Set<String> { 'washington', 'wa', 'alaska', 'ak', 'oregon', 'or', 'idaho', 'id', 'colorado', 'co', 'nevada', 'nv', 'montana', 'mt', 'utah', 'wyoming', 'wy' }))      return 'a304u000002pkwPAAQ'; //Patch Catch All ENT PacNW - GEO Based
    if(opIn(t.custom1, new Set<String> { 'enterprise' }) && opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }) && opIn(t.state, new Set<String> { 'florida', 'fl', 'georgia', 'ga', 'alabama', 'al', 'mississippi', 'ms' }))      return 'a304u000002pkwQAAQ'; //Patch Catch All ENT Southeast - GEO Based
    if(opIn(t.custom1, new Set<String> { 'enterprise' }) && opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }) && opIn(t.state, new Set<String> { 'arizona', 'az', 'new mexico', 'nm' }))      return 'a304u000002pkwRAAQ'; //Patch Catch All ENT Southwest - GEO Based
    if(opIn(t.custom1, new Set<String> { 'enterprise' }) && opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }) && opIn(t.state, new Set<String> { 'texas', 'tx', 'oklahoma', 'ok', 'louisiana', 'la', 'arkansas', 'ar' }))      return 'a304u000002pkwSAAQ'; //Patch Catch All ENT TOLA - GEO Based
    if(opIn(t.custom1, new Set<String> { 'enterprise' }) && opIn(t.country, new Set<String> { 'gb', 'gbr', 'united kingdom', 'uk', 'great britain', 'england', 'northern ireland', 'nir', 'ie', 'irl', 'ireland', 'republic of ireland', 'scotland', 'wales', 'wal', 'sct' }))      return 'a304u000002pkwTAAQ'; //Patch Catch All ENT UK&I - GEO Based
    if(opIn(t.custom1, new Set<String> { 'large enterprise', 'major' }) && opIn(t.country, new Set<String> { 'fi', 'fin', 'finland' }))      return 'a304u000002pkwUAAQ'; //Patch Catch All Finland - GEO Based
    if(opIn(t.custom1, new Set<String> { 'large enterprise', 'major' }) && opIn(t.country, new Set<String> { 'hk', 'hkg', 'hong kong', 'china', 'taiwan', 'province of china', 'tw', 'twn', 'macau' }))      return 'a304u000002pkwVAAQ'; //Patch Catch All GCR Overflow - GEO Based
    if(opIn(t.custom1, new Set<String> { 'large enterprise' }) && opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }) && opIn(t.state, new Set<String> { 'georgia', 'ga', 'alabama', 'al', 'mississippi', 'ms' }))      return 'a304u000002pkwWAAQ'; //Patch Catch All Georgia LE - GEO Based
    if(opIn(t.custom1, new Set<String> { 'large enterprise' }) && opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }) && opIn(t.state, new Set<String> { 'north dakota', 'nd', 'south dakota', 'sd', 'minnesota', 'mn', 'wisonsin', 'wi', 'iowa', 'ia', 'nebraska', 'ne' }))      return 'a304u000002pkwXAAQ'; //Patch Catch All Heartland LE - GEO Based
    if(opIn(t.custom1, new Set<String> { 'large enterprise', 'major' }) && opIn(t.country, new Set<String> { 'jp', 'jpn', 'japan', 'south korea', 'kr', '\'korea', 'republic of\'', 'korea', 'republic of korea' }))      return 'a304u000002pkwYAAQ'; //Patch Catch All Japan LE - GEO Based
    if(opIn(t.custom1, new Set<String> { 'enterprise', 'large enterprise', 'major' }) && opIn(t.country, new Set<String> { 'cl', 'chl', 'chile', 'co', 'col', 'colombia' }))      return 'a304u000002pkwZAAQ'; //Patch Catch All LATAM 3 - GEO Based
    if(opIn(t.custom1, new Set<String> { 'enterprise', 'large enterprise', 'major' }) && opIn(t.country, new Set<String> { 'cr', 'cri', 'costa rica', 'sv', 'slv', 'gq', 'gnq', 'hn', 'hnd', 'honduras', 'el salvador', 'gt', 'gtm', 'guatemala', 'ni', 'nic', 'nicaragua', 'pa', 'pan', 'panama', 'bz', 'blz', 'belize', 'bermuda', 'bm', 'jm', 'jam', 'jamaica', 'pm', 'pr', 'pri', 'pry', 'puerto rico', 'do', 'dom', 'dominican republic', 'cym', 'cayman islands', 'tc', 'tca', 'trinidad and tobago', 'tt', 'tto', 'turks and caicos islands', 'bs', 'bhs', 'bahamas', 'saint kitts and nevis', 'saint kitts & nevis anguilla', 'saint lucia', 'antigua and barbuda', 'antigua/barbuda', 'aw', 'abw', 'aruba', 'bb', 'brb', 'barbados', 'maf', 'martinique', 'mf', 'mq', 'mtq', 'west indies', 'grenada', 'ag', 'ai', 'aia', 'angola anguilla', 'anguilla', 'aq', 'ata', 'atg', 'bes', 'bl', 'blm', 'bmu', 'sint eustatius and saba', 'bq', 'british virgin islands', 'curacao', 'cuw', 'cw', 'dm', 'dma', 'french guiana', 'gf', 'glp', 'gp', 'gs', 'guadeloupe', 'guf', 'kn', 'kna', 'ky', 'lc', 'lca', 'saint barthelemy', 'saint helena', 'ascension and tristan da cunha', 'saint martin (french part)', 'saint pierre and miquelon', 'saint vincent and the grenadines', 'san marino', 'sao tome and principe', 'sh', 'shn', 'sint maarten (dutch part)', 'sm', 'smr', 'south georgia and the south sandwich islands', 'spm', 'sr', 'st', 'stp', 'sx', 'sxm', 'vc', 'vct', 'vg', 'vgb', 'vi vir', 'virgin islands (british)', 'virgin islands (u.s.)', 'virgin islands (usa)', 'wallis and futuna', 'wf', 'wlf', 'cu', 'cub', 'cuba', 'equatorial guinea', 'fk', 'flk', 'falkland islands', 'malvinas', 'gn', 'gin', 'guinea', 'gw', 'gnb', 'guinea-bissau', 'ht', 'hti', 'haiti', 'american samoa', 'united states minor outlying islands', 'st. pierre and miquelon', 'ar', 'arg', 'argentina', 'pe', 'per', 'peru', 've', 'ven', 'venezuela', 'venezuela (bolivarian republic of)', 'ec', 'ecu', 'ecuador', 'bo', 'bol', 'bolivia', 'bolivia (plurinational state of)', 'bonaire', 'paraguay', 'uy', 'ury', 'uruguay', 'antarctica', 'gy', 'guy', 'guyana', 'sur', 'suriname', '' }))      return 'a304u000002pkwaAAA'; //Patch Catch All LATAM 4 - GEO Based
    if(opIn(t.custom1, new Set<String> { 'large enterprise', 'major' }) && opIn(t.country, new Set<String> { 'gb', 'gbr', 'united kingdom', 'uk', 'great britain', 'england', 'northern ireland', 'nir', 'ie', 'irl', 'ireland', 'republic of ireland', 'scotland', 'wales', 'wal', 'sct' }))      return 'a304u000002pkwbAAA'; //Patch Catch All LE UK&I - GEO Based
    if(opIn(t.custom1, new Set<String> { 'large enterprise' }) && opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }) && opIn(t.state, new Set<String> { 'maryland', 'md', 'virginia', 'va', 'dc', 'dist of columbia', 'district of columbia' }))      return 'a304u000002pkwcAAA'; //Patch Catch All MA LE 2 - GEO Based
    if(opIn(t.custom1, new Set<String> { 'large enterprise', 'major' }) && opIn(t.country, new Set<String> { 'israel', 'egypt', 'libya', 'tunisia', 'central african republic', 'seychelles', 'madagascar', 'congo', 'senegal', 'gambia', 'cameroon', 'mauritius', 'uganda', 'angola', 'malawi', 'benin', 'somalia', 'mauritania', 'burundi', 'gabon', 'mali', 'swaziland', 'togo', 'tanzania', 'liberia', 'côte d\'ivoire', 'ivory coast', 'lesotho', 'burkina faso', 'ng', 'nga', 'nigeria', 'ke', 'ken', 'kenya', 'dza', 'algeria', 'morocco', 'gh', 'ghana', 'bw', 'bwa', 'botswana', 'cv', 'cpv', 'cape verde', 'et', 'eth', 'ethiopia', 'na', 'nam', 'namibia', 'za', 'zaf', 'south africa', 'ss', 'ssd', 'south sudan', 'sd', 'sdn', 'sudan', 'zmb', 'zambia', 'zimbabwe', 'zwe', 'zwecomoros', 'comoros', 'com', 'mozambique', 'mz', 'eritrea', 'chad', 'rwanda', 'bhr', 'bahrain', 'dubai', 'united arab emirates', 'uae', 'kw', 'kuwait', 'af', 'afghanistan', 'iran', 'iran, islamic republic of', 'iraq', 'jordon', 'jordan', 'jo', 'lebanon', 'palestine', 'palestina', 'saudi arabia', 'ksa', 'syria', 'yemen', 'tajikistan', 'qatar', 'oman' }))      return 'a304u000002pkwdAAA'; //Patch Catch All ME&A - GEO Based
    if(opIn(t.custom1, new Set<String> { 'major' }) && opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }) && opIn(t.state, new Set<String> { 'kansas', 'ks', 'missouri', 'mo' }))      return 'a304u000002pkweAAA'; //Patch Catch All MW LE 1 - GEO Based
    if(opIn(t.custom1, new Set<String> { 'large enterprise' }) && opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }) && opIn(t.state, new Set<String> { 'illinois', 'il', 'indiana', 'in' }))      return 'a304u000002pkwfAAA'; //Patch Catch All MW LE 2 - GEO Based
    if(opIn(t.custom1, new Set<String> { 'large enterprise', 'major' }) && opIn(t.country, new Set<String> { 'nl', 'nld', 'netherlands', 'the netherlands', 'holland', 'north holland' }))      return 'a304u000002pkwgAAA'; //Patch Catch All Netherlands - GEO Based
    if(opIn(t.custom1, new Set<String> { 'large enterprise' }) && opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }) && opIn(t.state, new Set<String> { 'massachusetts', 'ma', 'ct', 'connecticut', 'ri', 'rhode island', 'me', 'maine', 'vt', 'vermont', 'nh', 'new hampshire' }))      return 'a304u000002pkwhAAA'; //Patch Catch All New England LE 1 - GEO Based
    if(opIn(t.custom1, new Set<String> { 'enterprise', 'large enterprise', 'major' }) && opIn(t.country, new Set<String> { 'mx', 'mex', 'mexico' }))      return 'a304u000002pkwiAAA'; //Patch Catch All North LATAM - GEO Based
    if(opIn(t.custom1, new Set<String> { 'large enterprise' }) && opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }) && opIn(t.state, new Set<String> { 'oklahoma', 'ok', 'arkansas', 'ar' }))      return 'a304u000002pkwjAAA'; //Patch Catch All North TOLA LE - GEO Based
    if(opIn(t.custom1, new Set<String> { 'large enterprise' }) && opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }) && opIn(t.state, new Set<String> { 'alaska', 'ak', 'washington', 'wa', 'oregon', 'or', 'idaho', 'id', 'montana', 'mt', 'utah', 'ut', 'wyoming', 'wy' }))      return 'a304u000002pkwkAAA'; //Patch Catch All Northwest LE - GEO Based
    if(opIn(t.custom1, new Set<String> { 'large enterprise', 'major' }) && opIn(t.country, new Set<String> { 'no', 'nor', 'norway' }))      return 'a304u000002pkwlAAA'; //Patch Catch All Norway - GEO Based
    if(opIn(t.custom1, new Set<String> { 'large enterprise' }) && opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }) && opIn(t.state, new Set<String> { 'new jersey', 'nj' }))      return 'a304u000002pkwmAAA'; //Patch Catch All NY/NJ LE 1 - GEO Based
    if(opIn(t.custom1, new Set<String> { 'large enterprise', 'major' }) && opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }) && opIn(t.state, new Set<String> { 'michigan', 'mi' }))      return 'a304u000002pkwnAAA'; //Patch Catch All OV Michigan - GEO Based
    if(opIn(t.custom1, new Set<String> { 'large enterprise', 'major' }) && opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }) && opIn(t.state, new Set<String> { 'ohio', 'oh' }))      return 'a304u000002pkwoAAA'; //Patch Catch All OV Ohio 2 - GEO Based
    if(opIn(t.custom1, new Set<String> { 'large enterprise' }) && opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }) && opIn(t.state, new Set<String> { 'arizona', 'az', 'new mexico', 'nm', 'colorado', 'co', 'nevada', 'nv' }))      return 'a304u000002pkwpAAA'; //Patch Catch All Rockies LE - GEO Based
    if(opIn(t.custom1, new Set<String> { 'large enterprise' }) && opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }) && opIn(t.state, new Set<String> { 'hawaii', 'hi' }))      return 'a304u000002pkwqAAA'; //Patch Catch All SoCal LE - GEO Based
    return null;
  }
  private Id matchGroup4(PatchDataModel.MatchTarget t)
  {
    if(opIn(t.custom1, new Set<String> { 'enterprise', 'large enterprise', 'major' }) && opIn(t.country, new Set<String> { 'br', 'bra', 'brazil', 'brasil' }))      return 'a304u000002pkwrAAA'; //Patch Catch All South LATAM - GEO Based
    if(opIn(t.custom1, new Set<String> { 'large enterprise' }) && opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }) && opIn(t.state, new Set<String> { 'texas', 'tx', 'louisiana', 'la' }))      return 'a304u000002pkwsAAA'; //Patch Catch All South TOLA LE - GEO Based
    if(opIn(t.custom1, new Set<String> { 'large enterprise' }) && opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }) && opIn(t.state, new Set<String> { 'florida', 'fl' }))      return 'a304u000002pkwtAAA'; //Patch Catch All Southeast LE - GEO Based
    if(opIn(t.custom1, new Set<String> { 'large enterprise', 'major' }) && opIn(t.country, new Set<String> { 'se', 'swe', 'sweden' }))      return 'a304u000002pkwuAAA'; //Patch Catch All Sweden - GEO Based
    if(opIn(t.custom1, new Set<String> { 'enterprise' }) && opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }) && opIn(t.state, new Set<String> { 'ny', 'new york' }))      return 'a304u000002pkwvAAA'; //Patch Catch All AMS ENT East - GEO Based
    if(opIn(t.custom1, new Set<String> { 'enterprise' }) && opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }) && opIn(t.state, new Set<String> { 'ca', 'california' }))      return 'a304u000002pkwwAAA'; //Patch Catch All AMS ENT West - GEO Based
    if(opIn(t.custom1, new Set<String> { 'enterprise' }) && opIn(t.country, new Set<String> { 'de', 'deu', 'germany', 'deutschland' }))      return 'a304u000002pkwxAAA'; //Patch Catch All ENT CEUR - GEO Based
    if(opIn(t.custom1, new Set<String> { 'large enterprise' }) && opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }) && opIn(t.state, new Set<String> { 'california', 'ca' }))      return 'a304u000002pkwyAAA'; //Patch Catch All LE California - GEO Based
    if(opIn(t.custom1, new Set<String> { 'large enterprise', 'major' }) && opIn(t.country, new Set<String> { 'ca', 'canada' }))      return 'a304u000002pkwzAAA'; //Patch Catch All LE Canada - GEO Based
    if(opIn(t.custom1, new Set<String> { 'large enterprise' }) && opIn(t.country, new Set<String> { 'de', 'deu', 'germany', 'deutschland', 'austria', 'md', 'moldova', 'moldavia', 'al', 'alb', 'albania', 'am', 'arm', 'armenia', 'az', 'aze', 'azerbaijan', 'by', 'blr', 'belarus', 'ba', 'bih', 'bosnia and herzegowina', 'bosnia and herzegovina', 'bg', 'bgr', 'bulgaria', 'hr', 'hrv', 'croatia', 'hrvatska', 'cz', 'cze', 'czech republic', 'ee', 'est', 'estonia', 'ge', 'geo', 'georgia', 'hu', 'hun', 'hungary', 'hungaria', 'pl', 'pol', 'poland', 'ro', 'rom', 'romania', 'ru', 'rus', 'russian federation', 'russia', 'rs', 'srb', 'serbia', 'sk', 'svk', 'slovakia', 'slovak republic', 'si', 'svn', 'slovenia', 'ua', 'ukr', 'ukraine', 'kz', 'kaz', 'kazakhstan', 'lv', 'lva', 'latvia', 'li', 'lie', 'liechtenstein', 'lt', 'ltu', 'lithuania', 'mk', 'mkd', 'macedonia', 'republic of macedonia', 'montenegro', 'turkmenistan', 'balkans', 'moscow', 'uzbekistan', 'kosovo', 'republic of kosovo', 'tajikistan', 'kyrgyzstan', 'krygystan', 'kgz', 'turkey', 'republic of turkey', 'switzerland', 'ch', 'che', 'schweiz' }))      return 'a304u000002pkx0AAA'; //Patch Catch All LE CEUR/GER - GEO Based
    if(opIn(t.custom1, new Set<String> { 'large enterprise', 'major' }) && opIn(t.country, new Set<String> { 'ind', 'india', 'in', 'bangladesh', 'sri lanka' }))      return 'a304u000002pkx1AAA'; //Patch Catch All LE India - GEO Based
    if(opIn(t.custom1, new Set<String> { 'large enterprise', 'major' }) && opIn(t.country, new Set<String> { 'mx', 'mex', 'mexico', 'cr', 'cri', 'costa rica', 'sv', 'slv', 'gq', 'gnq', 'hn', 'hnd', 'honduras', 'el salvador', 'gt', 'gtm', 'guatemala', 'ni', 'nic', 'nicaragua', 'pa', 'pan', 'panama', 'bz', 'blz', 'belize', 'bermuda', 'bm', 'jm', 'jam', 'jamaica', 'pm', 'pr', 'pri', 'pry', 'puerto rico', 'do', 'dom', 'dominican republic', 'cym', 'cayman islands', 'tc', 'tca', 'trinidad and tobago', 'tt', 'tto', 'turks and caicos islands', 'bs', 'bhs', 'bahamas', 'saint kitts and nevis', 'saint kitts & nevis anguilla', 'saint lucia', 'antigua and barbuda', 'antigua/barbuda', 'aw', 'abw', 'aruba', 'bb', 'brb', 'barbados', 'maf', 'martinique', 'mf', 'mq', 'mtq', 'west indies', 'grenada', 'ag', 'ai', 'aia', 'angola anguilla', 'anguilla', 'aq', 'ata', 'atg', 'bes', 'bl', 'blm', 'bmu', 'sint eustatius and saba', 'bq', 'british virgin islands', 'curacao', 'cuw', 'cw', 'dm', 'dma', 'french guiana', 'gf', 'glp', 'gp', 'gs', 'guadeloupe', 'guf', 'kn', 'kna', 'ky', 'lc', 'lca', 'saint barthelemy', 'saint helena', 'ascension and tristan da cunha', 'saint martin (french part)', 'saint pierre and miquelon', 'saint vincent and the grenadines', 'san marino', 'sao tome and principe', 'sh', 'shn', 'sint maarten (dutch part)', 'sm', 'smr', 'south georgia and the south sandwich islands', 'spm', 'sr', 'st', 'stp', 'sx', 'sxm', 'vc', 'vct', 'vg', 'vgb', 'vi vir', 'virgin islands (british)', 'virgin islands (u.s.)', 'virgin islands (usa)', 'wallis and futuna', 'wf', 'wlf', 'cu', 'cub', 'cuba', 'equatorial guinea', 'fk', 'flk', 'falkland islands', 'malvinas', 'gn', 'gin', 'guinea', 'gw', 'gnb', 'guinea-bissau', 'ht', 'hti', 'haiti', 'american samoa', 'united states minor outlying islands', 'st. pierre and miquelon', 'br', 'bra', 'brazil', 'brasil', 'ar', 'arg', 'argentina', 'cl', 'chl', 'chile', 'pe', 'per', 'peru', 'co', 'col', 'colombia', 've', 'ven', 'venezuela', 'venezuela (bolivarian republic of)', 'ec', 'ecu', 'ecuador', 'bo', 'bol', 'bolivia', 'bolivia (plurinational state of)', 'bonaire', 'paraguay', 'uy', 'ury', 'uruguay', 'antarctica', 'gy', 'guy', 'guyana', 'sur', 'suriname', '' }))      return 'a304u000002pkx2AAA'; //Patch Catch All LE Latam - GEO Based
    if(opIn(t.custom1, new Set<String> { 'large enterprise' }) && opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }) && opIn(t.state, new Set<String> { 'massachusetts', 'ma', 'ct', 'connecticut', 'ri', 'rhode island', 'me', 'maine', 'vt', 'vermont', 'nh', 'new hampshire' }))      return 'a304u000002pkx3AAA'; //Patch Catch All LE New England - GEO Based
    if(opIn(t.custom1, new Set<String> { 'large enterprise' }) && opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }) && opIn(t.state, new Set<String> { 'new jersey', 'nj' }))      return 'a304u000002pkx4AAA'; //Patch Catch All LE NYNJ - GEO Based
    if(opIn(t.custom1, new Set<String> { 'large enterprise' }) && opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }) && opIn(t.state, new Set<String> { 'wyoming', 'ohio', 'michigan', 'wv', 'oh', 'mi' }))      return 'a304u000002pkx5AAA'; //Patch Catch All LE Ohio Valley - GEO Based
    if(opIn(t.custom1, new Set<String> { 'large enterprise' }) && opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }) && opIn(t.state, new Set<String> { 'georgia', 'ga', 'alabama', 'al', 'mississippi', 'ms', 'florida', 'fl' }))      return 'a304u000002pkx6AAA'; //Patch Catch All LE Southeast - GEO Based
    if(opIn(t.custom1, new Set<String> { 'large enterprise' }) && opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }) && opIn(t.state, new Set<String> { 'california', 'ca' }))      return 'a304u000002pkx7AAA'; //Patch Catch All West Major - GEO Based
    if((opIn(t.custom1, new Set<String> { 'commercial', 'smb' }) && opIn(t.country, new Set<String> { 'bhr', 'bahrain', 'iran', 'iran, islamic republic of' })) || (opIn(t.custom1, new Set<String> { 'commercial', 'smb' }) && opIn(t.country, new Set<String> { 'saudi arabia' }) && opIn(t.state, new Set<String> { 'mecca', 'makkah', 'madinah', 'medina', 'al baha', 'al bahah', 'al jouf', 'al jowf province', 'al jowf', 'al-jouf', 'al-jawf', 'jazan', 'najran' })) || (opIn(t.custom1, new Set<String> { 'commercial', 'smb' }) && opIn(t.country, new Set<String> { 'saudi arabia' }) && opStart(t.zipCode, new Set<String> { '11', '13' })))      return 'a304u000002eJzHAAU'; //Patch CSR Saudi Arabia/Bahrain - GEO Based
    if((opIn(t.custom1, new Set<String> { 'commercial', 'smb' }) && opIn(t.country, new Set<String> { 'kw', 'kuwait', 'af', 'afghanistan', 'iraq', 'yemen', 'tajikistan' })) || (opIn(t.custom1, new Set<String> { 'commercial', 'smb' }) && opIn(t.country, new Set<String> { 'saudi arabia' }) && opIn(t.state, new Set<String> { 'eastern province', 'al qassim', 'al qasim', 'hail', 'tabuk', 'tabouk', 'northern border', 'northern borders', 'northern borders region', 'asser' })) || (opIn(t.custom1, new Set<String> { 'commercial', 'smb' }) && opIn(t.country, new Set<String> { 'saudi arabia' }) && opStart(t.zipCode, new Set<String> { '10', '12', '14', '15', '16' })))      return 'a304u000002ibeTAAQ'; //Patch CSR Saudi Arabia/Kuwait - GEO Based
    if(opIn(t.custom1, new Set<String> { 'commercial', 'smb' }) && opIn(t.country, new Set<String> { 'israel', 'turkey', 'republic of turkey', 'turkmenistan', 'jordon', 'jordan', 'jo', 'lebanon', 'palestine', 'palestina', 'ksa', 'syria', '' }))      return 'a304u000002eJzMAAU'; //Patch CSR Israel - GEO Based
    if(opIn(t.custom1, new Set<String> { 'commercial', 'smb' }) && opIn(t.country, new Set<String> { 'saudi arabia', 'ksa', 'kingdom of saudi arabia', 'kingdom of saudi arabia (ksa)' }))      return 'a304u000002ig2KAAQ'; //Patch CSR Saudi Arabia - GEO Based 2
    if(opIn(t.custom1, new Set<String> { 'commercial', 'smb' }) && opIn(t.country, new Set<String> { 'egypt', 'libya', 'tunisia', 'central african republic', 'seychelles', 'madagascar', 'congo', 'democratic republic of the congo', 'senegal', 'gambia', 'cameroon', 'mauritius', 'uganda', 'angola', 'malawi', 'benin', 'somalia', 'mauritania', 'burundi', 'gabon', 'mali', 'swaziland', 'togo', 'tanzania', 'liberia', 'côte d\'ivoire', 'ivory coast', 'lesotho', 'burkina faso', 'ng', 'nga', 'nigeria', 'ke', 'ken', 'kenya', 'dza', 'algeria', 'morocco', 'gh', 'ghana', 'bw', 'bwa', 'botswana', 'cv', 'cpv', 'cape verde', 'et', 'eth', 'ethiopia', 'na', 'nam', 'namibia', 'za', 'zaf', 'south africa', 'ss', 'ssd', 'south sudan', 'sd', 'sdn', 'sudan', 'zmb', 'zambia', 'zimbabwe', 'zwe', 'zwecomoros', 'comoros', 'com', 'mozambique', 'mz', 'eritrea', 'chad', 'rwanda' }))      return 'a304u000002eKlFAAU'; //Patch CSR Africa -  GEO Based
    if(opIn(t.custom1, new Set<String> { 'commercial', 'smb' }) && opIn(t.country, new Set<String> { 'dubai', 'united arab emirates', 'uae', 'qatar', 'oman' }))      return 'a304u000002eKlKAAU'; //Patch CSR UAE - GEO Based
    if(opIn(t.custom1, new Set<String> { 'commercial', 'smb' }) && opIn(t.country, new Set<String> { 'israel', 'egypt', 'libya', 'tunisia', 'central african republic', 'seychelles', 'madagascar', 'congo', 'senegal', 'gambia', 'cameroon', 'mauritius', 'uganda', 'angola', 'malawi', 'benin', 'somalia', 'mauritania', 'burundi', 'gabon', 'mali', 'swaziland', 'togo', 'tanzania', 'liberia', 'côte d\'ivoire', 'ivory coast', 'lesotho', 'burkina faso', 'ng', 'nga', 'nigeria', 'ke', 'ken', 'kenya', 'dza', 'algeria', 'morocco', 'gh', 'ghana', 'bw', 'bwa', 'botswana', 'cv', 'cpv', 'cape verde', 'et', 'eth', 'ethiopia', 'na', 'nam', 'namibia', 'za', 'zaf', 'south africa', 'ss', 'ssd', 'south sudan', 'sd', 'sdn', 'sudan', 'zmb', 'zambia', 'zimbabwe', 'zwe', 'zwecomoros', 'comoros', 'com', 'mozambique', 'mz', 'eritrea', 'chad', 'rwanda', 'bhr', 'bahrain', 'dubai', 'united arab emirates', 'uae', 'kw', 'kuwait', 'af', 'afghanistan', 'iran', 'iran, islamic republic of', 'iraq', 'jordon', 'jordan', 'jo', 'lebanon', 'palestine', 'palestina', 'saudi arabia', 'ksa', 'syria', 'yemen', 'tajikistan', 'qatar', 'oman' }))      return 'a304u000002pkx8AAA'; //Patch Catch All CSR MEA - GEO Based
    if(opIn(t.country, new Set<String> { 'ca', 'canada' }) && opIn(t.state, new Set<String> { 'ab', 'mb', 'alberta', 'manitoba' }) && opIn(t.custom1, new Set<String> { 'commercial' }))      return 'a304u000002pkx9AAA'; //Patch CSR AB/MB - GEO Based
    if(opStart(t.company, new Set<String> { 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9' }) && opIn(t.country, new Set<String> { 'au', 'aus', 'australia' }) && opIn(t.custom1, new Set<String> { 'commercial' }) && opIn(t.state, new Set<String> { 'new south wales', 'nsw', 'newsouthwales', 'n s w', 'australian capital territory', 'act' }))      return 'a304u000002pkxAAAQ'; //Patch CSR ANZ NSW 1 - GEO Based
    if(opStart(t.company, new Set<String> { 's', 't', 'u', 'v', 'w', 'x', 'y', 'z' }) && opIn(t.country, new Set<String> { 'au', 'aus', 'australia' }) && opIn(t.custom1, new Set<String> { 'commercial' }) && opIn(t.state, new Set<String> { 'new south wales', 'nsw', 'newsouthwales', 'n s w', 'australian capital territory', 'act' }))      return 'a304u000002pkxBAAQ'; //Patch CSR ANZ NSW 2 - GEO Based
    if(opIn(t.country, new Set<String> { 'new caledonia', 'new caledonia (french)', 'nc', 'ncl', 'micronesia', 'papua new guinea', 'vanuatu', 'vanautu', 'tuvalu', 'solomon islands', 'kiribati', 'nz', 'nzl', 'new zealand', 'fiji', 'fiji islands', 'fji', 'fji. fji', 'cook islands', 'cok', 'guam' }) && opIn(t.custom1, new Set<String> { 'commercial' }))      return 'a304u000002pkxCAAQ'; //Patch CSR ANZ NZ - GEO Based
    if(opIn(t.country, new Set<String> { 'au', 'aus', 'australia' }) && opIn(t.state, new Set<String> { 'western australia', 'wa', 'queensland', 'qld', 'northern territory', 'nt' }) && opIn(t.custom1, new Set<String> { 'commercial' }))      return 'a304u000002pkxDAAQ'; //Patch CSR ANZ QLD/WA - GEO Based
    if((opStart(t.company, new Set<String> { 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9' }) && opIn(t.country, new Set<String> { 'au', 'aus', 'australia' }) && opIn(t.custom1, new Set<String> { 'commercial' }) && opIn(t.state, new Set<String> { 'victoria', 'vic' })) || (opIn(t.country, new Set<String> { 'au', 'aus', 'australia' }) && opIn(t.custom1, new Set<String> { 'commercial' }) && opIn(t.state, new Set<String> { 'tasmania', 'tas' })))      return 'a304u000002pkxFAAQ'; //Patch CSR ANZ VIC 1 - GEO Based
    if((opStart(t.company, new Set<String> { 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z' }) && opIn(t.country, new Set<String> { 'au', 'aus', 'australia' }) && opIn(t.custom1, new Set<String> { 'commercial' }) && opIn(t.state, new Set<String> { 'victoria', 'vic' })) || (opIn(t.country, new Set<String> { 'au', 'aus', 'australia' }) && opIn(t.custom1, new Set<String> { 'commercial' }) && opIn(t.state, new Set<String> { 'south australia', 'sa' })))      return 'a304u000002pkxGAAQ'; //Patch CSR ANZ VIC 2 - GEO Based
    if(opIn(t.country, new Set<String> { 'cambodia', 'khm', 'mm', 'mmr', 'myanmar', 'burma', 'brunei darussalam', 'brunei', 'mongolia', 'vietnam', 'vn', 'viet nam' }) && opIn(t.custom1, new Set<String> { 'smb', 'commercial' }))      return 'a304u000002pkxHAAQ'; //Patch CSR ASEAN RoSEA - GEO Based
    if(opIn(t.country, new Set<String> { 'austria' }) && opIn(t.custom1, new Set<String> { 'commercial' }))      return 'a304u000002pkxIAAQ'; //Patch CSR Austria - GEO Based
    if(opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }) && opIn(t.state, new Set<String> { 'az', 'arizona', 'nm', 'new mexico' }) && opIn(t.custom1, new Set<String> { 'commercial' }))      return 'a304u000002pkxJAAQ'; //Patch CSR AZ/NM - GEO Based
    if(opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }) && opIn(t.custom1, new Set<String> { 'commercial' }) && opIn(t.state, new Set<String> { 'ca', 'california' }) && opZipcode(t.zipCode, '94203~94209,94211,94229~94230,94232,94234~94237,94239~94240,94244~94250,94252,94254,94256~94259,94261~94263,94267~94269,94271,94273~94274,94277~94280,94282~94291,94293~94299,94501~94503,94506~94531,94533~94553,94555~94583,94585~94592,94595~94599,94601~94615,94617~94625,94649,94659~94662,94666,94701~94710,94712,94720,94801~94808,94820,94850,94901,94903~94904,94912~94915,94920,94922~94931,94933,94937~94942,94945~94957,94960,94963~94966,94970~94979,94998~94999,95201~95213,95215,95219~95234,95236~95237,95240~95242,95245~95255,95257~95258,95267,95269,95296~95297,95304,95320,95330,95336~95337,95366,95376~95378,95385,95391,95401~95410,95412,95415~95433,95435~95437,95439,95441~95446,95448~95454,95456~95473,95476,95480~95482,95485~95488,95490,95492~95494,95497,95501~95503,95511,95514,95518~95519,95521,95524~95528,95531~95532,95534,95536~95538,95540,95542~95543,95545~95556,95558~95560,95562~95565,95567~95571,95573,95585,95587,95589,95595,95601~95621,95623~95642,95644~95646,95648,95650~95656,95658~95699,95701,95703,95709,95712~95715,95717,95720~95722,95724,95726,95728,95735~95736,95741~95742,95746~95747,95757~95759,95762~95763,95765,95776,95798~95799,95811~95838,95840~95843,95851~95853,95860,95864~95867,95887,95894,95899,95901,95903,95910,95912~95920,95922~95930,95932,95934~95951,95953~95963,95965~95984,95986~95988,95991~95993,96001~96003,96006~96011,96013~96017,96019~96025,96027~96029,96031~96035,96037~96041,96044,96046~96052,96054~96059,96061~96065,96067~96071,96073~96076,96078~96080,96084~96097,96099,96101,96103~96106,96108~96130,96132,96134~96137,96140~96143,96145~96146,96148,96150~96152,96154~96158,96160~96162'))      return 'a304u000002pkxKAAQ'; //Patch CSR Bay Area North - GEO Based
    return null;
  }
  private Id matchGroup5(PatchDataModel.MatchTarget t)
  {
    if(opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }) && opIn(t.custom1, new Set<String> { 'commercial' }) && opIn(t.state, new Set<String> { 'ca', 'california' }) && opZipcode(t.zipCode, '94002,94005,94010~94011,94013~94028,94030,94035,94037~94044,94060~94066,94070,94074,94080,94083,94085~94089,94096,94098,94128,94301~94306,94309,94401~94404,94497,95001~95015,95017~95021,95023~95024,95026,95030~95033,95035~95039,95041~95046,95050~95056,95060~95067,95070~95071,95073,95075~95077,95101,95103,95106,95108~95113,95115~95136,95138~95141,95148,95150~95161,95164,95170,95172~95173,95190~95194,95196,95301,95303,95305~95307,95309~95319,95321~95329,95333~95335,95338,95340~95341,95343~95348,95350~95358,95360~95361,95363~95365,95367~95370,95372~95375,95379~95383,95386~95389,95397,96107,96133'))      return 'a304u000002pkxLAAQ'; //Patch CSR Bay Area South - GEO Based
    if(opIn(t.country, new Set<String> { 'ca', 'canada' }) && opIn(t.state, new Set<String> { 'bc', 'british columbia', 'sk', 'saskatchewan', '' }) && opIn(t.custom1, new Set<String> { 'commercial' }))      return 'a304u000002pkxMAAQ'; //Patch CSR BC/SK - GEO Based
    if(opIn(t.country, new Set<String> { 'be', 'bel', 'belgium', 'lu', 'lux', 'luxembourg', 'luxemburg' }) && opIn(t.custom1, new Set<String> { 'smb', 'commercial' }))      return 'a304u000002pkxNAAQ'; //Patch CSR Belgium/Lux - GEO Based
    if(opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }) && opIn(t.custom1, new Set<String> { 'commercial' }) && opIn(t.state, new Set<String> { 'massachusetts', 'ma' }) && opZipcode(t.zipCode, '02108~02137,02150~02152,02163,02196,02199,02201,02203~02206,02210~02211,02215,02217,02222,02241,02266,02283~02284,02293,02297~02298'))      return 'a304u000002pkxOAAQ'; //Patch CSR Boston - GEO Based
    if(opIn(t.country, new Set<String> { 'switzerland', 'ch', 'che', 'schweiz' }) && opStart(t.zipCode, new Set<String> { '6', '7', '8', '9' }) && opIn(t.custom1, new Set<String> { 'commercial' }))      return 'a304u000002pkxPAAQ'; //Patch CSR CH East - GEO Based
    if(opIn(t.country, new Set<String> { 'switzerland', 'ch', 'che', 'schweiz' }) && opStart(t.zipCode, new Set<String> { '30', '31', '32', '33', '34', '35', '36', '37', '38', '4', '5' }) && opIn(t.custom1, new Set<String> { 'commercial' }))      return 'a304u000002pkxQAAQ'; //Patch CSR CH West - GEO Based
    if((opIn(t.country, new Set<String> { 'switzerland', 'ch', 'che', 'schweiz' }) && opIn(t.custom1, new Set<String> { 'commercial' }) && opStart(t.zipCode, new Set<String> { '1', '2', '39' })) || (opIn(t.country, new Set<String> { 'pl', 'pol', 'poland' }) && opIn(t.custom1, new Set<String> { 'commercial' })))      return 'a304u000002pkxRAAQ'; //Patch CSR CH/PL - GEO Based
    if(opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }) && opIn(t.custom1, new Set<String> { 'commercial' }) && opIn(t.state, new Set<String> { 'il', 'illinois' }) && opZipcode(t.zipCode, '60290,60301~60305,60399,60401~60404,60406,60408~60412,60415,60417~60419,60421~60423,60425~60426,60428~60436,60438~60443,60445~60446,60448~60449,60451~60459,60461~60469,60471~60473,60475~60478,60480~60482,60484,60487,60490~60491,60499,60501~60504,60513~60517,60519,60521~60523,60525~60527,60532,60534,60540,60544,60546,60555,60558~60559,60561,60563~60568,60570,60572,60585~60586,60597,60599,60601~60612,60614~60617,60619~60624,60628~60629,60632~60634,60636~60638,60642~60644,60649,60651~60655,60657,60661,60663~60664,60669~60670,60673~60675,60677~60682,60684~60687,60689~60691,60693~60697,60699,60701,60707,60803~60805,60827'))      return 'a304u000002pkxSAAQ'; //Patch CSR Chicago 1 - GEO Based
    if((opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }) && opIn(t.state, new Set<String> { 'co', 'colorado' }) && opIn(t.custom1, new Set<String> { 'commercial' }) && opStart(t.zipCode, new Set<String> { '801', '802', '808', '809', '810', '811', '812', '813', '814', '815' })) || (opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }) && opIn(t.custom1, new Set<String> { 'commercial' }) && opStart(t.zipCode, new Set<String> { '840', '845', '846', '847' }) && opIn(t.state, new Set<String> { 'utah', 'ut' })))      return 'a304u000002pkxTAAQ'; //Patch CSR CO/UT - GEO Based
    if(opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }) && opIn(t.custom1, new Set<String> { 'commercial' }) && opIn(t.state, new Set<String> { 'ct', 'connecticut' }))      return 'a304u000002pkxUAAQ'; //Patch CSR CT - GEO Based
    if(opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }) && opIn(t.state, new Set<String> { 'dc', 'dist of columbia', 'district of columbia', 'de', 'delaware' }) && opIn(t.custom1, new Set<String> { 'commercial' }))      return 'a304u000002pkxVAAQ'; //Patch CSR DC/DE - GEO Based
    if(opIn(t.country, new Set<String> { 'de', 'deu', 'germany', 'deutschland' }) && opStart(t.zipCode, new Set<String> { '0', '1' }) && opIn(t.custom1, new Set<String> { 'commercial', 'smb' }))      return 'a304u000002pkxWAAQ'; //Patch CSR DE PLZ 0/1 - GEO Based
    if(opIn(t.country, new Set<String> { 'de', 'deu', 'germany', 'deutschland' }) && opStart(t.zipCode, new Set<String> { '2', '30', '31', '32', '33', '39' }) && opIn(t.custom1, new Set<String> { 'commercial', 'smb' }))      return 'a304u000002pkxXAAQ'; //Patch CSR DE PLZ 2/3 - GEO Based
    if(opIn(t.country, new Set<String> { 'de', 'deu', 'germany', 'deutschland' }) && opStart(t.zipCode, new Set<String> { '34', '35', '36', '37', '38', '71', '73', '74', '57', '59' }) && opIn(t.custom1, new Set<String> { 'commercial', 'smb' }))      return 'a304u000002pkxYAAQ'; //Patch CSR DE PLZ 3/7 - GEO Based
    if(opIn(t.country, new Set<String> { 'de', 'deu', 'germany', 'deutschland' }) && opStart(t.zipCode, new Set<String> { '4' }) && opIn(t.custom1, new Set<String> { 'commercial', 'smb' }))      return 'a304u000002pkxZAAQ'; //Patch CSR DE PLZ 4 - GEO Based
    if((opIn(t.country, new Set<String> { 'de', 'deu', 'germany', 'deutschland' }) && opIn(t.custom1, new Set<String> { 'commercial', 'smb' }) && opStart(t.zipCode, new Set<String> { '50', '51', '52', '53', '54', '55', '56', '58' })) || (opIn(t.country, new Set<String> { 'gr', 'grc', 'greece', 'md', 'moldova', 'moldavia', 'am', 'arm', 'armenia', 'az', 'aze', 'azerbaijan', 'by', 'blr', 'belarus', 'ge', 'geo', 'georgia', 'ru', 'rus', 'russian federation', 'russia', 'rs', 'kz', 'kaz', 'kazakhstan', 'mk', 'mkd', 'macedonia', 'republic of macedonia', 'balkans', 'moscow', 'uzbekistan', 'tajikistan', 'kyrgyzstan', 'krygystan', 'kgz', 'li', 'lie', 'liechtenstein', 'romania', 'si', 'svn', 'slovenia', 'al', 'alb', 'albania', 'ba', 'bih', 'bosnia and herzegowina', 'bosnia and herzegovina', 'bg', 'bgr', 'bulgaria', 'hr', 'hrv', 'croatia', 'hrvatska', 'srb', 'serbia', 'montenegro', 'ro', 'rom' }) && opIn(t.custom1, new Set<String> { 'commercial', 'smb' })))      return 'a304u000002pkxaAAA'; //Patch CSR DE PLZ 5 + Balkans - GEO Based
    if(opIn(t.country, new Set<String> { 'de', 'deu', 'germany', 'deutschland' }) && opStart(t.zipCode, new Set<String> { '6' }) && opIn(t.custom1, new Set<String> { 'commercial', 'smb' }))      return 'a304u000002pkxbAAA'; //Patch CSR DE PLZ 6 - GEO Based
    if(opIn(t.country, new Set<String> { 'de', 'deu', 'germany', 'deutschland' }) && opStart(t.zipCode, new Set<String> { '70', '72', '75', '76', '77', '78', '79' }) && opIn(t.custom1, new Set<String> { 'commercial', 'smb' }))      return 'a304u000002pkxcAAA'; //Patch CSR DE PLZ 7 West - GEO Based
    if(opIn(t.country, new Set<String> { 'de', 'deu', 'germany', 'deutschland' }) && opStart(t.zipCode, new Set<String> { '8' }) && opIn(t.custom1, new Set<String> { 'commercial', 'smb' }))      return 'a304u000002pkxdAAA'; //Patch CSR DE PLZ 8 - GEO Based
    if(opIn(t.country, new Set<String> { 'de', 'deu', 'germany', 'deutschland' }) && opStart(t.zipCode, new Set<String> { '9' }) && opIn(t.custom1, new Set<String> { 'commercial', 'smb' }))      return 'a304u000002igl5AAA'; //Patch CSR DE PLZ 9 - Geo Based
    if(opIn(t.country, new Set<String> { 'cz', 'cze', 'czech republic', 'ee', 'est', 'estonia', 'hu', 'hun', 'hungary', 'hungaria', 'lv', 'lva', 'latvia', 'lt', 'ltu', 'lithuania', 'sk', 'svk', 'slovakia', 'slovak republic', 'ua', 'ukr', 'ukraine' }) && opIn(t.custom1, new Set<String> { 'commercial' }))      return 'a304u000002pkxeAAA'; //Patch CSR Czech/HUN/SK - Geo based
    if(opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }) && opIn(t.custom1, new Set<String> { 'commercial' }) && opIn(t.state, new Set<String> { 'tx', 'texas' }) && opZipcode(t.zipCode, '75001,75006,75019,75038~75054,75059~75064,75080~75083,75085,75088~75089,75101~75106,75109~75110,75114~75120,75123~75127,75134,75137~75138,75140~75144,75146~75161,75163,75165,75167~75169,75172,75180~75182,75185,75187,75201~75212,75214~75238,75240~75244,75246~75254,75260~75267,75270,75275,75277,75283~75285,75287,75301,75303,75312~75313,75315,75320,75326,75336,75339,75342,75354,75356~75360,75367~75368,75371~75374,75376,75378,75382,75390,75392~75395,75397~75398,76001~76022,76028,76031,76033~76036,76039~76041,76043~76044,76048~76055,76058~76061,76063~76068,76070~76071,76077,76082,76084~76088,76092~76099,76101~76124,76126~76127,76129~76137,76140,76147~76148,76150,76155,76161~76164,76166,76177,76179~76182,76185,76190~76193,76195~76199,76244,76248,76401~76402,76424,76429~76430,76433,76435,76437,76439,76443~76446,76448,76453~76454,76457,76461~76472,76475~76476,76484~76485,76487,76623,76626~76628,76631,76636,76641,76645,76649~76652,76665~76666,76670~76671,76690,76692,79504,79510,79533'))      return 'a304u000002pkxfAAA'; //Patch CSR DFW - GEO Based
    if(opIn(t.country, new Set<String> { 'ca', 'canada' }) && opIn(t.state, new Set<String> { 'qc', 'nl', 'nb', 'ns', 'pe', 'quebec', 'newfoundland and labrador', 'new brunswick', 'nova scotia', 'prince edward island' }) && opIn(t.custom1, new Set<String> { 'commercial' }))      return 'a304u000002pkxgAAA'; //Patch CSR Eastern Canada - GEO Based
    if(opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }) && opIn(t.custom1, new Set<String> { 'commercial' }) && opIn(t.state, new Set<String> { 'florida', 'fl' }) && opZipcode(t.zipCode, '32102,32111,32113,32133~32134,32158~32159,32162~32163,32179,32182~32183,32192,32195,32617,32621,32625~32626,32634,32639,32644,32663~32664,32668,32681,32683,32686,32696,32701~32704,32707~32710,32712,32714~32716,32718~32719,32726~32727,32730,32732~32733,32735~32736,32746~32747,32750~32752,32756~32757,32762,32765~32768,32771~32773,32776~32779,32784,32789~32795,32798~32799,32801~32812,32814,32816~32822,32824~32837,32839,32853~32862,32867~32869,32872,32877~32878,32885~32887,32891,32896~32897,33440,33471,33503,33508~33511,33513~33514,33521,33523~33527,33530,33534,33537~33545,33547~33550,33556,33558~33559,33563~33576,33578~33579,33583~33587,33592~33598,33601~33626,33629~33631,33633~33635,33637,33646~33647,33650,33655,33660~33664,33672~33675,33677,33679~33682,33684~33689,33694,33701~33716,33729~33734,33736~33738,33740~33744,33747,33755~33767,33769~33782,33784~33786,33801~33807,33809~33813,33815,33820,33823,33825~33827,33830~33831,33834~33841,33843~33860,33862~33863,33865,33867~33868,33870~33873,33875~33877,33880~33885,33888,33890,33896~33898,33901~33922,33924,33927~33932,33935~33936,33938,33944~33957,33960,33965~33967,33970~33972,33974~33976,33980~33983,33990~33991,33993~33994,34101~34110,34112~34114,34116~34117,34119~34120,34133~34143,34145~34146,34201~34212,34215~34224,34228~34243,34249~34251,34260,34264~34270,34272,34274~34278,34280~34282,34284~34293,34295,34420~34421,34423,34428~34434,34436,34441~34442,34445~34453,34460~34461,34464~34465,34470~34484,34487~34489,34491~34492,34498,34601~34611,34613~34614,34636~34639,34652~34656,34660~34661,34667~34669,34673~34674,34677,34679~34685,34688~34692,34695,34697~34698,34705,34711~34715,34729,34731,34734,34736~34737,34739~34749,34753,34755~34756,34758~34762,34769~34773,34777~34778,34785~34789,34797,34972~34974'))      return 'a304u000002pkxhAAA'; //Patch CSR FL North - GEO Based
    if(opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }) && opIn(t.custom1, new Set<String> { 'commercial' }) && opIn(t.state, new Set<String> { 'florida', 'fl' }) && opZipcode(t.zipCode, '33001~33002,33004,33008~33037,33039~33043,33045,33050~33052,33054~33056,33060~33077,33081~33084,33090,33092~33093,33097,33101~33102,33106,33109,33111,33114,33116,33119,33122,33124~33147,33149~33158,33160~33170,33172~33199,33206,33222,33231,33233~33234,33238~33239,33242~33243,33245,33247,33255~33257,33261,33265~33266,33269,33280,33283,33296,33299,33301~33332,33334~33340,33345~33346,33348~33349,33351,33355,33359,33388,33394,33441~33443,33973'))      return 'a304u000002pkxiAAA'; //Patch CSR FL South - GEO Based
    if(opIn(t.country, new Set<String> { 'fr', 'fra', 'france' }) && opStart(t.zipCode, new Set<String> { '78', '92', '95' }) && opIn(t.custom1, new Set<String> { 'commercial' }))      return 'a304u000002pkxjAAA'; //Patch CSR France Haut-de-Seine - GEO Based
    if(opIn(t.country, new Set<String> { 'fr', 'fra', 'france' }) && opStart(t.zipCode, new Set<String> { '77', '91', '93', '94' }) && opIn(t.custom1, new Set<String> { 'commercial' }))      return 'a304u000002pkxkAAA'; //Patch CSR France IDF - GEO Based
    if(opIn(t.country, new Set<String> { 'fr', 'fra', 'france', 'french polynesia', 'pf', 'pyf' }) && opStart(t.zipCode, new Set<String> { '02', '08', '10', '14', '16', '17', '18', '21', '22', '24', '25', '27', '28', '29', '33', '35', '36', '37', '39', '40', '41', '44', '45', '47', '49', '50', '51', '52', '53', '54', '55', '56', '57', '58', '59', '60', '61', '62', '64', '67', '68', '70', '71', '72', '76', '79', '80', '85', '86', '88', '89', '90', '97', '98' }) && opIn(t.custom1, new Set<String> { 'commercial' }))      return 'a304u000002pkxlAAA'; //Patch CSR France North - GEO Based
    if(opIn(t.country, new Set<String> { 'fr', 'fra', 'france' }) && opStart(t.zipCode, new Set<String> { '75' }) && opIn(t.custom1, new Set<String> { 'commercial' }))      return 'a304u000002pkxmAAA'; //Patch CSR France Paris - GEO Based
    if((opIn(t.country, new Set<String> { 'fr', 'fra', 'france' }) && opIn(t.custom1, new Set<String> { 'commercial' }) && opStart(t.zipCode, new Set<String> { '01', '03', '04', '05', '06', '07', '09', '11', '12', '13', '15', '19', '23', '26', '30', '31', '32', '34', '38', '42', '43', '46', '48', '63', '65', '66', '69', '73', '74', '81', '82', '83', '84', '87' })) || (opIn(t.country, new Set<String> { 'san marino', 'san marino holy see', 'mt', 'malta', 'mc', 'mco', 'monaco', 'gr', 'grc', 'greece', 'cy', 'cyp', 'cyprus', 'andorra', 'principality of andorra', 'ad' }) && opIn(t.custom1, new Set<String> { 'commercial' })))      return 'a304u000002pkxnAAA'; //Patch CSR France South - GEO Based
    if(opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }) && opIn(t.custom1, new Set<String> { 'commercial' }) && opIn(t.state, new Set<String> { 'ga', 'georgia' }) && opZipcode(t.zipCode, '30002~30010,30021~30024,30026,30028~30033,30040~30041,30060~30069,30071,30075~30077,30079~30082,30084~30085,30090~30093,30095~30099,30101~30127,30129,30132~30135,30137~30154,30156~30157,30160~30165,30168~30173,30175~30180,30182~30185,30187~30189,30213,30217,30230,30240,30263,30268,30272,30275,30291,30301~30303,30305~30319,30324~30329,30331~30334,30336~30346,30349~30350,30353~30364,30366,30369~30371,30375,30377~30378,30384,30501~30504,30506~30507,30510~30515,30517~30519,30522~30523,30525,30527~30528,30531,30533~30543,30545~30548,30552,30554~30555,30557~30560,30562~30564,30566~30568,30571~30573,30575~30577,30580~30582,30597~30598,30701,30703,30705,30707~30708,30710~30711,30719~30722,30724~30726,30728,30730~30736,30738~30742,30746~30747,30750~30753,30755~30757,31106~31107,31119,31126,31131,31136,31139,31141,31144~31146,31150,31156,31193,31195~31196,39901'))      return 'a304u000002pkxoAAA'; //Patch CSR GA North - GEO Based
    if((opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }) && opIn(t.custom1, new Set<String> { 'commercial' }) && opIn(t.state, new Set<String> { 'ms', 'mississippi' })) || (opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }) && opIn(t.custom1, new Set<String> { 'commercial' }) && opIn(t.state, new Set<String> { 'ga', 'georgia' }) && opZipcode(t.zipCode, '30004,30011~30019,30025,30034~30039,30042~30049,30052,30054~30056,30058,30070,30072,30074~30075,30078,30083,30086~30088,30094,30204~30206,30212,30214~30216,30218,30220,30222~30224,30228~30229,30233~30234,30236~30238,30241,30248,30250~30253,30256~30261,30264~30266,30269~30271,30273~30274,30276~30277,30281,30284~30290,30292~30298,30304,30320~30322,30348,30368,30374,30380,30385,30388,30392,30394,30396,30398,30401,30410~30415,30417,30420~30421,30423~30429,30434,30436,30438~30439,30441~30442,30445~30461,30464,30467,30470~30471,30473~30475,30477,30499,30516,30520~30521,30529~30530,30549,30553,30565,30599,30601~30609,30612,30619~30625,30627~30631,30633~30635,30638~30639,30641~30643,30645~30648,30650,30655~30656,30660,30662~30669,30671,30673,30677~30678,30680,30683,30802~30803,30805~30824,30828,30830,30833,30901,30903~30907,30909,30912,30914,30916~30917,30919,30999,31001~31042,31044~31047,31049~31052,31054~31055,31057~31072,31075~31079,31081~31099,31169,31192,31201~31211,31213,31216~31217,31220~31221,31294~31297,31301~31305,31307~31310,31312~31316,31318~31324,31326~31329,31331,31333,31401~31412,31414~31416,31418~31421,31501~31503,31510,31512~31513,31515~31516,31518~31525,31527,31532~31535,31537,31539,31542~31558,31560~31569,31598~31599,31601~31606,31620,31622~31627,31629~31632,31634~31639,31641~31643,31645,31647~31650,31698~31699,31701~31709,31711~31712,31714,31716,31719~31722,31727,31730,31733,31735,31738~31739,31743~31744,31747,31749~31750,31753,31756~31758,31760,31763~31765,31768~31769,31771~31776,31778~31784,31787~31796,31798~31799,31801,31803~31808,31810~31812,31814~31816,31820~31827,31829~31833,31836,31901~31909,31914,31917,31993,31995,31997~31999,39813,39815,39817~39819,39823~39829,39832,39834,39836~39837,39840~39842,39845~39846,39851~39852,39854,39859,39861~39862,39866~39867,39870,39877,39885~39886,39897')) || (opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }) && opIn(t.custom1, new Set<String> { 'commercial' }) && opIn(t.state, new Set<String> { 'sc', 'south carolina' }) && opZipcode(t.zipCode, '29003,29006,29018,29037~29039,29042,29053~29054,29070~29073,29081~29082,29105,29107~29108,29112~29113,29115~29118,29123,29127,29129,29133,29137~29138,29145~29146,29160,29164,29166,29325,29331~29332,29335,29351,29355,29360,29370,29384,29388,29401~29407,29409,29412~29418,29420,29422~29426,29432~29433,29435,29437~29439,29446~29447,29449,29451~29452,29455~29457,29464~29465,29470~29472,29474~29475,29477,29481~29485,29487~29488,29492~29493,29601~29617,29620~29628,29630~29636,29638~29659,29661~29662,29664~29667,29669~29673,29675~29693,29695~29697,29801~29805,29808~29810,29812~29813,29816~29817,29819,29821~29822,29824,29826~29829,29831~29832,29834~29836,29838~29851,29853,29856,29860~29861,29899,29901~29907,29909~29916,29918,29920~29929,29931~29936,29938~29941,29943~29945')))      return 'a304u000002pkxpAAA'; //Patch CSR GA/AL/MS - GEO Based
    if(opIn(t.country, new Set<String> { 'hk', 'hkg', 'hong kong', 'china', 'taiwan', 'province of china', 'tw', 'twn', 'macau', 'macao', 'th', 'tha', 'thailand' }) && opIn(t.custom1, new Set<String> { 'commercial' }))      return 'a304u000002pkxqAAA'; //Patch CSR GCR 1 - GEO Based
    if((opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }) && opIn(t.custom1, new Set<String> { 'commercial' }) && opIn(t.state, new Set<String> { 'tx', 'texas' }) && opZipcode(t.zipCode, '70001~70006,70009~70011,70030~70033,70036~70041,70043~70044,70047,70049~70060,70062~70065,70067~70073,70075~70076,70078~70087,70090~70094,70096~70097,70112~70119,70121~70131,70139,70141~70143,70145~70146,70148,70150~70154,70156~70167,70170,70172,70174~70179,70181~70187,70189~70190,70195,70301~70302,70310,70339~70346,70352~70361,70363~70364,70371~70375,70377,70380~70381,70390~70395,70397,70401~70404,70420~70422,70426~70427,70429,70431,70433~70438,70441~70467,70469~70471,70501~70529,70531~70535,70537~70538,70540~70544,70546,70548~70552,70554~70556,70558~70560,70562~70563,70569~70571,70575~70578,70580~70586,70589,70591~70593,70596,70598,70601~70602,70605~70607,70609,70611~70612,70615~70616,70629~70634,70637~70640,70643~70648,70650~70665,70668~70669,70704,70706~70707,70710~70712,70714~70715,70718~70719,70721~70723,70725~70730,70732~70734,70736~70740,70743~70744,70747~70750,70752~70757,70759~70765,70767,70769~70770,70772~70778,70780,70782~70789,70791~70792,70801~70823,70825~70827,70831,70833,70835~70837,70873~70874,70879,70884,70891~70896,70898,71001~71004,71006~71009,71016,71018~71019,71021,71023~71024,71027~71034,71037~71040,71043~71052,71055,71058,71060~71061,71063~71073,71075,71078~71080,71082,71101~71113,71115,71118~71120,71129~71130,71133~71138,71148~71154,71156,71161~71166,71171~71172,71201~71203,71207,71209~71213,71217~71223,71225~71227,71229~71230,71232~71235,71237~71238,71240~71243,71245,71247,71249~71251,71253~71254,71256,71259~71261,71263~71264,71266,71268~71270,71272~71273,71275~71277,71279~71282,71284,71286,71291~71292,71294~71295,71301~71303,71306~71307,71309,71315~71316,71320,71322~71331,71333~71334,71336,71339~71343,71345~71346,71348,71350~71351,71353~71363,71365~71369,71371,71373,71375,71377~71378,71401,71403~71407,71409~71411,71414~71419,71422~71435,71438~71441,71443,71446~71450,71452,71454~71463,71465~71469,71471~71475,71477,71479~71480,71483,71485~71486,71496~71497,75601~75608,75615,75631,75633,75637,75639~75643,75645,75647,75650~75654,75658~75660,75662~75663,75666~75667,75669~75672,75680~75682,75684~75685,75687~75689,75691~75693,75701~75713,75750~75752,75754~75760,75762~75766,75770~75773,75778~75780,75782,75784~75785,75788~75792,75797~75799,75801~75803,75831~75835,75839~75840,75844~75845,75847,75849~75853,75855~75856,75858,75861~75862,75865,75880,75882,75884,75886,75901~75904,75915,75925~75926,75928~75939,75941~75944,75946,75948~75949,75951,75954,75956,75958~75966,75968~75969,75972~75980,75990,77011~77013,77015~77017,77020,77023,77026,77028~77029,77032~77034,77037,77039,77044,77047~77050,77058~77062,77073,77075~77076,77078,77087,77089,77093,77205,77207,77213,77217,77220,77223,77226,77228~77229,77233~77234,77258~77259,77261~77262,77273,77287,77289,77301~77303,77305~77306,77315,77320,77325~77328,77331~77332,77334~77336,77338~77351,77357~77360,77364~77365,77367~77369,77371~77374,77376,77378,77385~77387,77393,77396,77399,77501~77508,77510~77512,77514~77523,77530~77536,77538~77539,77541~77542,77545~77547,77549~77555,77560~77566,77568,77571~77575,77577~77578,77580~77588,77590~77592,77597~77598,77611~77617,77619,77622~77627,77629~77632,77639~77643,77650~77651,77655~77657,77659~77665,77670,77701~77708,77710,77713,77720,77725~77726,77864')) || (opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }) && opIn(t.custom1, new Set<String> { 'commercial' }) && opIn(t.state, new Set<String> { 'louisiana', 'la' })))      return 'a304u000002pkxrAAA'; //Patch CSR Houston East/LA - GEO Based
    if((opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }) && opIn(t.custom1, new Set<String> { 'commercial' }) && opIn(t.state, new Set<String> { 'tx', 'texas', 'mo', 'missouri' }) && opZipcode(t.zipCode, '63005~63006,63010~63017,63019~63026,63028,63030~63034,63036~63045,63047~63053,63055~63057,63060~63061,63065~63066,63068~63074,63077,63079~63080,63084,63087~63091,63099,63101~63141,63143~63147,63150~63151,63155~63158,63160,63163~63164,63166~63167,63169,63171,63177~63180,63182,63188,63195,63197,63199,63301~63304,63330,63332~63334,63336,63338~63339,63341~63353,63357,63359,63361~63363,63365~63370,63373,63376~63390,63401,63430~63443,63445~63448,63450~63454,63456~63469,63471~63474,63501,63530~63541,63543~63549,63551~63552,63555~63561,63563,63565~63567,63601,63620~63633,63636~63638,63640,63645,63648,63650~63651,63653~63656,63660,63662~63666,63670,63673~63675,63701~63703,63730,63732,63735~63740,63742~63748,63750~63752,63755,63758,63760,63763~63764,63766~63767,63769~63771,63774~63776,63779~63785,63787,63801,63820~63830,63833~63834,63837,63839~63841,63845~63853,63855,63857,63860,63862~63863,63866~63870,63873~63882,63901~63902,63931~63945,63950~63957,63960~63962,63964~63967,64001,64020~64022,64096,64601,64622~64623,64628,64630~64631,64633,64635,64638~64639,64641,64643,64645~64646,64651~64653,64655~64656,64658~64661,64664,64667,64672~64674,64676,64679~64683,64686,64688,64738,64761,65001,65010~65011,65013~65014,65016~65018,65020,65023~65026,65032,65034~65043,65046~65055,65058~65059,65061~65069,65072,65074~65085,65101~65111,65201~65203,65205,65211~65212,65215~65218,65230~65233,65236~65237,65239~65240,65243~65244,65246~65248,65250~65251,65254~65265,65270,65274~65276,65278~65287,65299,65301~65302,65305,65320~65327,65329~65330,65332~65340,65344~65345,65347~65351,65354~65355,65360,65401~65402,65409,65436,65438~65441,65443~65444,65446,65449,65452~65453,65456~65457,65459,65461~65464,65466,65468,65470,65473,65479,65483~65484,65486,65501,65529,65532,65534~65536,65541~65543,65546,65548,65550,65552,65555~65557,65559~65560,65564~65567,65570~65571,65580,65582~65584,65586,65588~65591,65601,65604~65606,65608~65620,65622,65624,65626~65627,65629~65634,65636~65638,65640,65644~65645,65648~65650,65652~65653,65655~65658,65660,65662~65664,65666~65669,65672~65676,65679~65681,65685~65686,65688~65690,65692,65702,65704~65706,65710~65711,65713~65715,65717,65720~65722,65724~65729,65731~65733,65735,65737~65742,65744,65746~65747,65753~65755,65757,65759~65762,65764~65768,65770~65771,65773~65775,65777~65779,65781,65783~65784,65786~65791,65793,65801~65810,65814,65817,65890,65897~65899,71601~71603,71611~71613,71630~71631,71635,71638~71640,71642~71644,71646~71647,71651~71663,71665~71667,71670~71671,71674~71678,71701,71711,71720~71722,71724~71726,71728,71730~71731,71740,71742~71745,71747~71754,71758~71759,71762~71766,71770,71772,71801~71802,71820,71822~71823,71825~71828,71831~71842,71845~71847,71851~71855,71857~71862,71864~71866,71901~71903,71909~71910,71913~71914,71920~71923,71929,71932~71933,71935,71937,71940~71945,71949~71950,71952~71953,71956~71962,71964~71966,71968~71973,71998~71999,72001~72007,72010~72048,72051~72053,72055,72057~72061,72063~72070,72072~72076,72078~72089,72099,72101~72108,72110~72137,72139~72143,72145,72149~72150,72152~72153,72156~72158,72160,72164~72170,72173,72175~72176,72178~72183,72190,72199,72201~72207,72209~72212,72214~72217,72219,72221~72223,72225,72227,72231,72255,72260,72295,72301,72303,72310~72313,72315~72316,72319~72322,72324~72333,72335~72336,72338~72342,72346~72348,72350~72355,72358~72360,72364~72370,72372~72374,72376~72377,72379,72383~72384,72386~72387,72389~72392,72394~72396,72401~72405,72410~72417,72419,72421~72422,72424~72438,72440~72445,72447,72449~72451,72453~72462,72464~72467,72469~72476,72478~72479,72482,72501,72503,72512~72513,72515,72517,72519~72534,72536~72540,72542~72546,72550,72553~72556,72560~72562,72564~72569,72571~72573,72575~72579,72581,72583~72585,72587,72601~72602,72611,72613,72615~72617,72619,72623~72624,72626,72628~72636,72638~72645,72648,72650~72651,72653~72655,72657~72663,72666,72668~72670,72672,72675,72677,72679~72680,72682~72683,72685~72687,72701~72704,72711~72719,72721~72722,72727~72730,72732~72742,72744~72745,72747,72749,72751~72753,72756~72758,72760~72762,72764~72766,72768~72770,72773~72774,72776,72801~72802,72811~72812,72820~72821,72823~72824,72826~72830,72832~72835,72837~72843,72845~72847,72851~72858,72860,72863,72865,72901~72906,72908,72913~72914,72916~72919,72921,72923,72926~72928,72930,72932~72938,72940~72941,72943~72952,72955~72959,75838,75846,75848,75859~75860,76501,76518~76520,76523~76524,76533,76556,76567,76569~76570,76577~76579,76621,76624,76629~76630,76632,76635,76639~76640,76642~76643,76648,76653~76656,76660~76661,76664,76667,76673,76676,76678~76682,76684~76687,76691,76693,76701~76708,76710~76712,76714~76716,76797~76799,77001~77010,77014,77018~77019,77021~77022,77024~77025,77027,77030~77031,77035~77036,77038,77040~77043,77045~77046,77051~77057,77063~77072,77074,77077,77079~77086,77088,77090~77092,77094~77096,77098~77099,77201~77204,77206,77208~77210,77212,77215~77216,77218~77219,77221~77222,77224~77225,77227,77230~77231,77235~77238,77240~77245,77248~77249,77251~77257,77263,77265~77272,77274~77275,77277,77279~77280,77282,77284,77288,77290~77293,77297,77299,77304,77316,77318,77333,77337,77353~77356,77362~77363,77375,77377,77379~77384,77388~77389,77391,77401~77402,77404,77406~77407,77410~77415,77417~77420,77422~77423,77426,77428~77437,77440~77461,77463~77471,77473~77489,77491~77494,77496~77498,77801~77803,77805~77808,77830~77831,77833~77838,77840~77845,77850,77852~77853,77855~77857,77859,77861~77863,77865~77868,77870~77873,77875~77876,77878~77882,77901~77905,77950~77951,77954,77957,77960~77964,77967~77971,77973~77979,77982~77984,77986~77991,77993~77995,78650,78659,78931~78935,78938,78940~78952,78954,78956~78957,78960~78963')) || (opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }) && opIn(t.custom1, new Set<String> { 'commercial' }) && opIn(t.state, new Set<String> { 'ar', 'arkansas' })))      return 'a304u000002pkxsAAA'; //Patch CSR Houston West/AR/MO - GEO Based
    return null;
  }
  private Id matchGroup6(PatchDataModel.MatchTarget t)
  {
    if(opIn(t.country, new Set<String> { 'es', 'esp', 'spain', 'pt', 'prt', 'portugal', 'gibraltar', 'gibraltor' }) && opIn(t.custom1, new Set<String> { 'commercial' }))      return 'a304u000002pkxtAAA'; //Patch CSR Iberia - GEO Based
    if(opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }) && opIn(t.custom1, new Set<String> { 'commercial' }) && opIn(t.state, new Set<String> { 'il', 'illinois' }) && opZipcode(t.zipCode, '60001~60002,60004~60022,60025~60026,60029~60031,60033~60035,60037~60051,60053,60055~60056,60060~60062,60064~60065,60067~60079,60081~60099,60101~60113,60115~60126,60128~60148,60150~60157,60159~60165,60168~60181,60183~60197,60199,60201~60204,60208~60209,60407,60416,60420,60424,60437,60444,60447,60450,60460,60470,60474,60479,60505~60507,60510~60512,60518,60520,60530~60531,60536~60539,60541~60543,60545,60548~60554,60556~60557,60560,60598,60613,60618,60625~60626,60630~60631,60639~60641,60645~60647,60656,60659~60660,60666,60668,60688,60706,60712,60714,60901,60910~60915,60917~60922,60924,60926~60936,60938~60942,60944~60946,60948~60964,60966~60970,60973~60974,61001,61006~61008,61010~61016,61018~61021,61024~61025,61027~61028,61030~61032,61036~61039,61041~61044,61046~61054,61057,61059~61065,61067~61068,61070~61075,61077~61081,61084~61085,61087~61089,61091,61101~61112,61114~61115,61125~61126,61130~61132,61201,61204,61230~61244,61250~61252,61254,61256~61266,61270,61272~61279,61281~61285,61299,61301,61310~61338,61340~61342,61344~61346,61348~61350,61353~61354,61356,61358~61364,61367~61379,61401~61402,61410~61428,61430~61443,61447~61455,61458~61460,61462,61465~61480,61482~61486,61488~61491,61501,61516~61517,61519~61520,61523~61526,61528~61537,61539~61548,61550,61552~61555,61558~61565,61567~61572,61601~61607,61610~61616,61625,61629~61630,61633~61639,61641,61643,61650~61656,61701~61702,61704~61705,61709~61710,61720~61745,61747~61756,61758~61761,61764,61769~61778,61790~61791,61799,61801~61803,61810~61818,61820~61822,61824~61826,61830~61834,61839~61859,61862~61866,61870~61878,61880,61882~61884,61910~61914,61917,61919~61920,61924~61925,61928~61933,61936~61938,61940~61944,61949,61951,61953,61955~61957,62001~62002,62006,62009~62019,62021~62028,62030~62037,62040,62044~62054,62056,62058~62063,62065,62067,62069~62071,62074~62095,62097~62098,62201~62208,62214~62226,62230~62234,62236~62250,62252~62266,62268~62269,62271~62275,62277~62282,62284~62286,62288~62289,62292~62295,62297~62298,62301,62305~62306,62311~62314,62316,62319~62321,62323~62326,62329~62330,62334,62336,62338~62341,62343~62349,62351~62363,62365~62367,62370,62373~62376,62378~62380,62401,62410~62411,62413~62414,62417~62428,62431~62436,62438~62452,62454,62458~62469,62471,62473~62481,62501,62510,62512~62515,62517~62526,62530~62541,62543~62551,62553~62558,62560~62561,62563,62565,62567~62568,62570~62573,62601,62610~62613,62615,62617~62618,62621~62622,62624~62631,62633~62635,62638~62640,62642~62644,62649~62651,62655~62656,62659~62668,62670~62675,62677,62681~62685,62688~62695,62701~62708,62711~62713,62715~62716,62719,62721~62723,62726,62736,62739,62746,62756~62757,62761~62767,62769,62776~62777,62781,62786,62791,62794,62796,62801,62803,62805~62812,62814~62825,62827~62840,62842~62844,62846,62848~62872,62874~62899,62901~62903,62905~62910,62912,62914~62924,62926~62928,62930~62935,62938~62943,62946~62967,62969~62977,62979,62982~62985,62987~62988,62990,62992~62999'))      return 'a304u000002pkxuAAA'; //Patch CSR IL/Chicago 2 - GEO Based
    if(opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }) && opIn(t.custom1, new Set<String> { 'commercial' }) && opIn(t.state, new Set<String> { 'oh', 'ohio' }))      return 'a304u000002pkyZAAQ'; //Patch CSR OH - GEO Based
    if(opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }) && opIn(t.custom1, new Set<String> { 'commercial' }) && opIn(t.state, new Set<String> { 'oh', 'ohio', 'in', 'indiana' }) && opZipcode(t.zipCode, '44001,44003~44005,44010~44012,44017,44021~44024,44026,44028,44030,44032~44033,44035~44036,44039~44041,44044~44050,44052~44057,44060~44062,44064~44065,44067~44068,44070,44072~44074,44076~44077,44080~44082,44084~44090,44092~44097,44099,44101~44147,44149,44181,44188,44190~44195,44197~44199,46001,46011~46018,46030~46041,46044~46045,46047~46052,46055~46058,46060~46065,46067~46072,46074~46077,46082,46085,46102~46107,46110~46113,46115,46117~46118,46120~46131,46133,46135,46140,46142~46144,46146~46151,46154~46158,46160~46168,46170~46173,46175~46176,46180~46184,46186,46201~46209,46211,46213~46214,46216~46222,46224~46231,46234~46237,46239~46242,46244,46247,46249~46251,46253~46256,46259~46260,46262,46266,46268,46274~46275,46277~46278,46280,46282~46283,46285,46288,46290~46291,46295~46296,46298,46301~46304,46307~46308,46310~46312,46319~46325,46327,46340~46342,46345~46350,46352,46355~46356,46360~46361,46365~46366,46368,46371~46377,46379~46385,46390~46394,46401~46411,46501~46502,46504,46506~46508,46510~46511,46513~46517,46524,46526~46528,46530~46532,46534,46536~46540,46542~46546,46550,46552~46556,46561~46563,46565,46567,46570~46574,46580~46582,46590,46595,46601,46613~46617,46619,46624,46626,46628,46634~46635,46637,46660,46680,46699,46701~46706,46710~46711,46713~46714,46721,46723,46725,46730~46733,46737~46738,46740~46743,46745~46748,46750,46755,46759~46761,46763~46767,46769~46774,46776~46789,46791~46799,46801~46809,46814~46816,46818~46819,46825,46835,46845,46850~46869,46885,46895~46899,46901~46904,46910~46917,46919~46923,46926,46928~46933,46935~46943,46945~46947,46950~46953,46957~46962,46965,46967~46968,46970~46971,46974~46975,46977~46980,46982,46984~46992,46994~46996,46998,47001,47003,47006,47010~47012,47016~47025,47030~47043,47060,47102,47104,47106~47108,47110~47112,47114~47120,47122~47126,47129~47138,47140~47147,47150~47151,47160~47167,47170,47172,47174~47175,47177,47190,47199,47201~47203,47220,47223~47232,47234~47236,47240,47243~47247,47249~47250,47260~47261,47263~47265,47270,47272~47274,47280~47283,47302~47308,47320,47322,47324~47327,47330~47331,47334~47342,47344~47346,47348,47351~47362,47366~47371,47373~47375,47380~47388,47390,47392~47394,47396,47401~47408,47420~47421,47424,47426~47427,47429,47431~47439,47441,47443,47445~47446,47448~47449,47451~47460,47462~47465,47467~47471,47501,47512~47516,47519~47525,47527~47529,47531~47532,47535~47537,47541~47542,47545~47547,47549~47553,47556~47558,47561~47562,47564,47567~47568,47573~47581,47584~47586,47588,47590~47591,47596~47598,47601,47610~47613,47615~47620,47629~47631,47633~47635,47637~47640,47647~47649,47654,47660,47665~47666,47670,47683,47701~47706,47708,47710~47716,47719~47722,47724~47725,47728,47730~47737,47740,47747,47750,47801~47805,47807~47809,47830~47834,47836~47838,47840~47842,47845~47855,47857~47863,47865~47866,47868~47872,47874~47876,47878~47882,47884~47885,47901~47907,47909,47916~47918,47920~47926,47928~47930,47932~47933,47940~47944,47946,47948~47952,47954~47955,47957~47960,47962~47971,47974~47975,47977~47978,47980~47984,47986~47997'))      return 'a304u000002pkxvAAA'; //Patch CSR IN/Cleveland - GEO Based
    if((opStart(t.company, new Set<String> { 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9' }) && opIn(t.country, new Set<String> { 'ind', 'india', 'in' }) && opIn(t.custom1, new Set<String> { 'smb', 'commercial' }) && opIn(t.state, new Set<String> { 'delhi', 'haryana', 'uttar pradesh', 'punjab', 'dhaka', 'bangladesh', 'maharashtra', 'gujarat', 'rajasthan', 'madhya pradesh', 'nct', 'new delhi' })) || (opIn(t.custom1, new Set<String> { 'smb', 'commercial' }) && opIn(t.country, new Set<String> { 'bangladesh', 'pakistan' })))      return 'a304u000002pkxwAAA'; //Patch CSR India NW 1 - GEO Based
    if((opStart(t.company, new Set<String> { 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z' }) && opIn(t.country, new Set<String> { 'ind', 'india', 'in' }) && opIn(t.custom1, new Set<String> { 'smb', 'commercial' }) && opIn(t.state, new Set<String> { 'delhi', 'haryana', 'uttar pradesh', 'punjab', 'maharashtra', 'gujarat', 'rajasthan', 'madhya pradesh', 'nct', 'new delhi' })))      return 'a304u000002pkxxAAA'; //Patch CSR India NW 2 - GEO Based
    if((opStart(t.company, new Set<String> { 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9' }) && opIn(t.country, new Set<String> { 'ind', 'india', 'in' }) && opIn(t.custom1, new Set<String> { 'smb', 'commercial' }) && opIn(t.state, new Set<String> { 'karnataka', 'tamil nadu', 'kerala', 'puducherry', 'telangana', 'andhra pradesh', 'west bengal', 'jharkhand', 'odisha', 'bihar' })) || (opIn(t.custom1, new Set<String> { 'smb', 'commercial' }) && opIn(t.country, new Set<String> { 'sri lanka' })))      return 'a304u000002pkxyAAA'; //Patch CSR India SE 1 - GEO Based
    if(opStart(t.company, new Set<String> { 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z' }) && opIn(t.country, new Set<String> { 'ind', 'india', 'in' }) && opIn(t.custom1, new Set<String> { 'smb', 'commercial' }) && opIn(t.state, new Set<String> { 'karnataka', 'tamil nadu', 'kerala', 'puducherry', 'telangana', 'andhra pradesh', 'west bengal', 'sri lanka', 'jharkhand', 'odisha', 'bihar' }))      return 'a304u000002pkxzAAA'; //Patch CSR India SE 2 - GEO Based
    if((opIn(t.country, new Set<String> { 'gb', 'gbr', 'united kingdom', 'uk', 'great britain', 'england', 'northern ireland', 'nir' }) && opIn(t.custom1, new Set<String> { 'smb', 'commercial' }) && opStart(t.zipCode, new Set<String> { 'bt' })) || (opIn(t.country, new Set<String> { 'ie', 'irl', 'ireland', 'republic of ireland' }) && opIn(t.custom1, new Set<String> { 'smb', 'commercial' })))      return 'a304u000002pky0AAA'; //Patch CSR Ireland/Northern Ireland - GEO Based
    if(opIn(t.country, new Set<String> { 'it', 'ita', 'italy', 'italia' }) && opIn(t.custom1, new Set<String> { 'commercial' }))      return 'a304u000002pky1AAA'; //Patch CSR Italy - GEO Based
    if((opIn(t.country, new Set<String> { 'jp', 'jpn', 'japan' }) && opIn(t.custom1, new Set<String> { 'commercial' }) && opIn(t.state, new Set<String> { 'hokkaido', 'akita', 'aomori', 'fukushima', 'iwate', 'miyagi', 'yamagata', 'ibaraki', 'saitama', 'tochigi' })) || (opIn(t.country, new Set<String> { 'jp', 'jpn', 'japan' }) && opIn(t.custom1, new Set<String> { 'commercial' }) && opStart(t.zipCode, new Set<String> { '100', '101', '102' })))      return 'a304u000002pky2AAA'; //Patch CSR Japan 1 - GEO Based
    if((opIn(t.country, new Set<String> { 'jp', 'jpn', 'japan' }) && opIn(t.custom1, new Set<String> { 'commercial' }) && opIn(t.state, new Set<String> { 'aichi', 'fukui', 'gifu', 'ishikawa', 'nagano', 'niigata', 'shizuoka', 'toyama', 'yamanashi' })) || (opIn(t.country, new Set<String> { 'jp', 'jpn', 'japan' }) && opIn(t.custom1, new Set<String> { 'commercial' }) && opStart(t.zipCode, new Set<String> { '103', '104', '105' })))      return 'a304u000002pky3AAA'; //Patch CSR Japan 2 - GEO Based
    if((opIn(t.country, new Set<String> { 'jp', 'jpn', 'japan' }) && opIn(t.custom1, new Set<String> { 'commercial' }) && opIn(t.state, new Set<String> { 'saga', 'yamaguchi', 'shimane', 'tokushima', 'tottori', 'kagawa', 'kochi', 'okinawa' })) || (opIn(t.country, new Set<String> { 'jp', 'jpn', 'japan' }) && opIn(t.custom1, new Set<String> { 'commercial' }) && opStart(t.zipCode, new Set<String> { '106', '107', '108', '109', '110', '111', '112', '113', '114', '115', '116', '117', '118', '119', '120', '121', '122', '123', '124', '125', '126', '127', '128', '129', '130', '131', '132', '133', '134', '135', '136', '137', '138', '139', '140', '141', '142', '143', '144', '145', '146', '147', '148', '149' })))      return 'a304u000002pky4AAA'; //Patch CSR Japan 3 - GEO Based
    if((opIn(t.country, new Set<String> { 'jp', 'jpn', 'japan' }) && opIn(t.custom1, new Set<String> { 'commercial' }) && opIn(t.state, new Set<String> { 'kanagawa', 'kyoto', 'hyogo', 'nara', 'shiga', 'mie', 'wakayama', 'chiba', 'gunma' })) || (opIn(t.country, new Set<String> { 'jp', 'jpn', 'japan' }) && opIn(t.custom1, new Set<String> { 'commercial' }) && opStart(t.zipCode, new Set<String> { '150', '151', '152', '153', '154', '155', '156', '157', '158', '159', '160', '161', '162', '163', '164', '165', '166', '167', '168', '169', '170', '171', '172', '173', '174', '175', '176', '177', '178', '179', '180', '181', '182', '183', '184', '185', '186', '187', '188', '189', '190', '191', '192', '193', '194', '195', '196', '197', '198', '199' })))      return 'a304u000002pky5AAA'; //Patch CSR Japan 4 - GEO Based
    if((opIn(t.country, new Set<String> { 'jp', 'jpn', 'japan' }) && opIn(t.custom1, new Set<String> { 'commercial' }) && opIn(t.state, new Set<String> { 'fukuoka', 'hiroshima', 'ehime', 'kagoshima', 'kumamoto', 'miyazaki', 'nagasaki', 'oita', 'okayama', 'osaka' })) || (opIn(t.country, new Set<String> { 'jp', 'jpn', 'japan' }) && opIn(t.custom1, new Set<String> { 'commercial' }) && opStart(t.zipCode, new Set<String> { '000', '001', '002', '003', '004', '005', '006', '007', '008', '009', '010', '011', '012', '013', '014', '015', '016', '017', '018', '019', '020', '021', '022', '023', '024', '025', '026', '027', '028', '029', '030', '031', '032', '033', '034', '035', '036', '037', '038', '039', '040', '041', '042', '043', '044', '045', '046', '047', '048', '049', '050', '051', '052', '053', '054', '055', '056', '057', '058', '059', '060', '061', '062', '063', '064', '065', '066', '067', '068', '069', '070', '071', '072', '073', '074', '075', '076', '077', '078', '079', '080', '081', '082', '083', '084', '085', '086', '087', '088', '089', '090', '091', '092', '093', '094', '095', '096', '097', '098', '099', '200', '201', '202', '203', '204', '205', '206', '207', '208', '209', '210', '211', '212', '213', '214', '215', '216', '217', '218', '219', '220', '221', '222', '223', '224', '225', '226', '227', '228', '229', '230', '231', '232', '233', '234', '235', '236', '237', '238', '239', '240', '241', '242', '243', '244', '245', '246', '247', '248', '249', '250', '251', '252', '253', '254', '255', '256', '257', '258', '259', '260', '261', '262', '263', '264', '265', '266', '267', '268', '269', '270', '271', '272', '273', '274', '275', '276', '277', '278', '279', '280', '281', '282', '283', '284', '285', '286', '287', '288', '289', '290', '291', '292', '293', '294', '295', '296', '297', '298', '299', '300', '301', '302', '303', '304', '305', '306', '307', '308', '309', '310', '311', '312', '313', '314', '315', '316', '317', '318', '319', '320', '321', '322', '323', '324', '325', '326', '327', '328', '329', '330', '331', '332', '333', '334', '335', '336', '337', '338', '339', '340', '341', '342', '343', '344', '345', '346', '347', '348', '349', '350', '351', '352', '353', '354', '355', '356', '357', '358', '359', '360', '361', '362', '363', '364', '365', '366', '367', '368', '369', '370', '371', '372', '373', '374', '375', '376', '377', '378', '379', '380', '381', '382', '383', '384', '385', '386', '387', '388', '389', '390', '391', '392', '393', '394', '395', '396', '397', '398', '399', '400', '401', '402', '403', '404', '405', '406', '407', '408', '409', '410', '411', '412', '413', '414', '415', '416', '417', '418', '419', '420', '421', '422', '423', '424', '425', '426', '427', '428', '429', '430', '431', '432', '433', '434', '435', '436', '437', '438', '439', '440', '441', '442', '443', '444', '445', '446', '447', '448', '449', '450', '451', '452', '453', '454', '455', '456', '457', '458', '459', '460', '461', '462', '463', '464', '465', '466', '467', '468', '469', '470', '471', '472', '473', '474', '475', '476', '477', '478', '479', '480', '481', '482', '483', '484', '485', '486', '487', '488', '489', '490', '491', '492', '493', '494', '495', '496', '497', '498', '499', '500', '501', '502', '503', '504', '505', '506', '507', '508', '509', '510', '511', '512', '513', '514', '515', '516', '517', '518', '519', '520', '521', '522', '523', '524', '525', '526', '527', '528', '529', '530', '531', '532', '533', '534', '535', '536', '537', '538', '539', '540', '541', '542', '543', '544', '545', '546', '547', '548', '549', '550', '551', '552', '553', '554', '555', '556', '557', '558', '559', '560', '561', '562', '563', '564', '565', '566', '567', '568', '569', '570', '571', '572', '573', '574', '575', '576', '577', '578', '579', '580', '581', '582', '583', '584', '585', '586', '587', '588', '589', '590', '591', '592', '593', '594', '595', '596', '597', '598', '599', '600', '601', '602', '603', '604', '605', '606', '607', '608', '609', '610', '611', '612', '613', '614', '615', '616', '617', '618', '619', '620', '621', '622', '623', '624', '625', '626', '627', '628', '629', '630', '631', '632', '633', '634', '635', '636', '637', '638', '639', '640', '641', '642', '643', '644', '645', '646', '647', '648', '649', '650', '651', '652', '653', '654', '655', '656', '657', '658', '659', '660', '661', '662', '663', '664', '665', '666', '667', '668', '669', '670', '671', '672', '673', '674', '675', '676', '677', '678', '679', '680', '681', '682', '683', '684', '685', '686', '687', '688', '689', '690', '691', '692', '693', '694', '695', '696', '697', '698', '699', '700', '701', '702', '703', '704', '705', '706', '707', '708', '709', '710', '711', '712', '713', '714', '715', '716', '717', '718', '719', '720', '721', '722', '723', '724', '725', '726', '727', '728', '729', '730', '731', '732', '733', '734', '735', '736', '737', '738', '739', '740', '741', '742', '743', '744', '745', '746', '747', '748', '749', '750', '751', '752', '753', '754', '755', '756', '757', '758', '759', '760', '761', '762', '763', '764', '765', '766', '767', '768', '769', '770', '771', '772', '773', '774', '775', '776', '777', '778', '779', '780', '781', '782', '783', '784', '785', '786', '787', '788', '789', '790', '791', '792', '793', '794', '795', '796', '797', '798', '799', '800', '801', '802', '803', '804', '805', '806', '807', '808', '809', '810', '811', '812', '813', '814', '815', '816', '817', '818', '819', '820', '821', '822', '823', '824', '825', '826', '827', '828', '829', '830', '831', '832', '833', '834', '835', '836', '837', '838', '839', '840', '841', '842', '843', '844', '845', '846', '847', '848', '849', '850', '851', '852', '853', '854', '855', '856', '857', '858', '859', '860', '861', '862', '863', '864', '865', '866', '867', '868', '869', '870', '871', '872', '873', '874', '875', '876', '877', '878', '879', '880', '881', '882', '883', '884', '885', '886', '887', '888', '889', '890', '891', '892', '893', '894', '895', '896', '897', '898', '899', '900', '901', '902', '903', '904', '905', '906', '907', '908', '909', '910', '911', '912', '913', '914', '915', '916', '917', '918', '919', '920', '921', '922', '923', '924', '925', '926', '927', '928', '929', '930', '931', '932', '933', '934', '935', '936', '937', '938', '939', '940', '941', '942', '943', '944', '945', '946', '947', '948', '949', '950', '951', '952', '953', '954', '955', '956', '957', '958', '959', '960', '961', '962', '963', '964', '965', '966', '967', '968', '969', '970', '971', '972', '973', '974', '975', '976', '977', '978', '979', '980', '981', '982', '983', '984', '985', '986', '987', '988', '989', '990', '991', '992', '993', '994', '995', '996', '997', '998', '999' })))      return 'a304u000002pky6AAA'; //Patch CSR Japan 5 - GEO Based
    if(opIn(t.country, new Set<String> { 'south korea', 'kr', '\'korea', 'republic of\'', 'korea', 'republic of korea' }) && opIn(t.custom1, new Set<String> { 'smb', 'commercial' }))      return 'a304u000002pky7AAA'; //Patch CSR Korea - GEO Based
    if(opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }) && opIn(t.custom1, new Set<String> { 'commercial' }) && opIn(t.state, new Set<String> { 'ca', 'california' }) && opZipcode(t.zipCode, '90001~90084,90086~90091,90093~90096,90099,90134,90189,90201~90202,90209~90213,90220~90224,90230~90233,90239~90242,90245,90247~90251,90255,90260~90267,90270,90272,90280,90290~90296,90301~90312,90401~90411,90506,90601~90610,90637~90640,90650~90652,90660~90662,90670~90671,90706~90707,90723'))      return 'a304u000002pky9AAA'; //Patch CSR LA Metro - GEO Based
    if(opIn(t.country, new Set<String> { 'gb', 'gbr', 'united kingdom', 'uk', 'great britain', 'england' }) && opStart(t.zipCode, new Set<String> { 'ec2', 'ec3' }) && opIn(t.custom1, new Set<String> { 'commercial' }))      return 'a304u000002pkyAAAQ'; //Patch CSR London East - GEO Based
    if(opIn(t.country, new Set<String> { 'gb', 'gbr', 'united kingdom', 'uk', 'great britain', 'england' }) && opStart(t.zipCode, new Set<String> { 'ec1', 'ec4' }) && opIn(t.custom1, new Set<String> { 'commercial' }))      return 'a304u000002pkyBAAQ'; //Patch CSR London Mid - GEO Based
    if(opIn(t.country, new Set<String> { 'gb', 'gbr', 'united kingdom', 'uk', 'great britain', 'england' }) && opStart(t.zipCode, new Set<String> { 'e1', 'e2', 'e3', 'e4', 'e5', 'e6', 'e7', 'e8', 'e9', 'n1', 'n2', 'n3', 'n4', 'n5', 'n6', 'n7', 'n8', 'n9', 'nw', 'sm', 'w2', 'w3', 'w4', 'w5', 'w6', 'w7', 'w8', 'w9' }) && opIn(t.custom1, new Set<String> { 'commercial' }))      return 'a304u000002pkyCAAQ'; //Patch CSR London North - GEO Based
    if(opIn(t.country, new Set<String> { 'gb', 'gbr', 'united kingdom', 'uk', 'great britain', 'england' }) && opStart(t.zipCode, new Set<String> { 'sw', 'se' }) && opIn(t.custom1, new Set<String> { 'commercial' }))      return 'a304u000002pkyDAAQ'; //Patch CSR London South - GEO Based
    if(opIn(t.country, new Set<String> { 'gb', 'gbr', 'united kingdom', 'uk', 'great britain', 'england' }) && opStart(t.zipCode, new Set<String> { 'w1', 'wc' }) && opIn(t.custom1, new Set<String> { 'commercial' }))      return 'a304u000002pkyEAAQ'; //Patch CSR London West - GEO Based
    if(opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }) && opIn(t.custom1, new Set<String> { 'commercial' }) && opIn(t.state, new Set<String> { 'massachusetts', 'ma' }) && opZipcode(t.zipCode, '01431~01432,01450,01460,01463~01464,01469~01472,01474,01701~01705,01718~01721,01730~01731,01740~01742,01745~01746,01748~01749,01752,01754,01760,01770,01772~01773,01775~01776,01778,01784,01801,01803,01805,01810,01812~01813,01815,01821~01822,01824,01826~01827,01830~01835,01840~01845,01850~01854,01860,01862~01867,01876,01879~01880,01885~01890,01899,01901~01908,01910,01913,01915,01921~01923,01929~01931,01936~01938,01940,01944~01945,01949~01952,01960~01961,01965~01966,01969~01971,01982~01985,02138~02145,02148~02149,02153,02155~02156,02176,02180,02212,02238,02420~02421,02451~02456,02458~02462,02464~02468,02471~02472,02474~02479,02493,02495,05501,05544'))      return 'a304u000002pkyFAAQ'; //Patch CSR MA Northeast - GEO Based
    if((opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }) && opIn(t.custom1, new Set<String> { 'commercial' }) && opIn(t.state, new Set<String> { 'massachusetts', 'ma' }) && opZipcode(t.zipCode, '01001~01005,01007~01014,01020~01022,01026~01041,01050,01053~01054,01056~01057,01059~01063,01066,01068~01075,01077,01079~01086,01088~01090,01092~01098,01101~01109,01111,01115~01116,01118~01119,01128~01129,01138~01139,01144,01151~01152,01199,01201~01203,01220,01222~01227,01229~01230,01235~01238,01240,01242~01245,01247,01252~01260,01262~01264,01266~01267,01270,01301~01302,01330~01331,01337~01344,01346~01347,01349~01351,01354~01355,01360,01364,01366~01368,01370,01373,01375~01376,01378~01380,01420,01430,01434,01436,01438,01440~01441,01451~01453,01462,01467~01468,01473,01475,01501,01503~01510,01515~01516,01518~01527,01529,01531~01532,01534~01538,01540~01543,01545~01546,01550,01560~01562,01564,01566,01568~01571,01581,01583,01585~01586,01588,01590,01601~01615,01653,01655,01747,01756~01757,02018~02021,02025~02027,02030,02032,02035,02038,02040~02041,02043~02045,02047~02048,02050~02056,02059~02062,02065~02067,02070~02072,02081,02090,02093,02169~02171,02184~02191,02269,02301~02305,02322,02324~02325,02327,02330~02334,02337~02341,02343~02351,02355~02362,02364,02366~02368,02370,02375,02379,02381~02382,02445~02447,02457,02481~02482,02492,02494,02532,02534~02543,02552~02554,02556~02559,02561~02564,02568,02571,02574~02576,02584,02601,02630~02635,02637~02639,02641~02653,02655,02657,02659~02664,02666~02673,02675,02702~02703,02712~02715,02717~02726,02738~02748,02760~02764,02766~02771,02777,02779~02780,02783,02790~02791,02801~02802,02804,02806~02809,02812~02818,02822~02833,02835~02842,02852,02857~02865,02871~02883,02885~02889,02891~02896,02898,02901~02912,02914~02921,02940')) || (opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }) && opIn(t.custom1, new Set<String> { 'commercial' }) && opIn(t.state, new Set<String> { 'ri', 'rhode island' })))      return 'a304u000002pkyHAAQ'; //Patch CSR MA/RI - GEO Based
    if(opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }) && opIn(t.state, new Set<String> { 'md', 'maryland' }) && opIn(t.custom1, new Set<String> { 'commercial' }))      return 'a304u000002pkyIAAQ'; //Patch CSR MD - GEO Based
    return null;
  }
  //returns the matched patch
  global PatchDataModel.PatchInfo match(PatchDataModel.MatchTarget t)
  {
    Id result = null;
    prematches = prematchList(t);
    result = matchGroup1(t);
    if(result != null) return processResult(result);
    result = matchGroup2(t);
    if(result != null) return processResult(result);
    result = matchGroup3(t);
    if(result != null) return processResult(result);
    result = matchGroup4(t);
    if(result != null) return processResult(result);
    result = matchGroup5(t);
    if(result != null) return processResult(result);
    result = matchGroup6(t);
    if(result != null) return processResult(result);
    return null;
  }
}