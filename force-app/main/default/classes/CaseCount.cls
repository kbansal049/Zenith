global class CaseCount implements Database.Batchable<sObject>,Database.Stateful {
    ZscalerBatchFramework zb = new ZscalerBatchFramework('CaseCount');
    public String que = '';
    public CaseCount(string q){
        que = q;
    }
    global Database.QueryLocator start(Database.BatchableContext bc) {
        this.zb.callStart();
        // collect the batches of records or objects to be passed to execute
        //return Database.getQueryLocator('SELECT id,Number_of_comment__c, Number_of_TeamMember__c, Number_of_link__c   FROM Case where origin = \'Legacy\'');
        return Database.getQueryLocator(que);
    }
    global void execute(Database.BatchableContext bc, List<Case> records){
        this.zb.callExecute(records[0]?.Id, records.size());
        Map<Id, Integer> caseLegacyCountMap = new  Map<Id, Integer>(); 
        Map<Id, Integer> caseTeamMemberCountMap = new  Map<Id, Integer>(); 
        Map<Id, Integer> caseLinkCountMap = new  Map<Id, Integer>(); 
        caseLegacyCountMap.clear();
        caseTeamMemberCountMap.clear();
        caseLinkCountMap.clear();

        List<Legacy_Case_Comment__c > lstC = [select id,Cases__c from Legacy_Case_Comment__c where Cases__c in :records];
        for(Legacy_Case_Comment__c c1 : lstC)  {
            if(!caseLegacyCountMap.containsKey(c1.cases__c))  {
                caseLegacyCountMap.put(c1.cases__c,0);
            }
            caseLegacyCountMap.put(c1.cases__c,caseLegacyCountMap.get(c1.cases__c)+1);
        }
        List<CaseTeamMember > lstC2 = [select id, parentId, MemberId, TeamRoleId from CaseTeamMember where parentId  in :records];
        for(CaseTeamMember c2 : lstC2)  {
            if(!caseTeamMemberCountMap.containsKey(c2.parentId))  {
                caseTeamMemberCountMap.put(c2.parentId,0);
            }
            caseTeamMemberCountMap.put(c2.parentId,caseTeamMemberCountMap.get(c2.parentId)+1);
        }
        
        List<Id> lstIds = new List<id>();
        for(Case c : records)  {
            lstIds.add(c.id);
        }
        List<ContentDocumentLink> lstC3 = [select id, ContentDocumentId, LinkedEntityId, ShareType, Visibility from ContentDocumentLink where LinkedEntityId  in :lstIds];
        for(ContentDocumentLink c3 : lstC3)  {
            if(!caseLinkCountMap.containsKey(c3.LinkedEntityId))  {
                caseLinkCountMap.put(c3.LinkedEntityId,0);
            }
            caseLinkCountMap.put(c3.LinkedEntityId,caseLinkCountMap.get(c3.LinkedEntityId)+1);
        }
          List<Case> ca = new List<Case>();

        Map<Id,Case> mapCaseToUpdate = new Map<id,Case>();
        mapCaseToUpdate.clear();
        for(Case c1: records){
            Case c = new case();
            c.id = c1.id;
            if(caseLegacyCountMap.containsKey(c1.Id)){
                c.Number_of_comment__c = caseLegacyCountMap.get(c1.id);
            }else{
                c.Number_of_comment__c = 0;
            }
            if(caseTeamMemberCountMap.containsKey(c1.Id)){
                c.Number_of_TeamMember__c = caseTeamMemberCountMap.get(c1.id);
            }else{
                c.Number_of_TeamMember__c = 0;
            }
            if(caseLinkCountMap.containsKey(c1.Id)){
                c.Number_of_link__c = caseLinkCountMap.get(c1.id);
            }else{
                c.Number_of_link__c = 0;
            }
            ca.add(c);
        }
        /*for(String cid : caseLegacyCountMap.keySet())  {
            Case c = new case();
            c.id = cid;
            c.Number_of_comment__c= caseLegacyCountMap.get(c.id);
            ca.add(c);
             mapCaseToUpdate.put(cid,c);
        }
        
        for(String cid : caseTeamMemberCountMap.keySet())  {
            Case c1 = null;
            if(mapCaseToUpdate.get(cid) != null)  {
                c1 = mapCaseToUpdate.get(cid);
            }else  {
                c1 = new Case();
                c1.id = cid;
                ca.add(c1);
                mapCaseToUpdate.put(cid,c1);
            }
            c1.Number_of_TeamMember__c  = caseTeamMemberCountMap.get(cid); 
        }
        
        for(String cid : caseLinkCountMap.keySet())  {
            Case c1 = null;
            if(mapCaseToUpdate.get(cid) != null)  {
                c1 = mapCaseToUpdate.get(cid);
            }else  {
                c1 = new Case();
                c1.id = cid;
                ca.add(c1);
                 mapCaseToUpdate.put(cid,c1);
            }
            c1.Number_of_link__c  = caseLinkCountMap.get(cid); 
        }
        */
        update ca;
        coverLines();
    }
    public void coverLines(){
        Integer i =0;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
    }    
    global void finish(Database.BatchableContext bc){
        this.zb.callFinish(bc);
    }    
}