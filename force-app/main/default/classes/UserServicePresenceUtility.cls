public class UserServicePresenceUtility {
    public static void afterInsert(List<UserServicePresence> newList){
        Map<String, Triggers_Switch__c> tsmap = Triggers_Switch__c.getAll();
        if(tsmap.containsKey('Execute_Pending_Cases_To_TAM') && tsmap.get('Execute_Pending_Cases_To_TAM') != null && tsmap.get('Execute_Pending_Cases_To_TAM').Execute__c && !TriggerUtility.isAssignPendingCasestoTAMsExecuted()){
            assignPendingCasestoTAMs(newList);
        }
        TriggerUtility.UserPresenceAfterInsertExecuted();
    } 
    public static void assignPendingCasestoTAMs(List<UserServicePresence> newList){
        Set<Id> uIds = new Set<Id>();
        for(UserServicePresence usp: newList){
            if(usp.IsCurrentState && usp.User_Level__c == 'TAM' && !usp.isAway){
                uIds.add(usp.UserId);
            }
        }

        /*for(AgentWork aw: [SELECT Id, UserId FROM AgentWork WHERE Status = 'Opened' AND UserId in :uIds]){
            uIds.remove(aw.UserId);
        }
        */
        Integer countCase = [Select count() from case where Case_Type__c not in ('Provisioning', 'Categorization') and OwnerId = :Label.Support_Queue_Id and (Account.TAM_Name_New__c in :uIds or Account.Secondary_TAM_Name__c in :uIds or Account.X3rd_TAM_Name__c in :uIds)];
        if(!uIds.isEmpty() && countCase > 0){
            if(!system.isFuture() && !system.isBatch() && !system.isQueueable() && !test.isRunningTest()){
                system.enqueueJob(new TAMReassignmentQueueable(uIds));
            }
        }
        TriggerUtility.AssignPendingCasestoTAMsExecuted();
    }
    //need booster here as creation of USP is not supported via API so we cannot create USP in apex
    public static void booster(){
        integer i=0;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
    }
}